#!/bin/bash

# require inotify-tools
if ! command -v inotifywait >/dev/null 2>&1; then
    echo "error: command 'inotifywait' not found"
    exit 1
fi

# helpful functions
##

help-usage() {
    echo "usage: $(basename "$0") [-qhr] [-e regex] [-c cmd] [-s strftime] filepaths..."
}

help-epilogue() {
    echo "monitor scripts for modifications and run them when a file change is detected"
}

help() {
    help-usage
    help-epilogue
    echo
    echo "scripts are run using (in order of highest to lowest priority):"
    echo "  1. the command specified with -c"
    echo "  2. the script's hashbang, if it exists"
    echo "  3. python"
    echo
    cat << EOF
    -h/--help       show help info
    -e/--regex      when monitoring a directory, only run files matching
                    the specified pattern
    -r/--recursive  monitor directories recursively
    -c/--command    run file using \`command\`. default is "python"
    -s/--strftime   the format to use for script start/stop times
                    see \`man 3 strftime\`
    -q/--quiet      be less verbose. consecutive uses increases quietness
                    (only shows stdout of running scripts)
EOF
}

# trap functions
##

ctrlc() {
    if [ "$SCRIPT_RUNNING" -ne 1 ]; then
        echo -e '\rctrl-\ to exit'
    fi
}

ctrlq() {
    echo
    echo "...exiting"
    
    # exit successfully only if no python program is running
    if [ "$SCRIPT_RUNNING" -ne 1 ]; then
        exit 0
    else
        exit 1
    fi
}

# determine the command to use when running the script
get-prog() {
    # default is python
    prog="python"
    
    # -c/--command takes priority
    if [ -n "$COMMAND" ]; then
        prog="$COMMAND"
    else
        # check the file for a hashbang
        fline="$(head -1 "$1")"
        if [[ "$fline" == "#!"* ]]; then
            prog="$(echo "$fline" | sed 's/^#!//')"
        fi
    fi
    
    echo "$prog"
}

# echo based on verbosity level
# e.g., to echo if verbosity is <= 1:
# echo-managed 1 hello world
echo-managed() {
    # default verbosity level is 0 -- only echo at max verbosity
    level=0
    
    # if the first arg is a number, use it as verbosity level
    if [ $1 -eq $1 ] 2>/dev/null; then
        level=$1
        shift
    fi

    # compare level to global verbosity level
    if [ $level -ge $VERBOSITY ]; then
        /bin/echo $@
    fi
}

# return whether or not a filepath passes the regex
regex-test() {
    [ -z "$REGEX" ] && return 0
    
    [[ "$(basename "$1")" =~ $REGEX ]]
    return $?
}

# default options
DATE_FORMAT="%Y.%m.%d %H.%M.%S"
VERBOSITY=0
INOTIFYOPTS="-qe MODIFY"
SEP='---'

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -e|--regex)
    REGEX="$2"
    shift # past argument
    shift # past value
    ;;
    -h)
    help-usage
    help-epilogue
    echo
    echo "--help for more"
    exit
    ;;
    --help)
    help
    exit
    ;;
    -r|--recursive)
    INOTIFYOPTS="$INOTIFYOPTS -r"
    shift # past argument
    ;;
    -c|--command)
    COMMAND="$2"
    shift # past argument
    shift # past value
    ;;
    -s|--strftime)
    DATE_FORMAT="$2"
    shift # past argument
    shift # past value
    ;;
    -q|--quiet)
    let VERBOSITY++
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# require at least one path
if [ ${#POSITIONAL[@]} -eq 0 ]; then
    help-usage
    exit 1
fi

# ctrl-c should be able to kill the running python program
# ctrl-q will be used to exit
trap ctrlc SIGINT
trap ctrlq SIGQUIT

# validate regex
regex-test test
if [ $? -eq 2 ]; then
    help-usage
    echo
    echo "error invalid regex: $REGEX"
    exit 2
fi

# helpful message at beginning
echo-managed "ctrl-c: kill running python program"
echo-managed "ctrl-\: exit program"

FIRST_RUN=0
SCRIPT_RUNNING=0
while :; do
    # watch for file modifications
    output="$(inotifywait $INOTIFYOPTS "$POSITIONAL")"
        
    # check if event is for a single file or directory
    if [[ "$output" == *"MODIFY " ]]; then
        # single file
        filename="$(echo "$output" | sed 's/ MODIFY $//')"
        filepath="$filename"
    else
        # directory
        # split on ' MODIFY '
        directory="$(echo "$output" | sed 's/ MODIFY .*//')"
        filename="$(echo "$output" | sed 's/.* MODIFY //')"
        # put the pieces together
        filepath="$directory$filename"
    fi
            
    # ensure a program was edited rather than a trapped signal caught
    if [ -n "$filename" ]; then
        # make sure it passes the regex
        regex-test "$filename" || continue
        
        # echo a blank line before all runs except the first
        [ $FIRST_RUN -eq 0 ] && FIRST_RUN=1 || echo
        
        # status infoz
        prog="$(get-prog "$filepath")"
        echo-managed 2 "> $(basename "$prog") '$filepath'"
        echo-managed 1 $(date +"-- $DATE_FORMAT")
        
        # run the modified script
        SCRIPT_RUNNING=1
        $prog "$filepath"
        EXIT_CODE=$?
        SCRIPT_RUNNING=0

        # time at finish
        echo-managed 1 $(date +"-- $DATE_FORMAT")
        [ $EXIT_CODE -ne 0 ] && echo-managed 1 "-- EXIT: $EXIT_CODE"
    fi
done