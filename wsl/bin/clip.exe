#!/usr/bin/env bash
#
# Manipulate the clipboard via powershell


## imports #####################################################################
################################################################################

include-source 'colors.sh'
include-source 'debug.sh'
include-source 'wsl.sh'


## pipes #######################################################################
################################################################################

[ -t 0 ] && __FD_STDIN=false  || __FD_STDIN=true
[ -t 1 ] && __FD_STDOUT=false || __FD_STDOUT=true
[ -t 2 ] && __FD_STDERR=false || __FD_STDERR=true


## exit codes ##################################################################
################################################################################

declare -ri E_SUCCESS=0
declare -ri E_ERROR=1


## traps #######################################################################
################################################################################

function silence-output() {
    :  'Silence all script output'
    exec 3>&1 4>&2 1>/dev/null 2>&1
}

# @usage restore-output
function restore-output() {
    :  'Restore script output after a call to `silence-output`'
    [[ -t 3 ]] && exec 1>&3 3>&-
    [[ -t 4 ]] && exec 2>&4 4>&-
}

function trap-exit() {
    :  'An exit trap to restore output on script end'
    restore-output
}
trap trap-exit EXIT


## usage functions #############################################################
################################################################################

function help-usage() {
    # {{TODO: UPDATE USAGE}}
    echo "usage: $(basename "${0}") [-h]"
}

function help-epilogue() {
    # {{TODO: UPDATE EPILOGUE}}
    echo "view or update the Windows clipboard contents"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "Some extra info."
    echo
    echo "Options:"
    cat << EOF
    -h                    display usage
    --config-file <file>  use the specified configuration file
    --help                display this help message
    -c/--color <when>     when to use color ("auto", "always", "never")
    --syntax <format>     highlight the output as <format> using Pygments
                          (see \`pygmentize -L\` for a list of formats)
EOF
    echo
    echo "Input options:"
    cat << EOF
    -f/--file <file>      copy the contents of <file> to the clipboard
    -a/--append           append to the clipboard instead of replacing it
    --html                treat the input contents as HTML
    --value <value>       copy the specified value to the clipboard
EOF
    echo
    echo "Output options:"
    cat << EOF
    --raw                 output the raw clipboard contents
    --text                output in plain text format
    --unicode             output in Unicode format
    --html                output in HTML format
    --md                  output in Markdown format
    --rtf                 output in RTF format
    --csv                 output in CSV format
    --image               output in image format
    --audio               output in audio format
EOF
}

function parse-args() {
    # Parse the arguments first for a config file to load default values from
    CONFIG_FILE="${HOME}/.$(basename "${0}").conf"
    for ((i=0; i<${#}; i++)); do
        case "${!i}" in
            -c | --config-file)
                let i++
                CONFIG_FILE="${!i}"
                ;;
        esac
    done
    [[ -f "${CONFIG_FILE}" ]] && source "${CONFIG_FILE}"

    # Default values
    # {{TODO: INSERT DEFAULT VALUES HERE}}
    DO_COLOR=false
    PYGMENTS_LEXER=""  # pygments format, see `pygmentize -L`
    FILEPATH=""
    DO_APPEND=false
    COPY_CONTENTS=""
    COPY_SOURCE=""  # file, args, stdin
    IO=""  # copy, paste
    local default_io="paste"
    OUTPUT_FORMAT='text'  # text, unicode, html, md, rtf, csv, image, audio
    local color_when="${COLOR:-auto}" # auto, on, yes, always, off, no, never

    # Loop over the arguments
    local file_contents=()
    local args_contents=()
    local stdin_contents=()
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit ${E_SUCCESS}
                ;;
            --help)
                help-full
                exit ${E_SUCCESS}
                ;;
            --config-file)
                shift 1
                ;;
            -c | --color)
                color_when="${2}"
                shift 1
                ;;
            --syntax)
                PYGMENTS_LEXER="${2}"
                shift 1
                ;;
            -f | --file)
                FILEPATH="${2}"
                IO="copy"
                shift 1
                ;;
            -a | --append)
                DO_APPEND=true
                ;;
            --value)
                args_contents=( "${2}" )
                IO="copy"
                shift 1
                ;;
            --copy | --set)
                IO="copy"
                ;;
            --paste | --get)
                IO="paste"
                ;;
            --text  | --unicode | --html | --md | --rtf | --csv | \
            --image | --audio)
                OUTPUT_FORMAT="${1:2}"
                ;;
            --)
                shift 1
                break
                ;;
            -*)
                echo "error: unknown option: ${1}" >&2
                return ${E_ERROR}
                ;;
            *)
                args_contents+=( "${1}" )
                IO="copy"
                ;;
        esac
        shift 1
    done

    # If -- was used, collect the remaining arguments
    while [[ ${#} -gt 0 ]]; do
        args_contents+=( "${1}" )
        shift 1
    done

    # If stdin is being piped in, collect it and set the IO mode to copy
    if ${__FD_STDIN}; then
        stdin_contents+=( "$(cat)" )
        IO="copy"
    fi

    # Determine what to use for COPY_CONTENTS prioritizing:
    # 1. file contents
    # 2. arguments
    # 3. stdin
    if [[ -n "${FILEPATH}" ]]; then
        COPY_CONTENTS=$(<"${FILEPATH}")
        COPY_SOURCE="file"
    elif [[ ${#args_contents[@]} -gt 0 ]]; then
        COPY_CONTENTS="${args_contents[*]}"
        COPY_SOURCE="args"
    elif [[ ${#stdin_contents[@]} -gt 0 ]]; then
        COPY_CONTENTS="${stdin_contents[@]}"
        COPY_SOURCE="stdin"
    fi

    # Pretty colors
    case "${color_when}" in
        on | yes | always)
            DO_COLOR=true
            ;;
        off | no | never)
            DO_COLOR=false
            ;;
        auto)
            if ${__IN_TERMINAL}; then
                DO_COLOR=true
            else
                DO_COLOR=false
            fi
            ;;
        *)
            echo "error: invalid color mode: ${color_when}" >&2
            return ${E_ERROR}
            ;;
    esac
    ${DO_COLOR} && setup-colors || unset-colors

    # If we've gotten this far without setting IO, set it to the default
    [[ -z "${IO}" ]] && IO="${default_io}"

    return ${E_SUCCESS}
}


## helpful functions ###########################################################
################################################################################



## main ########################################################################
################################################################################

function main() {
    parse-args "${@}" || return ${?}

    debug-vars DO_COLOR PYGMENTS_LEXER FILEPATH DO_APPEND COPY_CONTENTS \
               COPY_SOURCE IO OUTPUT_FORMAT

    local cmd_args=()

    # If we're copying, do that
    if [[ "${IO}" == "copy" ]]; then
        ${DO_APPEND} && cmd_args+=( --append )
        [[ -n "${COPY_CONTENTS}" ]] && cmd_args+=( "${COPY_CONTENTS}" )
        set-clipboard "${cmd_args[@]}"
    elif [[ "${IO}" == "paste" ]]; then
        get-clipboard "--${OUTPUT_FORMAT}"
    fi
}


## run #########################################################################
################################################################################

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"
