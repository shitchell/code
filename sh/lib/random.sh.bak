include-source 'debug.sh'

# @description Generate a random number in a range
# @usage random-int
# @usage random-int <max>
# @usage random-int <min> <max>
function random-int() {
    declare -i min=0
    declare -i max=100
    declare -i range
    declare num
    
    # If 1 arg is given, set it to the max
    if [[ ${#} -eq 1 ]]; then
        max="${1}"
    elif [[ ${#} -eq 2 ]]; then
        min="${1}"
        max="${2}"
    elif [[ ${#} -ne 0 ]]; then
        echo "usage: random-int [[<min>] <max>]" >&2
        return 1
    fi

    # Generate a random number that has 2 more digits than the range
    range=$(( max - min + 1 ))
    range_length="${#range}"
    while ((${#num} < range_length)); do
        num="${num}${RANDOM}"
        debug-vars num
    done

    # Remove any leading 0s
    num="${num#0}"

    # Mod the number to be in the range and add the min
    echo $(( (num % range) + min ))
}

# @description Pick a random item from a list
# @usage random-choice <arg1> [<arg2> ...]
function random-choice() {
    local args=( "${@}" )

    # If no args were given, return
    if [[ ${#args[@]} ]]; then
        :
    fi
}




# @description Generate a random number in a range
# @usage random-int
# @usage random-int <max>
# @usage random-int <min> <max>
function __random-int() {
    debug 'using "${num}${RANDOM}"'

    declare -i min=0
    declare -i max=100
    declare -i range
    declare -i num=0
    
    # If 1 arg is given, set it to the max
    if [[ ${#} -eq 1 ]]; then
        max="${1}"
    elif [[ ${#} -eq 2 ]]; then
        min="${1}"
        max="${2}"
    elif [[ ${#} -ne 0 ]]; then
        echo "usage: random-int [[<min>] <max>]" >&2
        return 1
    fi

    # Calculate the range
    range=$(( max - min + 1 ))

    debug-vars min max range

    # # Create a number that is 2 characters longer than the range
    # while ((num < range)); do
    #     num="${num}${RANDOM}"
    #     debug-vars num
    # done
    # Generate a random number that has enough digits to be in the range
    local r
    while $((num < range)); do
        r="${RANDOM}"
        num="${num}${r}"
        debug-vars num r range
    done

    debug-vars num

    # Mod the number to be in the range and add the min
    echo $(( (num % range) + min ))
}

function __random-int-urandom() {
    declare -i min=0
    declare -i max=100
    declare -i range
    declare -i num=0
    
    # If 1 arg is given, set it to the max
    if [[ ${#} -eq 1 ]]; then
        max="${1}"
    elif [[ ${#} -eq 2 ]]; then
        min="${1}"
        max="${2}"
    elif [[ ${#} -ne 0 ]]; then
        echo "usage: random-int [[<min>] <max>]" >&2
        return 1
    fi

    # Calculate the range
    range=$(( max - min + 1 ))

    debug-vars min max range

    # Read chunks from /dev/urandom until we get a number in the range
    while read -r -d '' -n 50 byte; do
        # Strip non-numeric characters
        byte="${byte//[^0-9]/}"
        debug "adding num '${byte}'"
        ((num += byte)) 2>/dev/null
        ((num >= range)) && break
    done < /dev/urandom

    debug-vars num

    # Mod the number to be in the range and add the min
    echo $(( (num % range) + min ))


    # # Generate a random number that has enough digits to be in the range
    # local r
    # while $((num < range)) || debug-vars num r; do
    #     r="${RANDOM}"
    #     num="${num}${r}"
    #     debug-vars num r range
    # done

    # debug-vars min max range num

    # # Mod the number to be in the range and add the min
    # echo $(( (num % range) + min ))
}
