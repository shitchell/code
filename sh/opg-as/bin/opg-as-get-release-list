#!/bin/bash
#
# Returns the customizations cherry-picked on release since a given date

SINCE="${1}"

function usage {
	echo "$(basename $0): <since>"
}

function check-args() {
	if [ -z "${1}" ]; then
		usage >&2
		exit 1
	fi
}

# colored output
GREEN="\033[32m"
RED="\033[31m"
BLUE="\033[34m"
PURPLE="\033[35m"
CYAN="\033[36m"
RESET="\033[0m"

# echo a command before running it
echo-run() {
	command="$@"
	echo -e "${GREEN}${command}${RESET}"
	"$@"
	exit_code="$?"

	if [ $exit_code -ne 0 ]; then
		echo -e "${RED}command exited with status ${exit_code}${RESET}"
	fi
	return $exit_code
}

function main {
	since="${1}"

	# ensure correct args were provided
	check-args "${@}"

	# fetch updates
	echo-run git fetch --all
	
	# get all cherry-picks since the provided timestamp
	git log origin/release --since="${since}" --grep="Cherry" \
		| grep -oiP 'AS9-CUS[A-Z]*-[A-Z]{2,}-\d{4}' \
		| sort \
		| uniq
}

function get_last_pick {
	cust_pattern="$1"
	target_branch="$2"

	# Determine the minimum number of objects to have been changed for a valid "successful" cherry-pick
	# For release, we need more than 2 objects to be changed, for test we need more than 1, and we'll default to 1
	min_files_changed=1
	if [ "${target_branch}" = "release" ]; then
	    min_files_changed=2
	fi

	# Find the last Maurice Moss "Cherry-picking for" commit that changed more than 1 (for test) object or more than 2 (for release)
	# Limit the search to 10 results for efficiency's sake. It's unlikely that there will be 10 consecutive invalid cherry-picks
	# This will return a list of commits in the form of:
	#  epoch_time   commit_hash file_changes
	last_pick=$(git log -10 --shortstat "origin/${target_branch}" --grep="^Cherry-picking for ${cust_pattern}" --pretty="%at%x09%h" \
		| sed ':a;N;$!ba;s/\n\n /\t/g' \
		| awk -F ' ' '{if ($3 > '${min_files_changed}') {print $1 " " $2 " " $3}}' \
		| head -1)
	last_pick=($last_pick)
	last_pick_time=${last_pick[0]}
	last_pick_hash=${last_pick[1]}
	last_pick_objs=${last_pick[2]}

	# There could be a several hour gap between when Maurice Moss' commit is picked and when it was triggered, during which time
	# more code could have been committed. so we need to find the "Merged in" commit that triggered the cherry-pick. This will
	# be the most recent commit before the above commit
	last_merge=$(git log -1 "origin/${target_branch}" --grep="^Merged in ${cust_pattern}" --pretty="%at%x09%h" --before="${last_pick_time}")
	last_merge=($last_merge)
	last_merge_time=${last_merge[0]}
	last_merge_hash=${last_merge[1]}

	# Make sure we found a valid result that contains a last_merge_time, a last_merge_hash, and an integer number of objects greater than the minimum
	if [ -n "${last_merge_time}" ] && [ -n "${last_merge_hash}" ] && [ -n "${last_pick_objs}" ] && [ "${last_pick_objs}" -gt "${min_files_changed}" ]; then
		echo "${last_merge_time} ${last_merge_hash} ${last_pick_objs}"
	fi

	return 1
}

function get_last_checkin {
    cust="$1"

	# Find the last Pull request merging in the branch for the customization
	last_merge=$(git log -1 --merges "origin/development" --grep="^Merged in ${cust}" --pretty=format:"%at%x09%h%x09%p")
	if [ -z "${last_merge}" ]; then
		return 1
	fi
	last_merge_arr=($last_merge)
	last_merge_time=${last_merge_arr[0]}
	last_merge_hash=${last_merge_arr[1]}
	last_merge_tree="${last_merge_arr[2]}..${last_merge_arr[3]}"

    # Get the number of files changed in the merge
    last_merge_objs=$(git diff --name-only "$last_merge_tree" | wc -l)

    echo "${last_merge_time} ${last_merge_hash} ${last_merge_objs}"
}

main "$@"
