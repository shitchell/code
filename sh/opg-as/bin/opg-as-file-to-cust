#!/bin/bash
#
# accepts a filepath relative to the repository root and returns the
# customization it belongs to

## Imports #####################################################################
################################################################################

include-source debug.sh
include-source echo.sh
include-source opg-as-common.sh


## Usage functions #############################################################
################################################################################

function help-usage() {
    echo "usage: $(basename $0) [-hgmnd] [-b branch] [-m metadata-file] filepath"
}

function help-epilogue() {
    echo "determines the customization a file belongs to"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "Accepts a filepath relative to the repository root and returns the"
    echo "customization it belongs to. By default, looks for the filepath in"
    echo "'customization_metadata/customization_metadata.xml'. Can be"
    echo "overridden by the -m option, or can be set to instead search for"
    echo "the specified filepath in git with -g."
    echo
    cat << EOF
    -h                  display usage
    --help              display this help message
    -g/--git            use git to search for the file
    -b/--branch         search using the specified branch (implies -g)
    -n/--name-only      only return the customization name(s)
    -N/--no-name-only   return full information about each customization
    -m/--metadata       search using the specified metadata file instead of git
    -d/--date-format    strftime format for the date
EOF
}

function parse-args() {
    # Default values
    USE_GIT=1
    METADATA_FILE="customization_metadata/customization_metadata.xml"
    GIT_BRANCH="development"
    NAME_ONLY=0
    DATE_FORMAT="%s"

    # Loop over the arguments
    declare -a POSITIONAL_ARGS
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit 0
                ;;
            --help)
                help-full
                exit 0
                ;;
            -g|--git)
                USE_GIT=1
                shift 1
                ;;
            -b|--branch)
                USE_GIT=1
                GIT_BRANCH="$2"
                shift 2
                ;;
            -n|--name-only)
                NAME_ONLY=1
                shift 1
                ;;
            -N|--no-name-only)
                NAME_ONLY=0
                shift 1
                ;;
            -m|--metadata)
                METADATA_FILE="${2}"
                USE_GIT=0
                shift 2
                ;;
            -d|--date-format)
                DATE_FORMAT="${2}"
                shift 2
                ;;
            -*)
                echo-stderr "error: unknown option ${1}"
                echo-stderr "$(help-usage)"
                exit 1
                ;;
            *)
                POSITIONAL_ARGS+=(${1})
                shift 1
                ;;
        esac
    done

    # Set the positional arguments in the global array
    set -- ${POSITIONAL_ARGS[@]}
}


## Main ########################################################################
################################################################################

function main() {
    parse-args "${@}"
    local filepath="${1}"

    # Ensure a filename is given
    if [[ -z "${filepath}" ]]; then
        echo-stderr "error: no filepath given"
        help-usage >&2
        exit 1
    fi

    if [[ ${USE_GIT} -eq 1 ]]; then
        get-metadata-by-file-from-xml "${filepath}" \
            | cut -d ' ' -f 3 \
            | uniq
    else
        get-metadata-by-file-from-xml "${filepath}" "${METADATA_FILE}" \
            | cut -d ' ' -f 4 \
            | uniq
    fi
}


## Run #########################################################################
################################################################################

[ "${BASH_SOURCE[0]}" = "${0}" ] && main "${@}"
