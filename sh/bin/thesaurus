#!/usr/bin/env bash
#
# Uses thesaurus.com to find synonyms for a word

## colors ######################################################################
################################################################################

# Determine if we are in a pipe or not
[[ -t 1 ]] && USE_COLOR=true || USE_COLOR=false


## imports #####################################################################
################################################################################

include-source 'echo.sh'
include-source 'text.sh'
include-source 'debug.sh'

## usage functions #############################################################
################################################################################

function help-full() {
    help-usage
    help-epilogue
    echo
    cat << EOF
    -h/--help               display this help message
    -n/--num <int>          limit the number of results to <int>
    -c/--categories         show categories
    -C/--no-categories      do not show categories
    -s/--show-score         show the match strenth score for each result
    -S/--no-show-score      do not show the match strenth score for each result
    -a/--ansi               force ANSI color output
    -A/--no-ansi            force no ANSI color output
EOF
}

function help-usage() {
    echo "usage: $(basename "${0}") [-h] [-n <int>] <word>"
}

function help-epilogue() {
    echo "search thesaurus.com for synonyms to a word"
}

function parse-args() {
    # Default values
    NUM=0
    WORD=""
    MAX_WIDTH=0
    SHOW_SCORE=false
    USE_COLOR=${USE_COLOR}
    SHOW_CATEGORIES=false

    # Loop over the arguments
    local query_parts=()
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit 0
                ;;
            --help)
                help-full
                exit 0
                ;;
            -n|--num)
                NUM="${2}"
                shift 2
                ;;
            -c|--categories)
                SHOW_CATEGORIES=true
                shift 1
                ;;
            -C|--no-categories)
                SHOW_CATEGORIES=false
                shift 1
                ;;
            -s|--show-score)
                SHOW_SCORE=true
                shift 1
                ;;
            -S|--no-show-score)
                SHOW_SCORE=false
                shift 1
                ;;
            -a|--ansi)
                USE_COLOR=true
                shift 1
                ;;
            -A|--no-ansi)
                USE_COLOR=false
                shift 1
                ;;
            -*)
                echo-stderr "unknown option: ${1}"
                exit 1
                ;;
            *)
                query_parts+=("${1}")
                shift 1
                ;;
        esac
    done
    
    WORD=$(join " " "${query_parts[@]}")

    # Check for required arguments
    if [[ -z "${WORD}" ]]; then
        echo-stderr "error: missing required argument: <word>"
        exit 1
    fi

    debug "NUM: ${NUM}"
    debug "WORD: ${WORD}"
    debug "MAX_WIDTH: ${MAX_WIDTH}"
    debug "SHOW_SCORE: ${SHOW_SCORE}"
    debug "USE_COLOR: ${USE_COLOR}"
    debug "SHOW_CATEGORIES: ${SHOW_CATEGORIES}"
}


## main ########################################################################
################################################################################

function main() {
    parse-args "${@}"

    # Get the synonyms
    curl -s "https://www.thesaurus.com/browse/$(urlencode "${WORD}")" \
        | grep -oP 'INITIAL_STATE =\K[^<]*' \
        | sed 's/.$//;s/^.//;s/undefined/null/g' \
        | python -m json.tool \
        | awk -v use_color="${USE_COLOR}" \
              -v num_colors=$(tput colors) \
              -v max_width="${MAX_WIDTH}" \
              -v show_categories="${SHOW_CATEGORIES}" \
              -v show_similarities="${SHOW_SCORE}" \
              -v num="${NUM}" \
              -v DEBUG="${DEBUG}" '
            function debug(s) {
                if (DEBUG == "1" || DEBUG == "true") {
                    # Print the debug message and line number to stderr
                    print "[" FILENAME ":" FNR "] " s > "/dev/stderr";
                }
            }
            function urlunquote(s) {
                # Unquote a URL
                # Loop over the string and replace %XX with the character
                # represented by the hex value XX
                for (i = 1; i <= length(s); i++) {
                    if (substr(s, i, 1) == "%") {
                        # Get the hex value
                        hex = substr(s, i + 1, 2);
                        # Convert the hex value to a decimal value
                        dec = strtonum("0x" hex);
                        # Convert the decimal value to a character
                        char = sprintf("%c", dec);
                        # Replace the %XX with the character
                        s = substr(s, 1, i - 1) char substr(s, i + 3);
                    }
                }
                return s;
            }
            BEGIN {
                inSearchData = 0;
                inCategory = 0;
                inSynonyms = 0;
                inAntonyms = 0;
                inTerm = 0;
                categoryDefinition = "";
                categoryIsInformal = "";
                categoryPartOfSpeech = "";
                term = "";
                termIsInformal = "";
                termSimilarity = 0;
                termLineLength = 0; # track the characters is a single grouping of synonyms
                if (use_color == "true") {
                    C_searchTerm = "\033[1m";
                    C_partOfSpeech = "\033[35m";
                    C_informal = "\033[34m";
                    C_synonym = "\033[1;32m";
                    C_antonym = "\033[31m";
                    C_categoryDefinition = "\033[1;34m";
                    C_reset = "\033[0m";

                    ## search term colors
                    if (num_colors >= 256) {
                        # If we have 256 colors or more, use a gradient from
                        # dim grey to white
                        C_syn_sim_00_25 = "\033[38;5;240m";
                        C_syn_sim_25_50 = "\033[38;5;245m";
                        C_syn_sim_50_75 = "\033[38;5;250m";
                        C_syn_sim_75_100 = "\033[38;5;255m";
                    } else {
                        # If we have 8 colors or less, simply use dim for low
                        # matches and bold for high matches
                        C_syn_sim_00_25 = "\033[2m";
                        C_syn_sim_25_50 = "\033[2m";
                        C_syn_sim_50_75 = "\033[1m";
                        C_syn_sim_75_100 = "\033[1m";
                    }
                    C_synSimilarity = "\033[2m";
                }
            }

            {
                # Determine if we are in the search data
                if ($0 ~ /"searchData":/) {
                    inSearchData = 1;
                    debug("BEGINNING OF SEARCH DATA");
                } else if (inSearchData && $0 ~ /^            \]/) {
                    inSearchData = 0;
                    debug("END OF SEARCH DATA");
                    exit 0;
                } else if (!inSearchData) {
                    next;
                }
                
                # Print the search term, category definitions, parts of speech,
                # and synonyms
                if ($0 ~ /"searchTerm":/) {
                    ### Print the search term
                    gsub(/.*"searchTerm": "/, "", $0);
                    gsub(/".*/, "", $0);
                    print C_searchTerm urlunquote($0) C_reset;
                } else if ($0 ~ /^                {/) {
                    inCategory = 1;
                    debug("BEGINNING OF CATEGORY");
                } else if ($0 ~ /"synonyms":/) {
                    inSynonyms = 1;
                    debug("BEGINNING OF SYNONYMS");
                    ### Print the category info and synonyms
                    debug("PRINTING CATEGORY INFO AND SYNONYMS");
                    print "";
                    if (show_categories) {
                        printf("(%s%s%s", C_partOfSpeech, categoryPartOfSpeech, C_reset);
                        if (categoryIsInformal) {
                            printf(", %sinformal%s", C_informal, C_reset)
                        }
                        printf(")  ");
                        printf("%s%s%s ", C_categoryDefinition, categoryDefinition, C_reset);
                        print "";
                    }
                    # Track whether we have printed the first synonym
                    firstCategoryTermPrinted = 0;
                } else if ($0 ~ /"antonyms": \[$/) {
                    inAntonyms = 1;
                    # Track whether we have printed the first antonym
                    firstCategoryTermPrinted = 0;
                    debug("BEGINNING OF ANTONYMS");
                } else if ($0 ~ /                    ]/ || $0 ~ /"antonyms": \[\]/) {
                    inAntonyms = 0;
                    inSynonyms = 0;
                    if (! ($0 ~ /"antonyms": \[\]/)) {
                        print "";
                    }
                    debug("END OF ANTONYMS / SYNONYMS");
                } else if ($0 ~ /"pos":/) {
                    ### Store the part of speech
                    gsub(/.*"pos": "/, "", $0);
                    gsub(/".*/, "", $0);
                    categoryPartOfSpeech = $0;
                    debug("FOUND PART OF SPEECH: " categoryPartOfSpeech);
                } else if (inCategory && $0 ~ /"definition":/) {
                    ### Store the category definition
                    gsub(/.*"definition": "/, "", $0);
                    gsub(/".*/, "", $0);
                    categoryDefinition = $0;
                    debug("FOUND CATEGORY DEFINITION: " categoryDefinition);
                } else if (inCategory && !inTerm && $0 ~ /"isInformal":/) {
                    ### Store whether the category is informal
                    gsub(/.*"isInformal": "/, "", $0);
                    gsub(/".*/, "", $0);
                    if ($0 == "0") {
                        categoryIsInformal = "";
                    } else {
                        categoryIsInformal = 1;
                    }
                    debug("FOUND CATEGORY IS INFORMAL: " categoryIsInformal);
                } else if ($0 ~ /^                        {/) {
                    inTerm = 1;
                    debug("BEGINNING OF TERM");
                } else if (inTerm && $0 ~ /"term":/) {
                    ### Store the term
                    gsub(/.*"term": "/, "", $0);
                    gsub(/".*/, "", $0);
                    term = $0;
                    debug("FOUND TERM: " term);
                } else if (inTerm && $0 ~ /"similarity":/) {
                    gsub(/.*"similarity": "/, "", $0);
                    gsub(/".*/, "", $0);
                    termSimilarity = $0;
                } else if (inTerm && $0 ~ /"isInformal":/) {
                    gsub(/.*"isInformal": "/, "", $0);
                    gsub(/".*/, "", $0);
                    if ($0 != "0") {
                        termIsInformal = 1;
                    } else {
                        termIsInformal = "";
                    }
                    debug("FOUND TERM IS INFORMAL: " termIsInformal);
                } else if (inTerm && $0 ~ /^                        }/) {
                    ### Print the term
                    debug("PRINTING TERM: " term " (" termSimilarity ", " termIsInformal ")");
                    term_str = "";
                    term_color = "";
                    termSimilarity = int(termSimilarity);
                    if (inAntonyms) {
                        term_color = C_antonym;
                        debug("USING C_antonym because inAntonyms");
                    } else if (inSynonyms) {
                        if (termSimilarity < 25) {
                            term_color = C_syn_sim_00_25;
                            debug("USING C_syn_sim_00_25 because " termSimilarity " < 25");
                        } else if (termSimilarity < 50) {
                            term_color = C_syn_sim_25_50;
                            debug("USING C_syn_sim_25_50 because " termSimilarity " < 50");
                        } else if (termSimilarity < 75) {
                            term_color = C_syn_sim_50_75;
                            debug("USING C_syn_sim_50_75 because " termSimilarity " < 75");
                        } else {
                            term_color = C_syn_sim_75_100;
                            debug("USING C_syn_sim_75_100 because " termSimilarity " >= 75");
                        }
                    }
                    if (!firstCategoryTermPrinted) {
                        firstCategoryTermPrinted = 1;
                    } else {
                        term_str = term_str ", ";
                    }
                    term_str = term_str sprintf("%s%s%s",
                                           term_color, term, C_reset);
                    if (show_similarities == "true") {
                        term_str = term_str sprintf(" (%s%d%s)",
                                                    C_synSimilarity, termSimilarity, C_reset);
                    }
                    if (termIsInformal) {
                        term_str = term_str sprintf(" %s(informal)%s",
                                               C_informal, C_reset);
                    }
                    printf(term_str);
                    inTerm = 0;
                }
            }' | printf "%b" "$(cat)" ; echo
}


## run #########################################################################
################################################################################

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"
