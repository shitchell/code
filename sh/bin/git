#!/bin/bash
#
# A custom wrapper around git that adds some useful features for certain
# subcommands. If a subcommand is not modified by this script, then it is
# passed through to git.
#
# Exit codes:
# - 0: success
# - 1: git command failed
# - 2: pre-process failed
# - 3: post-process failed

# Determine the path to the actual git executable.
#
# First: look specifically for /usr/bin/git.
# Second: if that does not exist, look for any executable that does not have
# /home/ anywhere in the filepath and does contain /usr/, /bin/, or /opt/. We no
# longer look for an exectuable specifically in the root level directories to
# ensure compatibility with lightly chrooted environments where the system level
# /bin/ and /usr/bin/ directories are not actually at the root level of the
# filesystem.
if [[ -x "/usr/bin/git" ]]; then
    GIT="/usr/bin/git"
else
    GIT=$(
        which -a git \
            | awk '! ($0 ~ /.*\/home\/.*/) && ($0 ~ /.*\/(usr|bin|opt)\/.*/) {print}' \
            | head -1
    )
fi

# If git is not found, we can't do shit
if [[ -z "${GIT}" ]]; then
    echo "error: no git binary found"
    exit 1
fi

function debug() {
    if [ -n "${DEBUG}" ]; then
        echo ${@} >&2
    fi
}

# Parse the git args, subcommand, and subcommand args
declare -ga GIT_ARGS
declare -ga GIT_SUBCOMMAND_ARGS
RUN_GIT_CMD=1  # whether or not to run the original git command after processing
GIT_SUBCOMMAND=""

# Determine the git arguments, subcommand, and subcommand arguments
while [[ ${#} -gt 0 ]]; do
    case ${1} in
        # Handle all options that take no arguments
        -h | --help | --version | --html-path | --man-path | --info-path | \
        -p | --paginate | -P | --no-pager | --no-replace-objects | --bare | \
        --literal-pathspecs | --glob-pathspecs | --noglob-pathspecs | \
        --icase-pathspecs | --no-optional-locks | --no-renames | --exec-path*)
            debug "no arg: ${1}"
            GIT_ARGS+=("${1}")
            shift 1
            ;;

        # Handle all options that optionally take an argument
        --git-dir* | --work-tree* | --namespace* | --super-prefix* | \
        --config-env* | --list-cmds*)
            debug "arg optional: ${1}"
            # Determine if the argument contains an equals sign
            if [[ "${1}" =~ = ]]; then
                # If it does, then there is no 2nd argument
                GIT_ARGS+=("${1}")
                shift 1
            else
                # If it doesn't, then there is a 2nd argument to store
                GIT_ARGS+=("${1}" "${2}")
                shift 2
            fi
            ;;

        # Handle all options that require an argument
        -C | -c)
            debug "arg required: ${1}"
            GIT_ARGS+=("${1}" "${2}")
            shift 2
            ;;

        *)
            # This is the subcommand -- store it and the rest of the args
            GIT_SUBCOMMAND="${1}"
            shift 1
            GIT_SUBCOMMAND_ARGS=("${@}")
            debug "subcommand: ${GIT_SUBCOMMAND}"
            debug "subcommand args (${#@}):`printf " '%s'" "${GIT_SUBCOMMAND_ARGS[@]}"`"
            break
            ;;
    esac
done

# Function to run the specified command
function run-git-cmd() {
    debug -e "running: \033[1m${GIT} \033[0;36m$([[ ${#GIT_ARGS[@]} -gt 0 ]] && printf "%q " "${GIT_ARGS[@]}")\033[32m${GIT_SUBCOMMAND}\033[34m$([[ ${#GIT_SUBCOMMAND_ARGS[@]} -gt 0 ]] && printf " %q" "${GIT_SUBCOMMAND_ARGS[@]}")\033[0m"
    "${GIT}" "${GIT_ARGS[@]}" "${GIT_SUBCOMMAND}" "${GIT_SUBCOMMAND_ARGS[@]}"
}
GIT_EXIT_CODE=0
PRE_EXIT_CODE=0
POST_EXIT_CODE=0

# Do stuff before running the git command
debug "begin pre-processing"
shopt -s nullglob  # don't fail if glob patterns don't match anything
for filepath in "${HOME}/.git.d/pre-process.d/${GIT_SUBCOMMAND,,}"[_.-]*sh "${HOME}/.git.d/pre-process.d/"[0-9]*.sh; do
    debug "sourcing pre-process script: ${filepath}"
    source "${filepath}"
    PRE_EXIT_CODE=${?}
    if [[ ${PRE_EXIT_CODE} -ne 0 ]]; then
        echo "pre-process script '$(dirname ${filepath})' failed with exit code ${PRE_EXIT_CODE}" >&2
        exit ${PRE_EXIT_CODE}
    fi
done
shopt -u nullglob

# Run the git command if requested
if [[ ${RUN_GIT_CMD} -eq 1 ]]; then
    run-git-cmd
    GIT_EXIT_CODE=${?}
    debug "git command exited with ${GIT_EXIT_CODE}"
    if [[ ${GIT_EXIT_CODE} -ne 0 ]]; then
        debug "git command failed"
        # exit ${GIT_EXIT_CODE}
    fi
fi

# Do other stuff after running the git command
debug "begin post-processing"
shopt -s nullglob  # don't fail if glob patterns don't match anything
for filepath in "${HOME}/.git.d/post-process.d/${GIT_SUBCOMMAND,,}"[_.-]*sh "${HOME}/.git.d/post-process.d/"[0-9]*.sh; do
    debug "sourcing post-process script: ${filepath}"
    source "${filepath}"
    POST_EXIT_CODE=${?}
    if [[ ${POST_EXIT_CODE} -ne 0 ]]; then
        echo "post-process script '$(dirname ${filepath})' failed with exit code ${POST_EXIT_CODE}" >&2
        # exit ${POST_EXIT_CODE}
    fi
done
shopt -u nullglob

exit ${GIT_EXIT_CODE}
