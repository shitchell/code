#!/bin/bash
#
# Build a map of NxA service dependencies
#
# DEPENDS: as-nxa-ids
#
# TODO: add support for reading a list of services from a directory

## imports #####################################################################

include-source 'echo.sh'
include-source 'debug.sh'


## usage functions #############################################################
################################################################################

function help-epilogue() {
    echo "build a map of NxA service dependencies"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "Takes a list of NxA services and prints a map of their dependencies."
    echo "If any of the arguments is a single '-' then the list of services is"
    echo "read from stdin. If any of the arguments is a directory then the list"
    echo "of services is read from the files in that directory."
    echo "Output can be formatted as a graphviz graph or as a list."
    echo
    echo "Options:"
    echo
    cat << EOF
    -h                             display usage
    --help                         display this help message
    -d/--nxa-dir <dir>             the NxA directory root, defaults to './nxa'
    -f/--format <format>           the output format, defaults to 'graph'
EOF
    echo
    echo "The format string can be one of:"
    echo
    cat << EOF
    graph                          a graphviz graph
    list                           a list of dependencies
EOF
}

function help-usage() {
    echo "usage: $(basename $0) [-h] [-d <dir>] [-f <format>] <service> [<service> ...]"
}

function parse-args() {
    # Default values
    NXA_DIR=''
    OUTPUT_FORMAT='graph' # graph, list

    # Loop over the arguments
    declare -ga SERVICES
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit 0
                ;;
            --help)
                help-full
                exit 0
                ;;
            -d | --nxa-dir)
                NXA_DIR="${2}"
                shift 2
                ;;
            -f | --format)
                OUTPUT_FORMAT="${2}"
                shift 2
                ;;
            -)
                # Read from stdin
                while read -r line; do
                    SERVICES+=("${line}")
                done
                shift 1
                ;;
            -*)
                echo "unknown option: ${1}" >&2
                help-usage >&2
                exit 1
                ;;
            *)
                SERVICES+=("${1}")
                shift 1
                ;;
        esac
    done

    # Validate the format
    case ${OUTPUT_FORMAT} in
        graph|list)
            ;;
        *)
            echo "Unknown format: ${FORMAT}" >&2
            help-usage >&2
            exit 1
            ;;
    esac

    # Validate the NXA directory
    if [[ -z "${NXA_DIR}" ]]; then
        NXA_DIR=$([[ -d "nxa" ]] && echo "nxa" || echo ".")
    elif [[ ! -d "${NXA_DIR}" ]]; then
        echo "invalid NxA directory: ${NXA_DIR}" >&2
        help-usage >&2
        exit 1
    fi

    # Check that there are services
    if [[ ${#SERVICES[@]} -eq 0 ]]; then
        help-usage
        help-epilogue
        exit 1
    fi

    debug "NXA_DIR: ${NXA_DIR}"
    debug "OUTPUT_FORMAT: ${OUTPUT_FORMAT}"
    debug "SERVICES: ${SERVICES[*]}"
}


## helpful functions ###########################################################
################################################################################

# @description Recursively find the dependencies of an nxa file
# @usage list-dependencies <filepath>
function parse-dependencies() {
    local filepath="${1}"

    # Check that the file exists
    if [[ ! -f "${filepath}" ]]; then
        echo "invalid file: ${filepath}" >&2
        return 1
    fi

    # Loop over all XML tags in the file
    while read -r line; do
        local tag=$(echo "${line}" | grep -oP '<\K[a-zA-Z0-9_-]+')
        local key
        case "${tag}" in
            Header | ContractTestCases)
                key='contractId'
                ;;
            CompIONode | HSContractNode | HSDataContainerType)
                key='id'
                ;;
            IncomingNode)
                key='incomingKey'
                ;;
            HSDefnNode)
                key='key'
                ;;
            NXAShared*)
                key='rdcId'
                ;;
            *)
                debug "skipping tag: ${tag}"
                continue
                ;;
        esac
        debug "tag: ${tag}, key: ${key}"

        # Get the value of the key
        local value=$(
            echo "${line}" \
                | grep -oP "${key}=\"\K[^\"]+" \
                | sed -E 's/\.[0-9]+$//'
        )

        if [[ -z "${value}" ]]; then
            debug "no value found, skipping: ${line}"
            continue
        fi

        # Make sure the value is a valid service
        if ! [[ "${value}" =~ [0-9]+_[A-Z0-9]{8} ]]; then
            debug "invalid value, skipping: ${value}"
            continue
        fi

        # Print the id
        echo "${value}"
    done < <(grep -o '<[^>/]*>' "${filepath}") | sort -u
}

## main ########################################################################
################################################################################

function main() {
    parse-args "${@}"
    local service service_path service_id processed_services unprocessed_services

    # Create associative arrays to track whether a service has been processed
    declare -A processed_services
    declare -A unprocessed_services

    # Get the filename for each service, replacing any stderr output with
    # 'ERROR' so that we can track which services failed to be found
    debug "getting filenames for initial set of services"
    readarray -t initial_services < <(
         {
            as-nxa-ids -d "${NXA_DIR}" -f '{path}' "${SERVICES[@]}" 2>&1 1>&3 3>&- \
                | sed 's/.*/ERROR/'
        } 3>&1
    )
    debug "initial_services: ${initial_services[*]}"

    # Add each service to the unprocessed list
    for ((i=0; i<${#initial_services[@]}; i++)); do
        service="${initial_services[${i}]}"
        # Check that the service was found
        if [[ "${service}" == 'ERROR' ]]; then
            echo -n "service not processed: ${SERVICES[${i}]}" >&2
            # Look to see if we can find the service in the NXA directory
            service=$(basename "${SERVICES[${i}]}" | sed 's/.*\.xml//')
            service=$(
                find "${NXA_DIR}" -type f -name "*${service}*.xml" | xargs
            )
            if [[ -n "${service}" ]]; then
                echo " (found in ${service})" >&2
            else
                echo >&2
                continue
            fi
        fi
        service_id=$(basename "${service}" | sed -E 's/_?(ctc|dfn|rdc.*)?\.xml//')
        debug "adding service: ${service} -- ${service_id}"
        unprocessed_services["${service_id}"]="${service_id}"
    done
    debug "setup unprocessed_services: ${unprocessed_services[*]}"

    # Print the header
    case ${OUTPUT_FORMAT} in
        graph)
            echo 'digraph {'
            echo '    node [shape=box, penwidth=2, fontname="system-ui, BlinkMacSystemFont, Roboto, Helvetica, Arial, sans-serif"]'
            echo '    edge [arrowhead=normal, arrowtail=none]'
            echo
            ;;
        list)
            ;;
    esac

    # Loop until all services have been processed
    until [[ ${#unprocessed_services[@]} -eq 0 ]]; do
        debug "processing batch: ${unprocessed_services[*]}"
        local current_batch=("${!unprocessed_services[@]}")
        local new_dependencies=()

        # Fetch the info for the current batch of unprocessed services
        readarray -t services_info < <(
            {
                as-nxa-ids -d "${NXA_DIR}" -f '{fullname}\t{path}' "${unprocessed_services[@]}" 2>&1 1>&3 3>&- \
                    | sed 's/.*/ERROR/'
            } 3>&1
        )
        debug "got batch info: ${services_info[*]}"

        # Loop over the services
        for ((i=0; i<${#services_info[@]}; i++)); do
            service_info="${services_info[${i}]}"
            # Check if there was an error
            if [[ "${service_info}" == 'ERROR' ]]; then
                service="${current_batch[${i}]}"
                echo "service not processed: ${service}" >&2
                continue
            fi
            local service_name=$(echo "${service_info}" | cut -f 1)
            local service_path=$(echo "${service_info}" | cut -f 2)
            local service_id=$(basename "${service_path}" | sed -E 's/_?(ctc|dfn|rdc.*)?\.xml//')
            debug "processing service: ${service_name} -- ${service_id} -- ${service_path}"

            if [[ "${OUTPUT_FORMAT}" == "graph" ]]; then
                printf "    node_%s [label=\"%s\", tooltip=\"%s\"]\n" "${service_id}" "${service_name/./\\n}" "${service_path}"
            fi

            # Check if the service has already been processed
            if [[ -n "${processed_services["${service_id}"]}" ]]; then
                debug "skipping already processed service: ${service_id}"
                continue
            fi

            # Parse the service files for dependencies
            service_dfn="${service_path//_ctc.xml/_dfn.xml}"
            if [[ -f "${service_dfn}" ]]; then
                debug "service_dfn exists, parsing for dependencies: ${service_dfn}"
                readarray -t dfn_dependencies < <(parse-dependencies "${service_dfn}")
            else
                debug "service_dfn does not exist, skipping dependency check: ${service_dfn}"
                dfn_dependencies=()
            fi
            debug "dfn_dependencies: ${dfn_dependencies[*]}"
            if [[ -f "${service_path}" ]]; then
                debug "service_path exists, parsing for dependencies: ${service_path}"
                readarray -t svc_dependencies < <(parse-dependencies "${service_path}")
            else
                debug "service_path does not exist, skipping dependency check: ${service_path}"
                svc_dependencies=()
            fi
            debug "svc_dependencies: ${svc_dependencies[*]}"
            # Combine the dependencies
            readarray -t dependencies < <(
                printf "%s\n" "${dfn_dependencies[@]}" "${svc_dependencies[@]}" \
                    | sort -u \
                    | grep -vF "${service_id}" \
                    | grep -v '^$'
            )
            debug "dependencies: ${dependencies[*]}"
            if [[ ${#dependencies[@]} -gt 0 ]]; then
                if [[ "${OUTPUT_FORMAT}" == 'graph' ]]; then
                    printf "    node_${service_id} -> node_%s\n" "${dependencies[@]}"
                elif [[ "${OUTPUT_FORMAT}" == 'list' ]]; then
                    printf "${service_id}\t%s\n" "${dependencies[*]}"
                fi
                new_dependencies+=("${dependencies[@]}")
            else
                if [[ "${OUTPUT_FORMAT}" == 'graph' ]]; then
                    # echo "    node_${service_id}"
                    # Turns out this is redundant; the line above which defines
                    # settings for the node is sufficient to create the node
                elif [[ "${OUTPUT_FORMAT}" == 'list' ]]; then
                    echo "${service_id}"
                fi
            fi

            # Mark the service as processed
            debug "marking service as processed: ${service_id}"
            processed_services["${service_id}"]="${service_path}"
            unset unprocessed_services["${service_id}"]
        done

        # Check that the unprocessed_services array is empty
        if ! [[ ${#unprocessed_services[@]} -eq 0 ]]; then
            echo "error: could not process services: ${!unprocessed_services[@]}" >&2
            # Clear the unprocessed_services array and continue
            unset unprocessed_services
            declare -A unprocessed_services
        fi

        # Add the new dependencies to the list of unprocessed services
        for dependency in "${new_dependencies[@]}"; do
            if [[ 
                -z "${processed_services["${dependency}"]}" && 
                -z "${unprocessed_services["${dependency}"]}" 
            ]]; then
                debug "adding dependency: ${dependency}"
                unprocessed_services["${dependency}"]="${dependency}"
            fi
        done
    done

    # Print the footer
    case ${OUTPUT_FORMAT} in
        graph)
            echo '}'
            ;;
    esac
}


## run #########################################################################
################################################################################

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"
