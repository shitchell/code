#!/usr/bin/env bash
#
# A custom wrapper around shell commands that allows for custom functionality
# via extensions.
#
# Setup:
# 1. Place this script in a directory that is in your PATH.
# 2. Create a symlink to this script with the name of a shell command you want
#    to wrap. e.g.: `ln -s exwrapper ls` to create a wrapper around the `ls`
#    command.
# 3. Create extensions for the command by creating scripts in one of the
#    EXTENSION_DIRS directories (see below)
# 4. Ensure that the symlink is in your PATH with a higher precedence than the
#    original command.
#
# Configuration:
# - Set the EXW_CONFIG environment variable to the path of a configuration file
#   to use. Default: $HOME/.exwrc
# - Set the EXW_PATH environment variable to a colon separated list of
#   directories to search for the symlinked command. Default: $HOME/.exw.d
# - For any wrapped commands, create a directory with the name of the command in
#   a directory specified by the EXW_PATH environment variable. e.g.:
#     $HOME/.exw.d/ls
# - For each command directory, create subdirectories for pre-process and
#   post-process scripts. e.g.:
#     $HOME/.exw.d/ls/pre-process.d
#     $HOME/.exw.d/ls/post-process.d
# - Create scripts in the pre-process and post-process directories with the
#   executable bit set. Pre-process scripts will be run in alphabetical order
#   prior to the symlinked command, and post-process scripts will be run in
#   alphabetical order after the symlinked command. Any language can be used to
#   write the scripts as long as the executable bit is set, but if a shell
#   script is used, it will be sourced (i.e.: it will run in the same shell and
#   have access to modify the environment and command arguments before it is
#   executed).
#
# Environment Variables:
# - EXW_CONFIG: the path to the configuration file. Default: $HOME/.exwrc
# - EXW_PATH: a colon separated list of directories to search for the symlinked
#   command. Default: $HOME/.exw.d
#
# Exit codes:
# - 0: success
# - 1000: pre-process extension failed
# - 2000: post-process extension failed
# - *: wrapped command exit code
#
#
# Extension Environment Variables
# -------------------------------
#
# Pre- and post-process extensions will have access to the following environment
# variables and functions:
#
# - WRAPPED_COMMAND: the name of the command being wrapped
# - COMMAND_ARGS: an array of arguments to be passed to the command
# - RUN_COMMAND: a boolean that can be set to false to prevent the command from
#   being run
# - debug: a function that can be used to print debug messages
# - run-cmd: a function that can be used to run the command (will set
#   RUN_COMMAND=false to prevent the command from being run again)
# - cmd-option: a function that can be used to get a configuration setting for
#   the command
#
#
# EXAMPLE EXTENSION
# -----------------
#
# Wrap the `ls` command, and create an extension that reads a `.ls` file in the
# current directory and applies its contents as arguments whenever `ls` is run.
# This extension will allow you to, for example, always show invisible files on
# a per-directory basis.
#
# `$HOME/.bashrc`
#    export EXW_PATH="$HOME/.exw.d"
#    export EXW_CONFIG="$HOME/.exwrc"
#
# `$HOME/.exw.d/ls/pre-process.d/00-read-dot-ls.sh`
#    #!/usr/bin/env bash
#    #
#    # Read a `.ls` file in the current directory and apply its contents as args
#
#    if [[ -f ".ls" ]]; then
#        readarray -t LS_ARGS < .ls
#        if [[ ${#LS_ARGS[@]} -gt 0 ]]; then
#            echo "[ls-wrapper] applying .ls args: ${LS_ARGS[*]}"
#            COMMAND_ARGS+=( "${LS_ARGS[@]}" )
#        fi
#    fi
#
# $ ln -s exwrapper ls
# $ echo "\-a" > .ls
# $ ls
# [ls-wrapper] applying .ls args: -a
# .  ..  .ls  normal_file.txt
#
#
# EXAMPLE SETUP
# -------------
#
# Recommended directory structure is an nginx/apache style with all extensions
# in a single directory and symlinked to the appropriate `pre-process.d` and
# `post-process.d` directories. This allows the extensions to be checked into
# version control and shared across multiple machines while only enabling the
# desired extensions on a per-machine basis.
#
# This setup places the `exwrapper` script in the user's `bin` directory,
# creates a symlink to it via `ln -s exwrapper ls`, and creates a directory
# structure in the user's home directory for extensions.
#
# Environment:
#   PATH="$HOME/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
#   EXW_PATH="$HOME/.exw.d:/etc/exw.d"
#
# File structure:
#   $HOME/bin/ls -> exwrapper
#   - $HOME/.exw.d/
#     - extensions-available/
#       - 10-read-dot-ls.sh
#       - 20-apply-colors.sh
#       - 00-log-command.sh
#     - ls/
#       - pre-process.d/
#         - 10-read-dot-ls -> ../../extensions-available/10-read-dot-ls.sh
#       - post-process.d/
#        - 00-log-command -> ../../extensions-available/00-log-command.sh


## Environment #################################################################

__EXWRAPPER_VERSION="0.1.0"
__EXWRAPPER_PATH=$(realpath "${0}")
__EXWRAPPER_NAME=$(basename "${__EXWRAPPER_PATH}")
__EXWRAPPER_SYMLINK_PATH=$(realpath --no-symlinks "${0}")
WRAPPED_COMMAND=$(basename "${0}")
WRAPPED_COMMAND_ARGS=( "${@}" )
COMMAND_PATH=""
EXW_CONFIG="${EXW_CONFIG:-$HOME/.exwrc}"
EXW_PATH="${EXW_PATH:-$HOME/.exw.d:/etc/exw.d}"
IFS=: read -r -a EXW_PATHS <<< "${EXW_PATH}"


## Validation ##################################################################

# Ensure this is being run as a symlink
if [[ "${__EXWRAPPER_PATH}" == "${__EXWRAPPER_SYMLINK_PATH}" ]]; then
    echo "${__EXWRAPPER_NAME}: error: this script must be run via a symlink" >&2
    echo "eg: \`ln -s ${__EXWRAPPER_PATH} ~/bin/comm\`" >&2
    exit 1
fi


## Helpful Functions ###########################################################

# Debug function if not already defined
if ! declare -f debug &>/dev/null; then
    function debug() {
        if [[ "${DEBUG}" =~ ^"true"|"1"$ ]]; then
            if [[ ${#} -gt 0 ]]; then
                printf '%s\n' "${@}" | sed 's/^/[debug]  /' >&2
            fi
            return 0
        fi
        return 1
    }
fi
if ! declare -f debug-vars &>/dev/null; then
    function debug-vars() {
        debug && [[ ${#} -gt 0 ]] && debug "$(declare -p "${@}" 2>&1)"
    }
fi

# Function to run a command (default: wrapped command) with pretty debug output
function run-cmd() {
    local command command_args
    if [[ ${#} -eq 0 ]]; then
        command="${COMMAND_PATH}"
        command_args=( "${WRAPPED_COMMAND_ARGS[@]}" )
    else
        command="${1}"
        command_args=( "${@:2}" )
    fi

    if debug; then
        # Build the command string
        local command_str
        command_str+=$'\033[1m'"${command}"$'\033[0m '
        if [[ ${#command_args[@]} -gt 0 ]]; then
            command_str+=$'\033[0;36m'
            command_str+=$(printf "%q " "${command_args[@]}")
            command_str+=$'\033[0m'
        fi
        command_str+=$'\033[0m'
        debug "running: ${command_str}"
    fi
   
    # Run the command
    [[ -n "${command}" ]] && "${command}" "${command_args[@]}"
}

## config functions
# Config file is in the format:
#  [*]
#    global_setting_1 = value
#  [command]
#    # a comment
#    command_setting_1 = value

# Get one or more sections of the config file
function get-config-sections() {
    # Default values
    local config_file="${EXW_CONFIG}"
    local sections=()
    local do_unique=false
    local do_show_sections=true
    declare -A values
    local in_section=false # controls whether to print lines
    local section_name
    local key display_key value kv

    # Parse the arguments
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h | --help)
                echo "usage: get-config-section [--config=<config_file>] <section>..." >&2
                return 0
                ;;
            --config=*)
                config_file="${1#*=}"
                ;;
            -c  | --config)
                config_file="${2}"
                shift 1
                ;;
            -u | --unique)
                do_unique=true
                ;;
            -U | --no-unique)
                do_unique=false
                ;;
            -s | --show-sections)
                do_show_sections=true
                ;;
            -SS | --no-show-sections)
                do_show_sections=false
                ;;
            -*)
                echo "error: unknown option: ${1}" >&2
                return 1
                ;;
            *)
                sections+=("${1}")
                ;;
        esac
        shift 1
    done

    if [[ -z "${config_file}" ]]; then
        echo "error: no config file specified" >&2
        return 1
    fi
    if [[ ${#sections[@]} -eq 0 ]]; then
        echo "error: no sections specified" >&2
        return 1
    fi
    if [[ ! -r "${config_file}" ]]; then
        return 1
    fi

    debug-vars config_file sections do_unique do_show_sections

    # Read the config file line by line:
    # * excluding comments
    # * excluding empty lines
    # * tracking whether we're in a matched section
    # * normalizing option lines to `option = value`
    # * printing lines that match the specified sections
    while IFS=$'\n' read -r  line; do
        debug-vars line

        # Skip comments and empty lines
        if [[ "${line}" =~ ^[[:space:]]*(#.*)?$ ]]; then
            continue
        fi

        # Check if the line is a section header
        if [[ "${line}" =~ ^\[([^]]+)]$ ]]; then
            section_name="${BASH_REMATCH[1]}"

            # Check if the section is in the list of sections to print
            in_section=false
            for section in "${sections[@]}"; do
                if [[ "${section}" == ${section_name} ]]; then
                    in_section=true
                    break
                fi
            done
            debug-vars section_name in_section

            continue
        fi

        debug-vars in_section section_name

        # If we're in a matching section, print the line
        if ${in_section}; then
            # normalize the line
            if [[ "${line}" =~ ^[[:space:]]*([A-Za-z0-9_]+)[[:space:]]*=[[:space:]]*(.*)$ ]]; then
                key="${BASH_REMATCH[1]}"
                value="${BASH_REMATCH[2]}"
                display_key=""
                ${do_show_sections} && display_key="${section_name}."
                display_key+="${key}"
                if ! ${do_unique}; then
                    # If we're not unique-ifying the keys, then go ahead and
                    # print the line
                    printf "%s = %s\n" "${display_key}" "${value}"
                else
                    values["${key}"]="${display_key} ${value}"
                fi
            else
                debug "skipping line: ${line}"
            fi
        fi
    done < "${config_file}"

    # If we're unique-ifying the keys, then print them now
    if ${do_unique}; then
        for kv in "${!values[@]}"; do
            kv="${values[${kv}]}"
            # Extract the key and value
            key="${kv%% *}"
            value="${kv#* }"
            printf "%s = %s\n" "${key}" "${value}"
        done
    fi
}

# Get a configuration setting for a command
# usage: exw-option [--config=<config_file>] <option> [--default=<default>] <command> <option>
function exw-option() {
    # Default values
    local config_file="${EXW_CONFIG}"
    local command=""
    local option="" value=""
    local line key key_value
    local type="string" # bool, int, string
    local config=""

    # Parse the arguments
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h | --help)
                echo "usage: get-command-option [--config=<config_file>] <option> [--default=<default>]" >&2
                return 0
                ;;
            --config=*)
                config_file="${1#*=}"
                ;;
            -c | --config)
                config_file="${2}"
                shift 1
                ;;
            --as=*)
                type="${1#*=}"
                ;;
            --as)
                type="${2}"
                shift 1
                ;;
            --default=*)
                default="${1#*=}"
                ;;
            --default)
                default="${2}"
                shift 1
                ;;
            -*)
                echo "error: unknown option: ${1}" >&2
                return 1
                ;;
            *)
                [[ -z "${command}" ]] && command="${1}" || option="${1}"
                ;;
        esac
        shift 1
    done

    debug-vars config_file command option default

    config=$(
        get-config-sections \
            --config="${config_file}" \
            --unique \
            --no-show-sections \
            "${command}"
    )

    debug-vars config

    # Find the matching option
    while read -r line; do
        key="${line%% =*}"
        key_value="${line#*= }"
        if [[ "${key}" == "${option}" ]]; then
            value="${key_value}"
        fi
    done <<<"${config}"

    if [[ -z "${value}" && -n "${default}" ]]; then
        value="${default}"
    fi

    # If we don't have a value, exit with an error
    if [[ -z "${value}" ]]; then
        return 1
    fi

    # Validate the value if a non-string type is specified
    if [[ "${type}" == "int" ]]; then
        if ! [[ "${value}" =~ ^[0-9]+$ ]]; then
            echo "error: '${option}' = '${value}' is not an integer" >&2
            return 1
        fi
    elif [[ "${type}" == "bool" ]]; then
        # Allow 0, 1, true, false, yes, no and normalize it to "true" or "false"
        case "${value,,}" in
            0 | false | no)
                value="false"
                ;;
            1 | true | yes)
                value="true"
                ;;
            *)
                echo "error: '${option}' = '${value}' is not a boolean" >&2
                return 1
                ;;
        esac
    fi

    printf "%b\n" "${value}"
}

# Get a configuration option for the wrapped command
function wrapper-option() {
    exw-option "${WRAPPED_COMMAND}" "${@}"
}


## Find the original command ###################################################

debug "finding original command for '${WRAPPED_COMMAND}'"
# Find the first executable with a matching name that isn't this script
while read -r filepath; do
    # Get the real path to the executable
    filepath_real=$(realpath "${filepath}")
    # Ensure the file isn't this script
    [[ "${filepath_real}" == "${__EXWRAPPER_SYMLINK_PATH}" ]] && continue
    [[ "${filepath_real}" == "${__EXWRAPPER_PATH}" ]] && continue
    COMMAND_PATH="${filepath_real}"
    break
done <<< $(which -a "${WRAPPED_COMMAND}")

# If an original command was not found, we can't do shit
if [[ -z "${COMMAND_PATH}" ]]; then
    echo "${__EXWRAPPER_NAME}: error: no executable found for '${WRAPPED_COMMAND}'" >&2
    exit 1
fi

debug-vars COMMAND_PATH


## Session Information #########################################################

# Are we in a pipe?
[[ -t 1 ]] && _IN_TERMINAL=true || _IN_TERMINAL=false

# Are we in a script?
## get the calling process arguments
__PARENT_ARGS=$(ps -o args= "${PPID}")
## if it contains a space, e.g. `-bash ./script.sh`, then we're in a script
if [[ "${__PARENT_ARGS}" =~ " " ]]; then
    _IN_SCRIPT=true
else
    _IN_SCRIPT=false
fi

debug-vars _IN_TERMINAL _IN_SCRIPT


## Behavior ####################################################################

# Determine if we should exit on pre-hook failure
EXIT_ON_FAILURE=$(wrapper-option --as=bool --default=false exitOnFailure)
debug "exit on failure: ${EXIT_ON_FAILURE}"

# Determine if we should show pre-/post-process script names
SHOW_SCRIPT_NAME=$(wrapper-option --as=bool --default=false showScriptName)
debug "show script name: ${SHOW_SCRIPT_NAME}"

# Determine if we should use colors
COLOR_CONFIG=$(wrapper-option --default=auto color)
debug "color config: ${COLOR_CONFIG}"
case "${COLOR_CONFIG}" in
    always | true)
        USE_COLOR="true"
        ;;
    never | false)
        USE_COLOR="false"
        ;;
    auto)
        ${_IN_TERMINAL} && USE_COLOR="true" || USE_COLOR="false"
        ;;
    *)
        USE_COLOR="false"
        ;;
esac
debug "use color: ${USE_COLOR}"


## Colors ######################################################################

# If colors are enabled, set up some colors vars
if ${USE_COLOR}; then
    C_BLACK=$'\033[30m'
    C_RED=$'\033[31m'
    C_GREEN=$'\033[32m'
    C_YELLOW=$'\033[33m'
    C_BLUE=$'\033[34m'
    C_MAGENTA=$'\033[35m'
    C_CYAN=$'\033[36m'
    C_WHITE=$'\033[37m'
    C_RGB=$'\033[38;2;%d;%d;%dm'
    C_DEFAULT_FG=$'\033[39m'
    C_BLACK_BG=$'\033[40m'
    C_RED_BG=$'\033[41m'
    C_GREEN_BG=$'\033[42m'
    C_YELLOW_BG=$'\033[43m'
    C_BLUE_BG=$'\033[44m'
    C_MAGENTA_BG=$'\033[45m'
    C_CYAN_BG=$'\033[46m'
    C_WHITE_BG=$'\033[47m'
    C_RGB_BG=$'\033[48;2;%d;%d;%dm'
    C_DEFAULT_BG=$'\033[49m'
    S_RESET=$'\033[0m'
    S_BOLD=$'\033[1m'
    S_DIM=$'\033[2m'
    S_ITALIC=$'\033[3m'  # not widely supported, sometimes treated as inverse
    S_UNDERLINE=$'\033[4m'
    S_BLINK=$'\033[5m'  # slow blink
    S_BLINK_FAST=$'\033[6m'  # fast blink
    S_REVERSE=$'\033[7m'
    S_HIDDEN=$'\033[8m'  # not widely supported
    S_STRIKETHROUGH=$'\033[9m'  # not widely supported
    S_DEFAULT=$'\033[10m'
fi


## Var Setup ###################################################################

COMMAND_EXIT_CODE=0
PRE_EXIT_CODE=0
POST_EXIT_CODE=0
RUN_COMMAND=true


## Pre-process #################################################################

# Do stuff before running the git command
debug "begin pre-processing"
shopt -s nullglob  # don't fail if glob patterns don't match anything
for EXW_PATH_PART in "${EXW_PATHS[@]}"; do
    pre_process_dir="${EXW_PATH_PART}/${WRAPPED_COMMAND}/pre-process.d"
    for filepath in "${pre_process_dir}"/*; do
        # Check if the file is executable
        if [[ ! -x "${filepath}" ]]; then
            debug "skipping non-executable file: ${filepath}"
            continue
        fi

        # It is executable, so we'll be running it, now we need to determine if
        # we'll be sourcing it or running it as a command
        hook_cmd=()

        # If the file is a bash script, source it, else run it
        verb=""
        if [[ "${filepath}" == *.sh ]]; then
            verb="sourcing"
            hook_cmd=(source "${filepath}")
        else
            verb="running"
            hook_cmd=("${filepath}")
        fi

        if [[ "${SHOW_SCRIPT_NAME}" == "true" ]]; then
            filename=$(basename "${filepath}" | sed -E 's/\.[^.]+$//')
            pretty_name="${filename%.*}"
            pretty_name="${pretty_name//[-_]/ }"
            pretty_name="(plugin) ${pretty_name}"
            # Run the script and print output in the format:
            #   <filename>: error: <stderr>
            #   <filename>: <stdout>
            debug "${verb} pre-process script: ${filepath}"
            run-cmd "${hook_cmd[@]}" \
                1> >(awk -v fn="${pretty_name}" '{print fn ": " $0}') \
                2> >(awk -v fn="${pretty_name}" '{print fn ": error: " $0}')
            PRE_EXIT_CODE=${?}
        else
            run-cmd "${hook_cmd[@]}"
        fi

        if [[ ${PRE_EXIT_CODE} -ne 0 ]]; then
            echo "pre-process script '$(dirname "${filepath}")' failed with exit code ${PRE_EXIT_CODE}" >&2
            if ${EXIT_ON_FAILURE}; then
                exit ${PRE_EXIT_CODE}
            fi
        fi
    done
done
shopt -u nullglob

## Run git #####################################################################

# Run the git command if requested
if [[ "${RUN_COMMAND}" == "true" ]]; then
    run-cmd
    COMMAND_EXIT_CODE=${?}
    debug "wrapped command exited with ${COMMAND_EXIT_CODE}"
    if [[ ${COMMAND_EXIT_CODE} -ne 0 ]]; then
        debug "wrapped command failed"
        if ${EXIT_ON_FAILURE}; then
            exit ${COMMAND_EXIT_CODE}
        fi
    fi
fi

## Post-process ################################################################

# Do other stuff after running the git command
debug "begin post-processing"
shopt -s nullglob  # don't fail if glob patterns don't match anything
for EXW_PATH_PART in "${EXW_PATHS[@]}"; do
    pre_process_dir="${EXW_PATH_PART}/${WRAPPED_COMMAND}/post-process.d"
    for filepath in "${pre_process_dir}"/*; do
        # Check if the file is executable
        if [[ ! -x "${filepath}" ]]; then
            debug "skipping non-executable file: ${filepath}"
            continue
        fi

        # It is executable, so we'll be running it, now we need to determine if
        # we'll be sourcing it or running it as a command
        hook_cmd=()

        # Check if the file is a bash script
        verb="running"
        if [[ "${filepath}" == *.sh ]]; then
            verb="sourcing"
            hook_cmd=(source "${filepath}")
        else
            verb="running"
            hook_cmd=("${filepath}")
        fi

        if [[ "${SHOW_SCRIPT_NAME}" == "true" ]]; then
            filename=$(basename "${filepath}" | sed -E 's/\.[^.]+$//')
            pretty_name="${filename%.*}"
            pretty_name="${pretty_name//[-_]/ }"
            pretty_name="(plugin) ${pretty_name}"
            # Run the script and print output in the format:
            #   <filename>: error: <stderr>
            #   <filename>: <stdout>
            debug "${verb} post-process script: ${filepath}"
            run-cmd "${hook_cmd[@]}" \
                1> >(awk -v fn="${pretty_name}" '{print fn ": " $0}') \
                2> >(awk -v fn="${pretty_name}" '{print fn ": error: " $0}')
            POST_EXIT_CODE=${?}
        else
            run-cmd "${hook_cmd[@]}"
        fi

        if [[ ${POST_EXIT_CODE} -ne 0 ]]; then
            echo "post-process script '$(dirname "${filepath}")' failed with exit code ${POST_EXIT_CODE}" >&2
            if ${EXIT_ON_FAILURE}; then
                exit ${POST_EXIT_CODE}
            fi
        fi
    done
done
shopt -u nullglob

exit ${GIT_EXIT_CODE}
