#!/usr/bin/env bash
#
# Searches for git repositories in the current directory and runs the specified
# git command in each.

include-source 'echo.sh'
include-source 'text.sh'
include-source 'shell.sh'

## usage functions #############################################################
################################################################################

function help-usage() {
    echo "usage: $(basename $0) [-hvq] [-m|--maxdepth <depth>] [-d|--directory <path>] subcommand [subcommand args...]"
}

function help-epilogue() {
    echo "run git commands in all git repositories in the specified directory"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    cat << EOF
    -h                     display usage
    --help                 display this help message
    -m/--maxdepth <n>      the maximum depth to search for git repositories
                           (default: 2)
    -d/--directory <path>  the directory to search for git repositories
    -n/--name              print the name of the repository before the output
    -v/--verbose           verbose output (can be specified multiple times)
    -q/--quiet             don't print anything to stdout
EOF
}

function parse-args() {
    # Default values
    MAXDEPTH=2
    DIRECTORY=$(pwd)
    SHOW_NAME=0
    VERBOSITY=1
    SUBCOMMAND=()

    # Loop over the arguments
    declare -ga REFS
    declare -ga FILEPATHS
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            # -h)
            #     help-usage
            #     help-epilogue
            #     exit 0
            #     ;;
            # --help)
            #     help-full
            #     exit 0
            #     ;;
            -h)
                help-usage
                help-epilogue
                exit 0
                ;;
            -m|--maxdepth)
                if ! is-int ${2}; then
                    echo "error: maxdepth must be an integer" >&2
                    exit 1
                fi
                # Set maxdepth to 1 greater than the specified value since we
                # need to include the '.git' sub-directory in our search
                MAXDEPTH=$((${2} + 1))
                shift 2
                ;;
            -d|--directory)
                DIRECTORY=${2}
                shift 2
                ;;
            -n|--name)
                SHOW_NAME=1
                shift
                ;;
            -v|--verbose)
                let VERBOSITY+=1
                shift 1
                ;;
            -q)
                VERBOSITY=0
                shift 1
                ;;
            -*)
                echo-stderr "error: unknown option: ${1}"
                exit 1
                ;;
            *)
                SUBCOMMAND=("${@}")
                break
                ;;
        esac
    done
}

## main ########################################################################
################################################################################

function main() {
    parse-args "${@}"

    # Find all git repositories in the specified directory
    local git_repos=()
    readarray -t git_repos < <(
        git find-repos --maxdepth ${MAXDEPTH} "${DIRECTORY}"
    )

    if [ ${VERBOSITY} -ge 3 ]; then
        echo-comment "Found ${#git_repos[@]} git repositories in ${DIRECTORY}:"
        for repo in "${git_repos[@]}"; do
            echo-comment "  ${repo}"
        done
    fi

    # Run the specified git command in each repository
    for repo in "${git_repos[@]}"; do
        if [ ${VERBOSITY} -ge 2 ]; then
            echo-formatted "$" -g "git -C '${repo}' $(echo ${SUBCOMMAND[@]})"
        fi
        local output

        if [ ${VERBOSITY} -eq 0 ]; then
            # Run the command, but still show errors
            git -C "${repo}" "${SUBCOMMAND[@]}" >/dev/null
        else
            # Determine whether to enable color
            # If config.ui is set, use that value
            local color_arg
            local color_ui=$(git -C "${repo}" config --get color.ui)
            if [ -z "${color_ui}" ]; then
                # If config.color.ui is not set, its auto is the default, and
                # we will replicate that by checking whether stdout is a tty
                if [ -t 1 ]; then
                    color_arg="-c color.ui=always"
                fi
            fi

            # Actually do the thing
            output=$(git ${color_arg} -C "${repo}" "${SUBCOMMAND[@]}")

            # Prefix each line of output with the name of the repository
            if [ ${SHOW_NAME} -eq 1 ]; then
                local name=$(
                    basename "${repo%/}" \
                        | sed 's/\.bare//' \
                        | tr ' ' '_'
                )
                output=$(echo "${output}" | awk -v name="${name}" '{print name ": " $0}')
            fi
            echo "${output}"
        fi
    done
}

## run #########################################################################
################################################################################

[ "${BASH_SOURCE[0]}" == "${0}" ] && main "${@}"
