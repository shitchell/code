#!/usr/bin/env bash
#
# Searches for git repositories in the current directory and runs the specified
# git command in each.

## usage functions #############################################################
################################################################################

function help-usage() {
    echo "usage: $(basename $0) [-hvq] [-m|--maxdepth <depth>] [-d|--directory <path>] subcommand [subcommand args...]"
}

function help-epilogue() {
    echo "run git commands in all git repositories in the specified directory"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    cat << EOF
    -h                       display usage
    --help                   display this help message
    -m/--maxdepth <n>        the maximum depth to search for git repositories
                             (default: 2)
    -d/--directory <path>    the directory to search for git repositories
    -l/--follow-symlinks     follow symlinks
    -L/--no-follow-symlinks  do not follow symlinks
    -c/--show-command        print the full git command before running
    -C/--no-show-command     do not print the full git command
    -n/--show-name           print each repo name before each line of its output
    -N/--no-show-name        do not print each repo name before its output
    -v/--verbose             verbose output (can be specified multiple times)
    -q/--quiet               don't print anything to stdout
EOF
}

function parse-args() {
    # Default values
    MAXDEPTH=2
    DIRECTORY=$(pwd)
    VERBOSITY=1
    SUBCOMMAND=()
    DO_SHOW_NAME=false
    DO_SHOW_COMMAND=true
    DO_FOLLOW_SYMLINKS=false

    # Loop over the arguments
    declare -ga REFS
    declare -ga FILEPATHS
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit 0
                ;;
            -m|--maxdepth)
                if ! [[ "${2}" =~ ^[0-9]+$ ]] then
                    echo "error: maxdepth must be an integer" >&2
                    exit 1
                fi
                # Set maxdepth to 1 greater than the specified value since we
                # need to include the '.git' sub-directory in our search
                MAXDEPTH=$((${2} + 1))
                shift 2
                ;;
            -d|--directory)
                DIRECTORY=${2}
                shift 2
                ;;
            -l|--follow-symlinks)
                DO_FOLLOW_SYMLINKS=true
                shift 1
                ;;
            -L|--no-follow-symlinks)
                DO_FOLLOW_SYMLINKS=false
                shift 1
                ;;
            -c|--show-command)
                DO_SHOW_COMMAND=true
                shift
                ;;
            -C|--no-show-command)
                DO_SHOW_COMMAND=false
                shift
                ;;
            -n|--show-name)
                DO_SHOW_NAME=true
                shift
                ;;
            -N|--no-show-name)
                DO_SHOW_NAME=false
                shift
                ;;
            -v|--verbose)
                let VERBOSITY+=1
                shift 1
                ;;
            -q)
                VERBOSITY=0
                shift 1
                ;;
            -*)
                echo "error: unknown option: ${1}" >&2
                exit 1
                ;;
            *)
                SUBCOMMAND=("${@}")
                break
                ;;
        esac
    done
}

## main ########################################################################
################################################################################

function main() {
    parse-args "${@}"

    # Find all git repositories in the specified directory
    local git_repos=()
    local find_args=("--maxdepth" "${MAXDEPTH}")
    ${DO_FOLLOW_SYMLINKS} && find_args+=("-l") || find_args+=("-L")
    readarray -t git_repos < <(
        git find-repos "${find_args[@]}" "${DIRECTORY}"
    )

    if [ ${VERBOSITY} -ge 3 ]; then
        echo-comment "Found ${#git_repos[@]} git repositories in ${DIRECTORY}:"
        for repo in "${git_repos[@]}"; do
            echo-comment "  ${repo}"
        done
    fi

    # Run the specified git command in each repository
    for repo in "${git_repos[@]}"; do
        if [ ${VERBOSITY} -ge 2 ]; then
            echo-formatted "$" -g "git -C '${repo}' $(echo ${SUBCOMMAND[@]})"
        fi

        # Determine whether to enable color
        # If config.ui is set, use that value
        local color_arg
        local color_ui=$(git -C "${repo}" config --get color.ui)
        if [ -z "${color_ui}" ]; then
            # If config.color.ui is not set, its auto is the default, and
            # we will replicate that by checking whether stdout is a tty
            if [ -t 1 ]; then
                color_arg="-c color.ui=always"
            fi
        fi

        # Actually do the thing
        if ${DO_SHOW_COMMAND}; then
            echo -e "$ \e[0;32mgit -C$(printf ' %q' "${repo}")$(printf ' %q' "${SUBCOMMAND[@]}")\e[0m"
        fi
        local prefix=""
        if ${DO_SHOW_NAME}; then
            local name="${repo##*/}"
            prefix="${name}: "
        fi

        git ${color_arg} -C "${repo}" "${SUBCOMMAND[@]}" 2>&1 \
            | awk -v prefix="${prefix}" '{print prefix $0}'
    done
}

## run #########################################################################
################################################################################

[ "${BASH_SOURCE[0]}" == "${0}" ] && main "${@}"
