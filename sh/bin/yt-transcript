#!/usr/bin/env bash
#
# Download a youtube video transcript
# curl -s 'https://www.youtube.com/youtubei/v1/get_transcript?key=AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8' \
# the key seems unnecessary?
# curl -s 'https://www.youtube.com/youtubei/v1/get_transcript' \
#    -H 'Content-Type: application/json' \
#    --data-raw '{
#     "context": {
#         "client": {
#             "clientName": "WEB",
#             "clientVersion": "2.2021111",
#         }
#     },
#     "params": "'"$(printf '\n\x0bcC1LFC0KFSw' | base64)"'"
# }'

## imports #####################################################################
################################################################################

include-source 'echo.sh'
include-source 'debug.sh'
include-source 'text.sh'


## usage functions #############################################################
################################################################################

function help-usage() {
    echo "usage: $(basename "${0}") [-h] [-cv] [-f <format>] [-o <output file>] <video id | url>"
}

function help-epilogue() {
    echo "download a youtube video transcript"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "Uses youtubei to download a video transcript. The transcript is"
    echo "formatted as a list of lines, each line containing the time and text."
    echo "The format of each line can be specified using the --format option:"
    echo "    {timeStart}      the time the line starts in HH:MM:SS format"
    echo "    {timeEnd}        the time the line ends in HH:MM:SS format"
    echo "    {timeDuration}   the duration of the line in HH:MM:SS format"
    echo "    {text}           the text of the line"
    echo "    {n}              a newline character"
    echo "    {t}              a tab character"
    echo "    {{}              a literal { character"
    echo "    {}}              a literal } character"
    echo
    cat << EOF
    -h                         display usage
    --help                     display this help message
    -f / --format <format>     display each line of the transcript in the
                               specified format
                               (default: '{timeStart} {text}')
    -c / --color               colorize the output
    --no-color                 do not colorize the output
    --color-time <ansi code>   colorize the time using the specified ansi code.
                               if specified, implies --color (default: 1)
    --color-text <ansi code>   colorize the text using the specified ansi code
                               if specified, implies --color (default: 0)
    -l/--lang <language code>  the language code of the transcript to download
                               if available (defaults to the video default)
    -v                         verbose output
    -o <output file>           write the transcript to the specified file
EOF
}

function parse-args() {
    # Default values
    VERBOSE=0
    DO_COLOR=0
    COLOR_TIME=1
    COLOR_TEXT=0
    FORMAT="{timeStart}  {text}"
    OUTPUT_FILE=""
    LANG=""

    # Loop over the arguments
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit 0
                ;;
            --help)
                help-full
                exit 0
                ;;
            -c | --color)
                DO_COLOR=1
                shift 1
                ;;
            --no-color)
                DO_COLOR=0
                shift 1
                ;;
            --color-time)
                COLOR_TIME="${2}"
                DO_COLOR=1
                shift 2
                ;;
            --color-text)
                COLOR_TEXT="${2}"
                DO_COLOR=1
                shift 2
                ;;
            -l | --lang)
                LANG="${2}"
                shift 2
                ;;
            -f | --format)
                FORMAT="${2}"
                shift 2
                ;;
            -v)
                VERBOSE=1
                shift 1
                ;;
            -o)
                OUTPUT_FILE="${2}"
                shift 2
                ;;
            *)
                if [[ -z "${VIDEO_ID}" ]]; then
                    VIDEO_ID="$(parse-video-id "${1}")"
                    if [[ ${?} -eq 1 ]]; then
                        echo-error "invalid video id: ${1}"
                        help-usage
                        exit 1
                    fi
                    shift 1
                else
                    echo-error "too many arguments"
                    help-usage
                    exit 1
                fi
                ;;
        esac
    done

    # Check for required arguments
    if [[ -z "${VIDEO_ID}" ]]; then
        echo-error "missing required argument: video id"
        help-usage
        exit 1
    fi
}


## helpful functions ###########################################################
################################################################################

function parse-video-id() {
    local string="${1}"
    local video_id

    debug "parsing video id from string: ${string}"

    # If the video id is a url, extract the video id
    if [[ "${string}" =~ youtube.com ]]; then
        video_id="$(echo "${string}" | sed -E 's/.*[?&]v=([^&]+).*/\1/')"
        debug "parsed from youtube.com: ${video_id}"
    elif [[ "${string}" =~ youtu.be ]]; then
        video_id="$(echo "${string}" | sed -E 's/.*youtu.be\/([^?]+).*/\1/')"
        debug "parsed from youtu.be: ${video_id}"
    elif [[ "${string}" =~ ^[a-zA-Z0-9_-]{11}$ ]]; then
        video_id="${string}"
        debug "parsed from video id: ${video_id}"
    else
        debug "failed to parse video id"
        return 1
    fi

    echo "${video_id}"
}

# @description Build the youtubei request params
# @usage yt-transcript-build-params-old <video id> [<lang>]
function yt-transcript-build-params-old() {
    local video_id="${1}"
    local lang="${2}"
    local params

    # Format the language code
    ## https://stackoverflow.com/a/70013529
    ## 1. Get the language initials like "ru" for russian
    ## 2. Encode \n\x00\x12\x02LANGUAGE_INITIALS\x1a\x00 in base64, e.g.:
    ##    A=$(printf '\n\x00\x12\x02LANGUAGE_INITIALS\x1a\x00' | base64)
    ##    => CgASAnJ1GgA=
    ## 3. Encode the result as a URL by replacing the = to %3D, e.g.:
    ##    B=$(printf %s $A | jq -sRr @uri)
    ##    => CgASAnJ1GgA%3D
    ## 4. Only if using shell commands: replace the single % to two %, e.g.:
    ##    C=$(echo $B | sed 's/%/%%/')
    ##    => CgASAnJ1GgA%%3D
    ## 5. Encode \n\x0bVIDEO_ID\x12\x0e$C, e.g. for VIDEO_ID=lo0X2ZdElQ4:
    ##    D=$(printf "\n\x0bVIDEO_ID\x12\x0e$C" | base64)
    ##    => CgtsbzBYMlpkRWxRNBIOQ2dBU0FuSjFHZ0ElM0Q=
    ## 6. Use this params value from the Captions in default language section:
    ##    curl -s 'https://www.youtube.com/y
    if [[ -n "${lang}" ]]; then
        local A=$(printf '\n\x00\x12\x02%s\x1a\x00' "${lang}" | base64)
        debug "lang_b64.A: ${A}"
        local B=$(urlencode "${A}")
        debug "lang_b64.B: ${B}"
        local C=$(echo "${B}" | sed 's/%/%%/')
        debug "lang_b64.C: ${C}"
        local lang_b64=$'\x12\x0e'"${C}"
        debug "lang_b64: ${lang_b64}"
    fi
    params=$(printf '\n\x0b%s%s' "${video_id}" "${lang_b64}" | base64)
    debug "video_id: ${video_id}"
    debug "lang: ${lang}"
    debug "params: ${params}"
    echo "${params}"
}

# @description Build the youtubei request params
# @usage yt-transcript-build-params <video id> [<lang>]
function yt-transcript-build-params() {
    ## Updated as of 2024-08-07 to conform to the new youtubei API
    # This is based on the following working request:
    #   curl 'https://www.youtube.com/youtubei/v1/get_transcript?prettyPrint=false' \
    #       -H "content-type: application/json" \
    #       --data-raw '{
    #           "context": {
    #               "client": {
    #                   "hl": "en",
    #                   "gl": "US",
    #                   "clientName": "WEB",
    #                   "clientVersion": "2.20240806.01.00"
    #               }
    #           },
    #           "params": "CgtiX1RrRmhqOW1naxIOQ2dBU0FtVnVHZ0ElM0QYASozZW5nYWdlbWVudC1wYW5lbC1zZWFyY2hhYmxlLXRyYW5zY3JpcHQtc2VhcmNoLXBhbmVsMAA4AUAB"
    #           }
    #       '
    #
    # The params value is a base64 encoded string that decodes to the following:
    #   \n\x0bb_TkFhj9mgk\x12\x0eCgASAmVuGgA%3D\x18\x01*3engagement-panel-searchable-transcript-search-panel0\x008\x01@\x01
    # The segment "CgASAmVuGgA%3D" decodes to:
    #   \n\x00\x12\x02en\x1a\x00
    #
    # This can be broken down as follows:
    #   - \n\x0b
    #   - {{VIDEO_ID}} (e.g. b_TkFhj9mgk)
    #   - \x12\x0e
    #   - {{LANG_B64}} (e.g. \n\x00\x12\x02en\x1a\x00 => CgASAmVuGgA%3D)
    #   - \x18\x01
    #   - *3engagement-panel-searchable-transcript-search-panel0
    #   - \x00
    #   - 8 (??)
    #   - \x01
    #   - @ (??)
    #   - \x01
    #
    # Note the following changes:
    #   - The language code is now included in the "context.client" object under
    #     the "hl" and "gl" keys AS WELL AS the "params" value
    #   - The "params" value now includes a new field "*3engagement
    #     -panel-searchable-transcript-search-panel0" with a value of 8
    #   - The "params" value now includes an 8 and @ for... some reason
    #
    # Just got a new params that seems to be different for a different video:
    #     Cgs3d3pudUIwc0tsdxISQ2dOaGMzSVNBbVZ1R2dBJTNEGAEqM2VuZ2FnZW1lbnQtcGFuZWwtc2VhcmNoYWJsZS10cmFuc2NyaXB0LXNlYXJjaC1wYW5lbDAAOAFAAQ%3D%3D
    #  => \n\x0b7wznuB0sKlw\x12\x12CgNhc3ISAmVuGgA%3D\x18\x01*3engagement-panel-searchable-transcript-search-panel0\x008\x01@\x01

    local video_id="${1}"
    local lang="${2:-en}"  # Default language to 'en' if not provided
    local params
    local lang_b64
    local engagement_field="*3engagement-panel-searchable-transcript-search-panel0"

    # Step 1: Encode the language initials
    lang_b64=$(printf '\n\x00\x12\x02%s\x1a\x00' "${lang}" | base64)
    debug "lang_b64: $(printf '%q' "${lang_b64}")"

    # Step 2: URL encode the base64 encoded language value
    lang_b64=$(urlencode "${lang_b64}")
    debug "URL encoded lang_b64: $(printf '%q' "${lang_b64}")"

    # Step 3: Prepare the initial part of the params value
    params=$(printf '\n\x0b%s\x12\x0e%s' "${video_id}" "${lang_b64}")
    debug "Initial params: $(printf '%q' "${params}")"

    # Step 4: Append the engagement panel field
    params+=$(printf '\x18\x01%s' "${engagement_field}")
    params+=$'\xff0'
    debug "After adding engagement panel field: $(printf '%q' "${params}")"

    # Step 5: Append the '8' marker
    params+='8'
    debug "After adding the '8' marker: $(printf '%q' "${params}")"

    # Step 6: Append the '\x01' marker
    params+=$(printf '\x01')
    debug "After adding the '\x01' marker: $(printf '%q' "${params}")"

    # Step 7: Append the '@' marker
    params+=$(printf '@')
    debug "After adding the '@' marker: $(printf '%q' "${params}")"

    # Step 8: Append the final \x01 marker
    params+=$(printf '\x01')
    debug "Final params with \x01 marker: $(printf '%q' "${params}")"
    debug "Final params, null byte unescaped: $(printf '%s' "${params}" | cse0 | invisicat.py -I)"

    # Step 9: Encode the entire params value in base64
    params=$(printf '%s' "${params}" | cse0 | base64)
    debug "Encoded params: $(printf '%q' "${params}")"

    # Return the final params value
    echo "${params}"
}

# @description Build the youtubei data payload
# @usage yt-transcript-build-data <video id> [<lang>]
function yt-transcript-build-data() {
    local video_id="${1}"
    local lang="${2}"
    local params data

    params=$(yt-transcript-build-params "${video_id}" "${lang}")
    data='{
        "context": {
            "client": {
                "clientName": "WEB",
                "clientVersion": "2.2021111"
            }
        },
        "params": "'"${params}"'"
    }'
    debug "data: ${data}"
    echo "${data}"
}

# @description Fetch the youtubei JSON response for a video transcript
# @usage yt-transcript-fetch <video id> [<lang>]
function yt-transcript-fetch() {
    local video_id="${1}"
    local lang="${2}"
    local response

    # Set up the cache directory and response file
    local cache_dir="${HOME}/.cache/yt-transcript"
    local cache_response="${cache_dir}/${video_id}"
    [[ -n "${lang}" ]] && cache_response+="-${lang}"
    cache_response+=".json"
    mkdir -p "${cache_dir}" &>/dev/null

    # Check if a cached response exists
    if [[ -f "${cache_response}" ]]; then
        debug "using cached response: ${cache_response}"
        response=$(<"${cache_response}")
    else
        debug "no cached response found, fetching from youtube"
        response=$(
            curl -s 'https://www.youtube.com/youtubei/v1/get_transcript' \
            -H 'Content-Type: application/json' \
            --data-raw "$(yt-transcript-build-data "${video_id}" "${lang}")"
        )
        debug "response: ${response}"
        [[ -d "${cache_dir}" && -w "${cache_dir}" ]] && {
            echo "${response}" >"${cache_response}"
        }
    fi

    echo "${response}"
}

# @description Parse the youtubei response for the transcript
# @usage yt-transcript-parse <response>
function yt-transcript-parse() {
    local response="${1}"

    awk -v color="${DO_COLOR}" -v format="${FORMAT}" \
    -v color_time="${COLOR_TIME}" -v color_text="${COLOR_TEXT}" '
        # ---- Functions -------------------------------------------------------

        # Convert milliseconds to HH:MM:SS
        function ms_to_hms(ms) {
            local seconds
            local minutes
            local hours

            seconds = int(ms / 1000);
            minutes = int(seconds / 60);
            hours = int(minutes / 60);
            seconds = seconds % 60;
            minutes = minutes % 60;
            return sprintf("%02d:%02d:%02d", hours, minutes, seconds);
        }

        # Unescape common escape sequences
        function unescape(text) {
            gsub(/\\n/, "\n", text);
            gsub(/\\t/, "\t", text);
            gsub(/\\r/, "\r", text);
            gsub(/\\"/, "\"", text);
            gsub(/\\\\/, "\\", text);
            return text;
        }

        # ---- Setup -----------------------------------------------------------

        BEGIN {
            ms_start = 0;
            ms_end = 0;
            ms_duration = 0;
            text = "";
            if (color) {
                ms_color_start = "\033[" color_time "m";
                ms_color_end = "\033[0m";
                text_color_start = "\033[" color_text "m";
                text_color_end = "\033[0m";
            }
        }

        # ---- Main ------------------------------------------------------------

        # Ignore all lines until we reach this point
        /"transcriptSegmentListRenderer": {/ {
            # ---- Stop ignoring lines -----------------------------------------
            ignore = "false";
            next;
        }

        # Once we stop ignoring lines, parse the transcript segments
        ignore == "false" {
            if ($0 ~ /"transcriptSegmentRenderer": {/) {
                # ---- Reset the segment variables -----------------------------
                ms_start = 0;
                ms_end = 0;
                ms_duration = 0;
                text = "";
            } else if ($0 ~ /"startMs":/) {
                # ---- ms_start / Start of the segment -------------------------
                ms_start = gensub(/"startMs": "(.*)",/, "\\1", 1);
                if (ms_end > 0 && ms_duration == 0) {
                    ms_duration = ms_end - ms_start;
                } else if (ms_duration > 0 && ms_end == 0) {
                    ms_end = ms_start + ms_duration;
                }
            } else if ($0 ~ /"durationMs":/) {
                # --- ms_duration / Duration of the segment --------------------
                ms_duration = gensub(/.*"durationMs": "(.*)".*/, "\\1", 1);
                if (ms_start > 0 && ms_end == 0) {
                    ms_end = ms_start + ms_duration;
                } else if (ms_end > 0 && ms_start == 0) {
                    ms_start = ms_end - ms_duration;
                }
            } else if ($0 ~ /"endMs":/) {
                # ---- ms_end / End of the segment -----------------------------
                ms_end = gensub(/"endMs": "(.*)",/, "\\1", 1);
                if (ms_start > 0 && ms_duration == 0) {
                    ms_duration = ms_end - ms_start;
                } else if (ms_duration > 0 && ms_end == 0) {
                    ms_end = ms_start + ms_duration;
                }
            } else if ($0 ~ /"text":/) {
                # ---- text / Text of the segment ------------------------------
                text = gensub(/.*"text" ?: ?/, "", "g", $0);
                text = gensub(/^"(.*)"$/, "\\1", "g", text);
            } else if ($0 ~ /^                      },/) {
                # ---- End of a segment, print the text ------------------------
                ms_end = ms_start + ms_duration;
                ms_start = ms_to_hms(ms_start);
                ms_end = ms_to_hms(ms_end);
                ms_duration = ms_to_hms(ms_duration);

                # Validate that we have some text
                if (text == "") {
                    next;
                } else {
                    text = unescape(text);
                }

                # Split it on newlines
                split(text, lines, "\n");

                # Format the lines
                result = "";
                for (i = 1; i <= length(lines); i++) {
                    text = lines[i];
                    line = format;
                    gsub(/{timeStart}/, ms_color_start ms_start ms_color_end, line);
                    gsub(/{timeEnd}/, ms_color_start ms_end ms_color_end, line);
                    gsub(/{timeDuration}/, ms_color_start ms_duration ms_color_end, line);
                    gsub(/{text}/, text_color_start text text_color_end, line);
                    gsub(/{n}/, "\n", line);
                    gsub(/{t}/, "\t", line);
                    if (result) {
                        result = result "\n" line;
                    } else {
                        result = line;
                    }
                }

                # Print it
                print result;
            }
        }' <<< "${response}"
}

# @description Convert milliseconds to HH:MM:SS
# @usage ms-to-hms <milliseconds>
# @arg $1 {number} milliseconds
# @return {string} HH:MM:SS
function ms-to-hms() {
    local ms="${1}"
    local seconds
    local minutes
    local hours

    seconds=$((ms / 1000))
    minutes=$((seconds / 60))
    hours=$((minutes / 60))

    seconds=$((seconds % 60))
    minutes=$((minutes % 60))

    printf "%02d:%02d:%02d" "${hours}" "${minutes}" "${seconds}"
}

# @description URL encode a string
# @usage urlencode <string>
function urlencode() {
    local string="${1}"
    local encoded=""
    local char

    for (( i=0; i<${#string}; i++ )); do
        char="${string:$i:1}"
        case "${char}" in
            [a-zA-Z0-9.~_-]) encoded+="${char}" ;;
            *) printf -v encoded "%s%%%02X" "${encoded}" "'${char}" ;;
        esac
    done

    echo "${encoded}"
}

# Handle escaping/unescaping null bytes via \xFF
esc0() { sed 's/\xFF/\xFF\xFF/g; s/\x00/\xFF0/g'; }
cse0() { sed 's/\xFF0/\xFF\x00/g; s/\xFF\(.\)/\1/g'; }

# @description Download a youtube video transcript
# @usage get-transcript <video id> [<output file>]
# @arg $1 {string} video id
# @arg $2 {string} output file
# @return {string} transcript
function get-transcript() {
    local video_id="${1}"
    local output_file="${2}"
    local lang="${3}"
    local response transcript

    response=$(yt-transcript-fetch "${video_id}" "${lang}")
    transcript=$(yt-transcript-parse "${response}")
    if [[ -z "${output_file}" ]]; then
        debug "printing transcript to stdout"
        printf "%s\n" "${transcript}"
    else
        debug "writing transcript to '${output_file}'"
        printf "%s\n" "${transcript}" > "${output_file}"
    fi
}


## main ########################################################################
################################################################################

function main() {
    parse-args "${@}"

    get-transcript "${VIDEO_ID}" "${OUTPUT_FILE}" "${LANG}"
}


## run #########################################################################
################################################################################

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"
