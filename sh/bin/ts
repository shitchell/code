#!/usr/bin/env bash
#
# Manage a timesheet file using `python -m tabular`

include-source 'echo.sh'

## backup ######################################################################
################################################################################


## usage functions #############################################################
################################################################################

function help-usage() {
    echo "usage: $(basename ${0}) [-h] [<args>] [add|rm|update|done|show|interact|edit|help] [<subcommand-args>]"
}

function help-epilogue() {
    echo "manage a timesheet file using the python tabular module"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "Subcommands:"
    echo "    add        add a new entry to the timesheet"
    echo "    rm         remove an entry from the timesheet"
    echo "    update     update an entry in the timesheet"
    echo "    done       mark an entry as done"
    echo "    show       show the timesheet"
    echo "    interact   start a REPL to interact with the timesheet"
    echo "    edit       edit the timesheet file with \${EDITOR}"
    echo "    backup     backup the timesheet file"
    echo "    help       show this or a subcommand's help message"
    echo
    echo "Global options:"
    cat << EOF
    -h                       display usage
    --help                   display this help message
    -F/--file <file>         use the specified file as the timesheet
                             (default: $TIMESHEET_FILE)

EOF
    echo "rm|update|show options:"
    cat << EOF
    -w/--where <query>       filter the timesheet by the specified criteria
    --since <date>           filter the timesheet by entries since the specified
                             date (alias for -w "start >= <date>")
    --before <date>          filter the timesheet by entries before the specified
                             date (alias for -w "start < <date>")
    -f/--field <name>        limit the command to specific fields
                             (can be used multiple times for multiple fields)
    -r/--row <index>         limit the command to a specific row
    -s/--summary <summary>   alias for --field summary=<summary>
    -d/--details <details>   alias for --field details=<details>
    -j/--job-code <code>     alias for --field code=<code>
    -t/--type <type>         alias for --field type=<type>
    -b/--begin <begin>       alias for --field start=<begin>
    -e/--end <end>           alias for --field end=<end>
    --all                    alias for --since "1970-01-01 00:00:00"
    --daily                  alias for --since "yesterday 00:00"
    --weekly                 alias for --since "7 days ago 00:00"

EOF
    echo "Update options:"
    cat << EOF
    -f/--field <name=value>  update the specified field with the specified value
                             (can be used multiple times for multiple fields)
EOF
}

function parse-args() {
    # Default values
    DATE_FORMAT='%Y-%m-%d %H:%M:%S'
    SUBCOMMAND=""
    SUBCOMMAND_DEFAULT=show
    BEGIN_TIME=""
    END_TIME=""
    AUTO_END=true
    WHERE=()
    WHERE_SPECIFIED=0
    FIELDS=()
    ROWS=()
    TIMESHEET_FILE="${HOME}/.timesheet.csv"
    
    echo "parsing args: " $(printf "'%s' " "$@") >&3

    # Loop over the arguments
    declare -ag POSITIONAL_ARGS
    while [[ ${#} -gt 0 ]]; do
        echo "-- parsing arg '${1}'" >&3
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit 0
                ;;
            --help)
                help-full
                exit 0
                ;;
            -F|--file)
                TIMESHEET_FILE="${2}"
                shift 2
                ;;
            -w|--where)
                WHERE+=("${2}")
                WHERE_SPECIFIED=1
                shift 2
                ;;
            --since)
                local timestamp=$(date -d "${2}" +"${DATE_FORMAT}")
                if [[ -z "${timestamp}" ]]; then
                    echo "error: invalid date '${2}'" >&2
                    exit 1
                fi
                WHERE+=("start >= '${timestamp}'")
                WHERE_SPECIFIED=1
                shift 2
                ;;
            --before)
                local timestamp=$(date -d "${2}" +"${DATE_FORMAT}")
                if [[ -z "${timestamp}" ]]; then
                    echo "error: invalid date '${2}'" >&2
                    exit 1
                fi
                WHERE+=("start < '${timestamp}'")
                WHERE_SPECIFIED=1
                shift 2
                ;;
            -f|--field)
                FIELDS+=("${2}")
                shift 2
                ;;
            -r|--row)
                ROWS+=("${2}")
                shift 2
                ;;
            -s|--summary)
                FIELDS+=("summary=${2}")
                shift 2
                ;;
            -d|--details)
                FIELDS+=("details=${2}")
                shift 2
                ;;
            -c|--code)
                FIELDS+=("code=${2}")
                shift 2
                ;;
            -t|--type)
                FIELDS+=("type=${2}")
                shift 2
                ;;
            -b|--begin|--start)
                # Process the argument using the $(date) command
                local timestamp=$(date -d "${2}" +"%Y-%m-%d %H:%M:%S" 2>/dev/null)
                if [[ -z "${timestamp}" ]]; then
                    echo "error: invalid date format '${2}'" >&2
                    exit 1
                fi
                FIELDS+=("start=${timestamp}")
                BEGIN_TIME="${timestamp}"
                shift 2
                ;;
            -e|--end|--finish|--done)
                # Process the argument using the $(date) command
                local timestamp=$(date -d "${2}" +"%Y-%m-%d %H:%M:%S")
                if [[ -z "${timestamp}" ]]; then
                    echo "error: invalid date format '${2}'" >&2
                    exit 1
                fi
                FIELDS+=("end=${timestamp}")
                END_TIME="${timestamp}"
                shift 2
                ;;
            --all)
                WHERE+=("start > '1970-01-01 00:00:00'")
                WHERE_SPECIFIED=1
                shift 1
                ;;
            --daily)
                local timestamp=$(date -d "yesterday 00:00:00" +"%Y-%m-%d %H:%M:%S")
                WHERE+=("start > '${timestamp}'")
                WHERE_SPECIFIED=1
                shift 1
                ;;
            --weekly)
                local timestamp=$(date -d "7 days ago 00:00:00" +"%Y-%m-%d %H:%M:%S")
                WHERE+=("start > '${timestamp}'")
                WHERE_SPECIFIED=1
                shift 1
                ;;
            -a | --auto-end)
                AUTO_END=true
                shift 1
                ;;
            -A | --no-auto-end)
                AUTO_END=false
                shift 1
                ;;
            -[^0-9]*)
                echo-stderr "error: unknown option ${1}"
                echo-stderr "$(help-usage)"
                exit 1
                ;;
            *)
                if [ -z "${SUBCOMMAND}" ]; then
                    # If the provided argument is a subcommand, use it as such
                    if declare -f "_ts_${1}" > /dev/null; then
                        echo "-- setting subcommand to '${1}'" >&3
                        SUBCOMMAND="${1}"
                        shift 1
                    else
                        # Otherwise, set the subcommand to "add" and use the
                        # argument as the first positional argument
                        echo "-- setting subcommand to 'add'" >&3
                        SUBCOMMAND="add"
                    fi
                else
                    echo "-- adding '${1}' to positional args" >&3
                    POSITIONAL_ARGS+=("${1}")
                    shift 1
                fi
                echo "-- remaining args: " $(printf "'%s' " "$@") >&3
                ;;
        esac
    done
    
    # First things first -- make a backup of the timesheet file
    local backup="${TIMESHEET_FILE}.bak"
    local tsf_lines=$(cat "${TIMESHEET_FILE}" | wc -l)
    local tsb_lines=$(cat "${backup}" | wc -l)
    if [[ ${tsf_lines} -gt ${tsb_lines} ]]; then
        cp "${TIMESHEET_FILE}" "${TIMESHEET_FILE}.bak"
    elif [[ ${tsf_lines} -lt ${tsb_lines} ]]; then
        echo "'${TIMESHEET_FILE}' seems to be missing data from its backup"
    fi

    # If no subcommand was specified, use the default
    if [ -z "${SUBCOMMAND}" ]; then
        SUBCOMMAND="${SUBCOMMAND_DEFAULT}"
        if [[
            ${#POSITIONAL_ARGS[@]} -eq 0
            && ${#FIELDS[@]} -eq 0
            && ${#ROWS[@]} -eq 0
            && ${WHERE_SPECIFIED} -eq 0
        ]]; then
            # Show only the current day's entries if no arguments were provided
            WHERE+=("start >= '$(date -d 'today 00:00' +"${DATE_FORMAT}")'")
        fi
    fi
}


## helpful functions ###########################################################
################################################################################

# Exit if the timesheet file doesn't exist
function require-timesheet-file() {
    if [ ! -f "${TIMESHEET_FILE}" ]; then
        echo-stderr "error: timesheet file '${TIMESHEET_FILE}' does not exist"
        exit 1
    fi
}

# Generate a timestamp from human readable text
function timestamp() {
    # Parse arguments
    local text="now"
    local format="${DATE_FORMAT:-%Y-%m-%d %H:%M:%S}"
    local require_valid=0
    local positional_args=()
    while [[ $# -gt 0 ]]; do
        case "${1}" in
            -f | --format)
                format="${2}"
                shift 2
                ;;
            -r | --require-valid)
                require_valid=1
                shift 1
                ;;
            *)
                positional_args+=("${1}")
                shift 1
                ;;
        esac
    done
    
    # If there are any positional arguments, combine them into a single string
    if [[ ${#positional_args[@]} -gt 0 ]]; then
        text="${positional_args[@]}"
    fi

    # Do some basic manipulation to allow for slightly more natural input than
    # the date command allows
    local date_regex='^[0-9]{2,4}[-/][0-9]{2}[-/][0-9]{2,4}$'
    local datetime_regex='^[0-9]{2,4}[-/][0-9]{2}[-/][0-9]{2,4} [0-9]{2}:[0-9]{2}$'
    if [[ "${text}" =~ ${date_regex} ]]; then
        # If the text is a date, assume it's the beginning of the day
        text="${text} 00:00:00"
    elif [[ "${text}" =~ ${datetime_regex} ]]; then
        # If the text is a date and time, assume it's the beginning of the minute
        text="${text}:00"
    fi

    text=$(
        perl -pe '
            s/midnight/00:00:00/g;
            s/(after)?noon/12:00:00/g;
            s/( )?\bat /\1/g;
            s/\b(\d+)[Ss](ec(ond)?(s)?)?\b/\1 second\4/g;
            s/\b(\d+)[Mm](in(ute)?(s)?)?\b/\1 minute\4/g;
            s/\b(\d+)[Hh](ou)?r?(s)?\b/\1 hour\3/g;
            s/\b(\d+)[Dd](ay)?(s)?\b/\1 day\3/g;
            s/\b(\d+)[Ww](ee)?k?(s)?\b/\1 week\3/g;
            s/\b(\d+)[Yy](ea)?r?(s)?\b/\1 year\3/g;
            s/\bone\b/1/g;
            s/\btwo\b/2/g;
            s/\bthree\b/3/g;
            s/\bfour\b/4/g;
            s/\bfive\b/5/g;
            s/\bsix\b/6/g;
            s/\bseven\b/7/g;
            s/\beight\b/8/g;
            s/\bnine\b/9/g;
            s/\bten\b/10/g;
            s/\beleven\b/11/g;
            s/\btwelve\b/12/g;
        ' <<< "${text}"
    )

    if [[ "${text}" =~ ^[0-9]+$ ]]; then
        # If the text is a number, assume it's a unix timestamp
        text="@${text}"
    fi

    value=$(date -d "${text}" +"${format}" 2> /dev/null)
    exit_code=${?}

    if [[ ${exit_code} -ne 0 ]]; then
        if [[ ${require_valid} -eq 1 ]]; then
            echo-stderr "error: invalid date/time: '${text}'"
            exit 1
        else
            :  # do nothing
        fi
    else
        echo "${value}"
    fi

    return ${exit_code}
}

# Build a command from the variables:
#  SUBCOMMAND, WHERE, FIELDS, TIMESHEET_FILE, and POSITIONAL_ARGS
function run-tabular-command() {
    local args=()

    # Add the subcommand argument
    case "${SUBCOMMAND}" in
        a|add)
            args+=("--add")
            ;;
        r|rm)
            args+=("--delete")
            ;;
        d|done)
            args+=("--update")
            ;;
        u|update)
            args+=("--update")
            ;;
        s|show)
            args+=("--list")
            ;;
        i|interact)
            args+=("--interact")
            ;;
    esac

    # Add the where argument
    if [ ${#WHERE[@]} -gt 0 ]; then
        echo "build-tabular-command(): adding where clauses:" `printf "'%s' " "${WHERE[@]}"` >&3
        for where in "${WHERE[@]}"; do
            args+=("--where" "${where}")
        done
    fi

    # Add the field arguments
    for field in "${FIELDS[@]}"; do
        echo "build-tabular-command(): adding field '--col ${field}'" >&3
        args+=("--col" "${field}")
    done

    # Add the row argument
    if [ ${#ROWS[@]} -gt 0 ]; then
        echo "build-tabular-command(): adding rows" `printf "'%s' " "${ROWS[@]}"` >&3
        for row in "${ROWS[@]}"; do
            args+=("--row" "${row}")
        done
    fi

    # Add the timesheet file argument
    if [ -n "${TIMESHEET_FILE}" ]; then
        echo "build-tabular-command(): setting timesheet file to '${TIMESHEET_FILE}'" >&3
        args+=("${TIMESHEET_FILE}")
    fi

    # Add the positional arguments
    if [ ${#POSITIONAL_ARGS[@]} -gt 0 ]; then
        echo "build-tabular-command(): adding positional args: " $(printf "'%s' " "$@") >&3
        args+=("${POSITIONAL_ARGS[@]}")
    fi

    # Run the command
    echo python -m tabular "$(printf "%q " "${args[@]}")" >&3 #&& exit
    python -m tabular "${args[@]}"
}


## subcommands #################################################################
################################################################################

# @description Add a new row to the timesheet
# @args <summary> [<type>] [<details>] [<job code>]
# @example add "Fixed a bug" "bug" "Fixed a bug in the foo module" "1234"
function _ts_add() {
    local timestamp="${BEGIN_TIME:-$(date +"%Y-%m-%d %H:%M:%S")}"

    # Check the number of arguments
    if [[ ${#POSITIONAL_ARGS[@]} -lt 1 || ${#POSITIONAL_ARGS[@]} -gt 4 ]]; then
        echo-stderr "error: invalid number of arguments"
        exit 1
    fi

    # Check the end time of the last row and, if it is not set, set it to the
    # begin time or the current time
    if ${AUTO_END}; then
        if "${0}" show --field end --row -1 | grep -Eqi 'nan|nat'; then
            "${0}" update -1 end "${timestamp}"
        fi
    fi

    # Look for and set the summary, details, job code, and type
    [ ${#POSITIONAL_ARGS[@]} -ge 1 ] \
        && echo "_ts_add(): setting summary to '${POSITIONAL_ARGS[0]}'" >&3 \
        && FIELDS+=("summary=${POSITIONAL_ARGS[0]}") \
        && unset POSITIONAL_ARGS[0]
    [ ${#POSITIONAL_ARGS[@]} -ge 1 ] \
        && echo "_ts_add(): setting type to '${POSITIONAL_ARGS[1]}'" >&3 \
        && FIELDS+=("type=${POSITIONAL_ARGS[1]}") \
        && unset POSITIONAL_ARGS[1]
    [ ${#POSITIONAL_ARGS[@]} -ge 1 ] \
        && echo "_ts_add(): setting details to '${POSITIONAL_ARGS[2]}'" >&3 \
        && FIELDS+=("details=${POSITIONAL_ARGS[2]}") \
        && unset POSITIONAL_ARGS[2]
    [ ${#POSITIONAL_ARGS[@]} -ge 1 ] \
        && echo "_ts_add(): setting job code to '${POSITIONAL_ARGS[3]}'" >&3 \
        && FIELDS+=("code=${POSITIONAL_ARGS[3]}") \
        && unset POSITIONAL_ARGS[3]
    
    # If "where" is not specified, then set it to the last entry
    if [ ${WHERE_SPECIFIED} -eq 0 ]; then
        WHERE="index == (index.size - 1)"
    fi

    # Add the begin time
    FIELDS+=("start=${timestamp}")
}
function _ts_a() { _ts_add "$@"; }

# @description Remove a row or column from the timesheet
# @args <row index | column name>
function _ts_rm() {
    # Check that the row index or column name was specified
    if [ ${#POSITIONAL_ARGS[@]} -ne 1 ]; then
        echo-stderr "error: no row index or column name specified"
        return 1
    fi

    # If the argument is a number, then it is a row index, otherwise it is a
    # column name
    if [ ${#POSITIONAL_ARGS[@]} -eq 1 ]; then
        if [[ "${POSITIONAL_ARGS[0]}" =~ ^-?[0-9]+$ ]]; then
            ROWS+=("${POSITIONAL_ARGS[0]}")
        else
            WHERE+=("${POSITIONAL_ARGS[0]}")
        fi
        unset POSITIONAL_ARGS[0]
    fi
}

# @description Copy a previous row, by default clearing the end time and using
#              the current time as the start time. If a query is specified, then
#              the last row matching the query will be copied. Any fields
#              specified (e.g. --start "5 minutes ago") will override the values
#              from the copied row.
# @args <row index | query>
# @usage ts copy <row index | query>
# @usage ts copy --row <index>
# @example ts copy "foo == bar"
# @example ts copy 923 --start "5 minutes ago"
function _ts_copy() {
    local row where

    # Determine if a row index or query was specified either as a positional
    # argument or as a flag
    if [ -n "${POSITIONAL_ARGS[0]}" ]; then
        if [[ "${POSITIONAL_ARGS[0]}" =~ ^-?[0-9]+$ ]]; then
            ROWS+=("${POSITIONAL_ARGS[0]}")
            unset POSITIONAL_ARGS[0]
        else
            WHERE+=("${POSITIONAL_ARGS[0]}")
            unset POSITIONAL_ARGS[0]
        fi
    fi

    # Don't allow both a row index and a query to be specified
    if [ ${#ROWS[@]} -gt 0 ] && [ ${#WHERE[@]} -gt 0 ]; then
        echo-stderr "error: cannot specify both a row index and a query"
        return 1
    fi
}
function _ts_c() { _ts_copy "${@}"; }

# @description Update a row in the timesheet
# @args <row index | query> [<field> <value>]
# @usage ts update <row index | query> <field> <value>
# @usage ts update --row <index> --field foo=bar
# @example ts update "foo == bar" --field foo=notbar
# @example ts update -1 foo notbar
function _ts_update() {
    local row where field value

    # Determine if a row index or query was specified either as a positional
    # argument or as a flag
    if [ -n "${POSITIONAL_ARGS[0]}" ]; then
        if [[ "${POSITIONAL_ARGS[0]}" =~ ^-?[0-9]+$ ]]; then
            ROWS+=("${POSITIONAL_ARGS[0]}")
            unset POSITIONAL_ARGS[0]
        else
            WHERE+=("${POSITIONAL_ARGS[0]}")
            unset POSITIONAL_ARGS[0]
        fi
    fi

    # Don't allow both a row index and a query to be specified
    if [ ${#ROWS[@]} -gt 0 ] && [ ${#WHERE[@]} -gt 0 ]; then
        echo-stderr "error: cannot specify both a row index and a query"
        return 1
    fi

    # If a field and value were specified as positional arguments, then add them
    # to the fields array
    if [ ${#POSITIONAL_ARGS[@]} -ge 2 ]; then
        FIELDS+=("${POSITIONAL_ARGS[1]}=${POSITIONAL_ARGS[2]}")
        unset POSITIONAL_ARGS[1]
        unset POSITIONAL_ARGS[2]
    fi
}
function _ts_u() { _ts_update "${@}"; }

# @description Mark a row as complete
# @args [<row index | query>] [<details>]
function _ts_done() {
    local end_time="${END_TIME:-$(date +"%Y-%m-%d %H:%M:%S")}"

    # Check that the correct number of arguments were provided
    if [[ ${#POSITIONAL_ARGS[@]} -gt 2 ]]; then
        echo-stderr "error: incorrect number of arguments"
        return 1
    fi

    # If the first argument is provided, check if it is a number or a query
    if [ ${#POSITIONAL_ARGS[@]} -ge 1 ]; then
        if [[ "${POSITIONAL_ARGS[0]}" =~ ^-?[0-9]+$ ]]; then
            ROWS+=("${POSITIONAL_ARGS[0]}")
        else
            WHERE+=("${POSITIONAL_ARGS[0]}")
        fi
        unset POSITIONAL_ARGS[0]
    else
        # If no arguments are provided, then set the where to the last entry
        WHERE+=("index == (index.size - 1)")
    fi

    # Set the end time to now
    FIELDS+=("end=${end_time}")

    # If the second argument is provided, then it is the details
    if [ ${#POSITIONAL_ARGS[@]} -ge 2 ]; then
        FIELDS+=("details=${POSITIONAL_ARGS[1]}")
        unset POSITIONAL_ARGS[1]
    fi
}

# @description Start an interactive session with the timesheet
function _ts_interact() {
    require-timesheet-file
}
function _ts_i() { _ts_interact "${@}"; }

# @description Edit the timesheet with the default editor
function _ts_edit() {
    # Open the timesheet file in the default editor
    ${EDITOR:-nano} "${TIMESHEET_FILE}"
    exit ${?}
}
function _ts_e() { _ts_edit "${@}"; }

# @description Backup the timesheet file
# @args [<backup file>]
function _ts_backup() {
    local backup_file="${1:-${POSITIONAL_ARGS[0]}}"

    # If the backup file is not specified, then use the default
    if [ -z "${backup_file}" ]; then
        backup_file="${TIMESHEET_FILE}.bak"
    fi

    # Copy the timesheet file to the backup file
    cp "${TIMESHEET_FILE}" "${backup_file}"
    local exit_code=${?}

    case ${exit_code} in
        0)
            echo "Timesheet backed up to ${backup_file}"
            ;;
        *)
            echo-stderr "error: ${exit_code}: could not backup timesheet"
            ;;
    esac

    exit ${exit_code}
}

# @description Show the timesheet
# @args [<query>]
function _ts_show() {
    require-timesheet-file

    if [ ${#POSITIONAL_ARGS[@]} -eq 1 ]; then
        WHERE+=("${POSITIONAL_ARGS[0]}")
        unset POSITIONAL_ARGS[0]
    fi
}
function _ts_s() { _ts_show "${@}"; }

# @description Print the usage message or the help message for a subcommand
# @args [<subcommand>]
function _ts_help() {
    local subcommand="${1:-${POSITIONAL_ARGS[0]}}"
    echo "running _ts_help() with subcommand = '${subcommand}'" >&3

    # If no subcommand was specified, then print the help message
    if [ -z ${subcommand} ]; then
        help-full
    else
        # Determine if the subcommand is an alias for another subcommand
        local code=$(type "_ts_${subcommand}")
        if grep -qE "^    _ts_" <<< "${code}"; then
            subcommand=$(echo "${code}" | grep -oP "^    _ts_\K[a-z_-]+")
        fi

        # Otherwise, use awk to print the help message for the specified
        # subcommand
        awk -v subcommand="${subcommand}" -v prog="$(basename "${0}")" '
            BEGIN {
                # used to track the current help name for multi-line fields
                cur_help_name = "";
            }
            # Define a function that wraps text to a specified width
            function wrap(text, width) {
                # If the text is longer than the width, then wrap it
                if (length(text) > width) {
                    # Split the text into words
                    split(text, words, " ");

                    # Loop through the words and add them to the line
                    line = "";
                    for (i in words) {
                        # If the line is empty, then add the word
                        if (length(line) == 0) {
                            line = words[i];
                        } else if (length(line) + length(words[i]) + 1 <= width) {
                            # If the line is not empty and the word will fit on
                            # the line, then add the word
                            line = line " " words[i];
                        } else {
                            # Otherwise, print the line and start a new line
                            print line;
                            line = words[i];
                        }
                    }

                    # Print the last line
                    print line;
                } else {
                    # Otherwise, just print the text
                    print text;
                }
            }
            {
                # Store any lines that start with "# @"
                if ($0 ~ /^# @/) {
                    help_name = gensub(/^# @([a-z-]+).*/, "\\1", "g", $0);
                    help_text = gensub(/^# @([a-z-]+) (.*)/, "\\2", "g", $0);
                    cur_help_name = help_name;
                    help[help_name] = help_text;
                } else if ($0 ~ /^function/) {
                    # If we find a function, either print the help message or
                    # clear the help message
                    cur_help_name = "";
                    found_cmd = gensub(/^function _ts_([a-z]+).*/, "\\1", "g", $0);
                    if (found_cmd == subcommand) {
                        # If there is no help message, then say as much
                        if (length(help) == 0) {
                            exit 2;
                        }
                        # If there is a description, print and delete it
                        if (help["description"]) {
                            print wrap(help["description"], 80);
                            delete help["description"];
                        } else {
                            delete help["description"];
                        }
                        # If there are args, print and delete them
                        if (help["args"] != "") {
                            print "usage: " prog " " subcommand " " help["args"];
                            delete help["args"];
                        } else {
                            delete help["args"];
                        }
                        # Loop over the remaining help messages and print them
                        for (help_name in help) {
                            print help_name ": " help[help_name];
                        }
                        exit;
                    } else {
                        split("", help);
                    }
                } else if (cur_help_name != "" && $0 ~ /^# /) {
                    # If we are in a multi-line field, then append the line to
                    # the current help message
                    help_text = gensub(/^#\s+(.*)/, "\\1", "g", $0);
                    help[cur_help_name] = help[cur_help_name] " " help_text;
                }
            }
            END {
                if (found_cmd != subcommand) {
                    exit 1;
                }
            }
        ' "${BASH_SOURCE[0]}"
        local exit_code=${?}
        case ${exit_code} in
            0)
                # Do nothing
                ;;
            1)
                echo-stderr "error: no such subcommand '${subcommand}'"
                ;;
            2)
                echo-stderr "error: no help message found for subcommand '${subcommand}'"
                ;;
            *)
                echo-stderr "error: awk exited with code ${exit_code}"
                ;;
        esac
    fi
    exit ${exit_code}
}
function _ts_h() { _ts_help "${@}"; }


## main ########################################################################
################################################################################

function main() {
    # Parse the command line arguments
    echo "received args: " $(printf "'%s' " "$@") >&3
    parse-args "${@}"

    echo "SUBCOMMAND: ${SUBCOMMAND}" >&3
    echo "WHERE: `printf "'%s' " "${WHERE[@]}"`" >&3
    echo "WHERE_SPECIFIED: ${WHERE_SPECIFIED}" >&3
    echo "ROWS: `printf "'%s' " "${ROWS[@]}"`" >&3
    echo "FIELDS: `printf "'%s' " "${FIELDS[@]}"`" >&3
    echo "TIMESHEET_FILE: ${TIMESHEET_FILE}" >&3
    echo "POSITIONAL_ARGS (${#POSITIONAL_ARGS[@]}): `printf "'%s' " "${POSITIONAL_ARGS[@]}"`" >&3

    # Find the subcommand function "_ts_<subcommand>"
    local subcommand_func="_ts_${SUBCOMMAND}"
    echo "subcommand_func: ${subcommand_func}" >&3

    # Determine if the subcommand function exists
    if ! declare -f "${subcommand_func}" > /dev/null; then
        echo-stderr "error: unknown subcommand ${SUBCOMMAND}"
        echo-stderr "$(help-usage)"
        exit 1
    fi

    ${subcommand_func}
    if [ ${?} -ne 0 ]; then
        _ts_help "${SUBCOMMAND}"
        exit ${?}
    fi

    run-tabular-command
    return ${?}
}


## run #########################################################################
################################################################################

[ "${BASH_SOURCE[0]}" == "${0}" ] && (
    if [ -n "${DEBUG}" ]; then
        exec 3>&2
        main "${@}"
    else
        main "${@}" 3>/dev/null
    fi
)
