#!/bin/bash
#
# Searches for git repositories in the current directory and runs the specified
# git command in each.

include-source 'echo.sh'
include-source 'text.sh'

## usage functions #############################################################
################################################################################

function help-usage() {
    echo "usage: $(basename $0) [-hvq] [-m|--maxdepth <depth>] [-d|--directory <path>] subcommand [subcommand args...]"
}

function help-epilogue() {
    echo "run git commands in all git repositories in the specified directory"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    cat << EOF
    -h                     display usage
    --help                 display this help message
    -v/--verbose           verbose output (can be specified multiple times)
    -q/--quiet             don't print anything to stdout
    -m/--maxdepth <n>      the maximum depth to search for git repositories
    -d/--directory <path>  the directory to search for git repositories
EOF
}

function parse-args() {
    # Default values
    VERBOSITY=1
    MAXDEPTH=3
    DIRECTORY=$(pwd)
    SUBCOMMAND=()

    # Loop over the arguments
    declare -ga REFS
    declare -ga FILEPATHS
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            # -h)
            #     help-usage
            #     help-epilogue
            #     exit 0
            #     ;;
            # --help)
            #     help-full
            #     exit 0
            #     ;;
            -h)
                help-usage
                help-epilogue
                exit 0
                ;;
            -v|--verbose)
                let VERBOSITY+=1
                shift 1
                ;;
            -q)
                VERBOSITY=0
                shift 1
                ;;
            -m|--maxdepth)
                if ! is-int ${2}; then
                    echo "error: maxdepth must be an integer" >&2
                    exit 1
                fi
                MAXDEPTH=${2}
                shift 2
                ;;
            -d|--directory)
                DIRECTORY=${2}
                shift 2
                ;;
            -*)
                GIT_LOG_OPTS+=("${1}")
                exit 1
                ;;
            *)
                SUBCOMMAND=("${@}")
                break
                ;;
        esac
    done
}

## main ########################################################################
################################################################################

function main() {
    parse-args "${@}"

    # Find all git repositories in the specified directory
    local git_repos=()
    while IFS= read -r repo; do
        git_repos+=("${repo}")
    done < <(find "${DIRECTORY}" -maxdepth ${MAXDEPTH} -type d -name '\.git' -printf '%h\n')

    # Run the specified git command in each repository
    for repo in "${git_repos[@]}"; do
        echo-formatted -V 2 "$" -g "git -C '${repo}' ${SUBCOMMAND[@]}"
        if [ ${VERBOSITY} -eq 0 ]; then
            git -C "${repo}" "${SUBCOMMAND[@]}" >/dev/null 2>&1
        else
            git -C "${repo}" "${SUBCOMMAND[@]}"
        fi
    done
}

## run #########################################################################
################################################################################

[ "${BASH_SOURCE[0]}" == "${0}" ] && main "${@}"

# if [ -z "$1" ]; then
#   echo "usage: $(basename $0) git-command"
#   exit 1
# fi

# find . -name '\.git' -type d \
#     -exec sh -c "echo '{}' | sed 's/\.git$//'" \;\
#     -exec bash -c "include-source 'echo.sh' ; echo-run git -C '{}/..' ""$@" \;
