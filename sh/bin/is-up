#!/usr/bin/env bash
#
# This script does some stuff


## imports #####################################################################
################################################################################

include-source 'debug.sh'


## exit codes ##################################################################
################################################################################

declare -ri E_SUCCESS=0
declare -ri E_ERROR=1
declare -ri E_INVALID_STATUS_CODE=2


## traps #######################################################################
################################################################################

# @description Silence all output
# @usage silence-output
function silence-output() {
    exec 3>&1 4>&2 1>/dev/null 2>&1
}

# @description Restore stdout and stderr
# @usage restore-output
function restore-output() {
    [[ -t 3 ]] && exec 1>&3 3>&-
    [[ -t 4 ]] && exec 2>&4 4>&-
}

# @description Exit trap
function trap-exit() {
    restore-output
}
trap trap-exit EXIT


## colors ######################################################################
################################################################################

# Determine if we're in a terminal
[[ -t 1 ]] && __IN_TERMINAL=true || __IN_TERMINAL=false

# @description Set up color variables
# @usage setup-colors
function setup-colors() {
    C_RED=$'\e[31m'
    C_GREEN=$'\e[32m'
    C_YELLOW=$'\e[33m'
    C_BLUE=$'\e[34m'
    C_MAGENTA=$'\e[35m'
    C_CYAN=$'\e[36m'
    C_WHITE=$'\e[37m'
    S_RESET=$'\e[0m'
    S_BOLD=$'\e[1m'
    S_DIM=$'\e[2m'
    S_UNDERLINE=$'\e[4m'
    S_BLINK=$'\e[5m'
    S_INVERT=$'\e[7m'
    S_HIDDEN=$'\e[8m'

    # Set up color categories
    C_UP="${S_BOLD}${C_GREEN}"
    C_DOWN="${S_BOLD}${C_RED}"
    C_SUCCESS="${C_GREEN}"
    C_FAILURE="${C_RED}"
}

# @description Unset color variables
# @usage unset-colors
function unset-colors() {
    unset C_RED C_GREEN C_YELLOW C_BLUE C_MAGENTA C_CYAN C_WHITE \
          S_RESET S_BOLD S_DIM S_UNDERLINE S_BLINK S_INVERT S_HIDDEN \
          C_UP C_DOWN C_SUCCESS C_FAILURE
}


## usage functions #############################################################
################################################################################

function help-usage() {
    # {{TODO: UPDATE USAGE}}
    echo "usage: $(basename "${0}") [-h]"
}

function help-epilogue() {
    # {{TODO: UPDATE EPILOGUE}}
    echo "do stuff"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "Some extra info."
    echo
    echo "Options:"
    cat << EOF
    -h                    display usage
    --help                display this help message
    -c/--color <when>     when to use color ("auto", "always", "never")
    -s/--silent           suppress all output
    -P/--port <port>      the port to check for the server
                          (default: 80 or 443 based on protocol)
    -H/--host <host>      the host to check for the server
    -U/--uri-path <path>  the URL path to check for the server
                          (default: /)
    -p/--protocol <prot>  the protocol to use when checking the server
                          (default: http)
    -m/--method <method>  the HTTP method to use when checking the server
                          (default: GET)
    -s/--status <code>    the expected status code from the server
                          (default: empty/any)
    -w/--wait             wait for the server to be up before exiting
    -t/--timeout <secs>   the number of seconds to wait for the server to be up
                          (default: 5)
    -r/--retries <count>  the number of times to retry checking the server. 0 or
                          empty mean retry forever
                          (default: 1)
    -i/--interval <secs>  the number of seconds to wait between retries
                          (default: 1)
    <url>                 a raw URL to check for the server
EOF
}

function parse-args() {
    # Default values
    FILEPATHS=()
    DO_COLOR=false
    DO_SILENT=false
    PORT=  # if unset, will default to 80 or 443 based on the protocol
    HOST=
    URI_PATH="/"
    PROTOCOL="http"
    METHOD="GET"
    STATUS=
    TIMEOUT=5
    RETRIES=1
    INTERVAL=1

    local color_when="${COLOR:-auto}" # auto, on, yes, always, off, no, never

    # Loop over the arguments
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit ${E_SUCCESS}
                ;;
            --help)
                help-full
                exit ${E_SUCCESS}
                ;;
            -c | --color)
                color_when="${2}"
                shift 1
                ;;
            -s | --silent)
                DO_SILENT=true
                ;;
            -P | --port)
                PORT="${2}"
                shift 1
                ;;
            --port=*)
                PORT="${1#*=}"
                ;;
            -H | --host)
                HOST="${2}"
                shift 1
                ;;
            --host=*)
                HOST="${1#*=}"
                ;;
            -U | --uri-path)
                URI_PATH="${2}"
                shift 1
                ;;
            --uri-path=*)
                URI_PATH="${1#*=}"
                ;;
            -p | --protocol)
                PROTOCOL="${2}"
                shift 1
                ;;
            --protocol=*)
                PROTOCOL="${1#*=}"
                ;;
            -m | --method)
                METHOD="${2}"
                shift 1
                ;;
            --method=*)
                METHOD="${1#*=}"
                ;;
            -s | --status)
                STATUS="${2}"
                shift 1
                ;;
            --status=*)
                STATUS="${1#*=}"
                ;;
            -w | --wait)
                RETRIES=0
                ;;
            -t | --timeout)
                TIMEOUT="${2}"
                shift 1
                ;;
            --timeout=*)
                TIMEOUT="${1#*=}"
                ;;
            -r | --retries)
                RETRIES="${2}"
                shift 1
                ;;
            --retries=*)
                RETRIES="${1#*=}"
                ;;
            -i | --interval)
                INTERVAL="${2}"
                shift 1
                ;;
            --interval=*)
                INTERVAL="${1#*=}"
                ;;
            --)
                shift 1
                break
                ;;
            -*)
                echo "error: unknown option: ${1}" >&2
                return ${E_ERROR}
                ;;
            *)
                local parsed_url
                if parsed_url=$(parse-url "${1}"); then
                    eval "${parsed_url}"
                else
                    echo "error: invalid URL: ${1}" >&2
                    return ${E_ERROR}
                fi
                ;;
        esac
        shift 1
    done

    # If -- was used, collect the remaining arguments
    while [[ ${#} -gt 0 ]]; do
        FILEPATHS+=("${1}")
        shift 1
    done

    # If in silent mode, silence the output
    ${DO_SILENT} && silence-output

    # Set up colors
    if ! ${DO_SILENT}; then
        case "${color_when}" in
            on | yes | always)
                DO_COLOR=true
                ;;
            off | no | never)
                DO_COLOR=false
                ;;
            auto)
                if ${__IN_TERMINAL}; then
                    DO_COLOR=true
                else
                    DO_COLOR=false
                fi
                ;;
            *)
                echo "error: invalid color mode: ${color_when}" >&2
                return ${E_ERROR}
                ;;
        esac
        ${DO_COLOR} && setup-colors || unset-colors
    fi

    # Validate that the timeout, retries, and interval are numbers
    if ! [[ "${TIMEOUT}" =~ ^[0-9]+$ ]]; then
        echo "error: timeout must be a number" >&2
        return ${E_ERROR}
    fi
    if ! [[ "${RETRIES}" =~ ^[0-9]+$ ]]; then
        echo "error: retries must be a number" >&2
        return ${E_ERROR}
    fi
    if ! [[ "${INTERVAL}" =~ ^[0-9]+$ ]]; then
        echo "error: interval must be a number" >&2
        return ${E_ERROR}
    fi

    # If the port is not set, then set it based on the protocol
    if [[ -z "${PORT}" ]]; then
        case "${PROTOCOL}" in
            http)
                PORT=80
                ;;
            https)
                PORT=443
                ;;
            ftp)
                PORT=21
                ;;
            *)
                echo "error: unsupported protocol: ${PROTOCOL}" >&2
                return ${E_ERROR}
                ;;
        esac
    fi

    # Build the URL
    URL="${PROTOCOL}://${HOST}:${PORT}${URI_PATH}"

    return ${E_SUCCESS}
}


## helpful functions ###########################################################
################################################################################

# @description Parse a URL and return an `eval`-able string of its parts
# @usage parse-url <url>
function parse-url() {
    local url="${1}"
    local protocol host port uri_path query
    local any_match=false
    local regex='^((https)://)?([^/:]+)(:([0-9]+))?(/[^?]*)?(\?.*)?$'

    if [[ "${url}" =~ ${regex} ]]; then
        protocol="${BASH_REMATCH[2]}"
        host="${BASH_REMATCH[3]}"
        port="${BASH_REMATCH[5]}"
        uri_path="${BASH_REMATCH[6]}"
        query="${BASH_REMATCH[7]}"

        # Set the protocol
        if [[ -n "${protocol}" ]]; then
            echo "PROTOCOL=\"${protocol}\""
            any_match=true
        fi

        # Set the host
        if [[ -n "${host}" ]]; then
            echo "HOST=\"${host}\""
            any_match=true
        fi

        # Set the port
        if [[ -n "${port}" ]]; then
            echo "PORT=\"${port}\""
            any_match=true
        fi

        # Set the URI path
        if [[ -n "${uri_path}" ]]; then
            echo "URI_PATH=\"${uri_path}\""
            any_match=true
        fi

        # Set the query
        if [[ -n "${query}" ]]; then
            echo "QUERY=\"${query}\""
            any_match=true
        fi
    else
        return ${E_ERROR}
    fi

    ${any_match} || return ${E_ERROR}
}

## main ########################################################################
################################################################################

function main() {
    parse-args "${@}" || return ${?}
    local status_code exit_code
    local first_run=true

    debug-vars RETRIES

    if [[ -z "${RETRIES}" || "${RETRIES}" -le 0 ]]; then
        try_forever=true
        RETRIES=-1
    else
        try_forever=false
    fi

    debug-vars URL TIMEOUT RETRIES INTERVAL STATUS METHOD

    echo "${S_DIM}${URL}${S_RESET}"

    for (( i = 0; RETRIES == -1 || i < RETRIES; i++ )); do
        ${first_run} && first_run=false || printf "."

        # Do the check
        status_code=$(
            curl --silent --output /dev/null --head --fail --max-time ${TIMEOUT} \
                --request ${METHOD} --write-out "%{http_code}" "${URL}"
        )
        exit_code=${?}

        # Check the check
        if [[ ${exit_code} -eq 0 ]]; then
            # Server is up!
            echo "[${status_code}] Server (${HOST}) is ${C_UP}UP${S_RESET}"

            # Validate the status code if it was provided
            if [[ -n "${STATUS}" && "${status_code}" != "${STATUS}" ]]; then
                echo "error: expected status code ${STATUS}, got ${status_code}" >&2
                return ${E_INVALID_STATUS_CODE}
            else
                return ${E_SUCCESS}
            fi
        fi

        # Not up; if we're not done then take a nap
        (( (i + 1) != RETRIES )) && sleep ${INTERVAL}
    done

    echo "Server (${HOST}) is ${C_DOWN}DOWN${S_RESET}" >&2
    return ${exit_code}
}


## run #########################################################################
################################################################################

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"
