#!/usr/bin/env bash
#
# Change the indentation level of a file.

## imports #####################################################################
################################################################################

include-source 'colors.sh'
include-source 'debug.sh'


## exit codes ##################################################################
################################################################################

declare -ri E_SUCCESS=0
declare -ri E_ERROR=1


## traps #######################################################################
################################################################################

function silence-output() {
    :  'Silence all script output'
    exec 3>&1 4>&2 1>/dev/null 2>&1
}

# @usage restore-output
function restore-output() {
    :  'Restore script output after a call to `silence-output`'
    [[ -t 3 ]] && exec 1>&3 3>&-
    [[ -t 4 ]] && exec 2>&4 4>&-
}

function trap-exit() {
    :  'An exit trap to restore output on script end'
    restore-output
}
trap trap-exit EXIT


## usage functions #############################################################
################################################################################

function help-usage() {
    echo "usage: $(basename "${0}") [-h/--help] [-i/--to-indent <level>] [-I/--from-indent <level>] [-c/--to-char <char>] [--] <file>..."
}

function help-epilogue() {
    echo "change the indentation level of a file"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "Converts the indentation level of a file, changing the number of"
    echo "spaces used for indentation and the character used for indentation."
    echo "For the script to do this, it must know what the original indentation"
    echo "level is, which it will attempt to detect. If it cannot detect the"
    echo "original indentation level, it will not change the indentation level"
    echo "without manually specifying the original indentation level with the"
    echo "--original-indent option."
    echo
    echo "Options:"
    cat << EOF
    -h                        display usage
    --config-file <file>      use the specified configuration file
    --help                    display this help message
    -s/--silent               suppress all output
    -i/--to-indent <level>    the number of spaces to indent by
    -I/--from-indent <int>    the original indentation level to change from
                              (default: "detect")
    -c/--to-char <char>       the character to use for indentation
    <file>...                 the file(s) to change the indentation level of
EOF
}

function parse-args() {
    # Parse the arguments first for a config file to load default values from
    CONFIG_FILE="${HOME}/.$(basename "${0}").conf"
    for ((i=0; i<${#}; i++)); do
        case "${!i}" in
            -c | --config-file)
                let i++
                CONFIG_FILE="${!i}"
                ;;
        esac
    done
    [[ -f "${CONFIG_FILE}" ]] && source "${CONFIG_FILE}"

    # Default values
    TO_INDENT_CHAR="${INDENT_CHAR:-' '}"
    TO_INDENT_LEVEL="${INDENT_LEVEL:-4}"
    FROM_INDENT_LEVEL='detect'
    FROM_INDENT_LEVEL_SPACE=''  # Used if there are mixed spaces and tabs
    FROM_INDENT_LEVEL_TAB=''    # Used if there are mixed spaces and tabs
    FILEPATHS=()
    DO_SILENT=false

    # Loop over the arguments
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit ${E_SUCCESS}
                ;;
            --help)
                help-full
                exit ${E_SUCCESS}
                ;;
            --config-file)
                shift 1
                ;;
            -s | --silent)
                DO_SILENT=true
                ;;
            -i | --to-indent)
                TO_INDENT_LEVEL="${2}"
                shift 2
                ;;
            -I | --from-indent)
                FROM_INDENT_LEVEL="${2}"
                FROM_INDENT_LEVEL_SPACE="${2}"
                FROM_INDENT_LEVEL_TAB="${2}"
                shift 2
                ;;
            -c | --to-char)
                TO_INDENT_CHAR="${2}"
                shift 2
                ;;
            --)
                shift 1
                if [[ ${#} -gt 0 ]]; then
                    FILEPATHS+=("${@}")
                fi
                break
                ;;
            -*)
                echo "error: unknown option: ${1}" >&2
                return ${E_ERROR}
                ;;
            *)
                FILEPATHS+=("${1}")
                ;;
        esac
        shift 1
    done

    # If in silent mode, silence the output
    ${DO_SILENT} && silence-output

    # Validate that numbers are numbers
    [[ ${TO_INDENT_LEVEL} =~ ^[0-9]+$ ]] || return ${E_ERROR}
    [[ ${FROM_INDENT_LEVEL} == 'detect' || ${FROM_INDENT_LEVEL} =~ ^[0-9]+$ ]] || return ${E_ERROR}

    return ${E_SUCCESS}
}


## helpful functions ###########################################################
################################################################################

function _gcd() {
    :  'Calculate the greatest common divisor of two numbers'
    # Validate that we have exactly two integers
    [[ ${#} -ne 2 ]] && return ${E_ERROR}
    ! [[ ${1} =~ ^[0-9]+$ && ${2} =~ ^[0-9]+$ ]] && return ${E_ERROR}
    # Euclidean algorithm
    ! (( ${1} % ${2} )) && echo ${2} || gcd ${2} $(( ${1} % ${2} ))
}

function gcd() {
    :  'Calculate the greatest common divisor of a list of numbers'
    local -a numbers=("${@}")
    local -i gcd=${numbers[0]}
    for number in "${numbers[@]:1}"; do
        gcd=$(_gcd ${gcd} ${number})
    done
    echo ${gcd}
}

function detect-indentation() {
    :  'Detect the indentation level and character of some text'
    local file="${1:-/dev/stdin}"
    local line='' indent_char='' indent_count=0
    # indent_sizes_* will be used to track the number of spaces and tabs used
    # on each line, respectively
    local indent_sizes_space=() indent_sizes_tabs=()
    local -i indent_level=0 indent_level_space=0 indent_level_tabs=0
    local -i gcd_space=0 gcd_tabs=0
    local -i max_lines=10
    local -i collected_lines=0

    # Loop over the lines of the text until we find ~10 lines with leading
    # whitespace. Count the number of leading whitespace characters on each line
    # and store them in an array. Use the first line to set the initial guess at
    # the indentation level, and validate that each subsequent line is a
    # multiple of the initial guess. If not, find the greatest common divisor of
    # the indentation levels of all the lines. If the GCD is 0 or 1, return an
    # error. It's *possible* that 1 could be the correct indentation level, but
    # it's unlikely, and the user will need to manually specify the indentation
    # level in that case.
    # NOTE: If there are mixed spaces and tabs, count their indentation levels
    # separately and replace them separately based on their respective levels.
    ## Collect the first 10 lines with leading whitespace
    while IFS='' read -r line && (( ${#collected_lines[@]} < ${max_lines} )); do
        # echo "processing line: ${line}" >&2
        if [[ "${line}" =~ ^([$'\t ']+) ]]; then
            indent_char="${BASH_REMATCH[1]:0:1}"
            indent_count=${#BASH_REMATCH[1]}
            if [[ "${indent_char}" == ' ' ]]; then
                indent_sizes_space+=(${indent_count})
            else
                indent_sizes_tabs+=(${indent_count})
            fi
            ((collected_lines++))
        fi
    done < <(cat "${file}")

    # declare -p indent_sizes_space indent_sizes_tabs >&2

    ## Detect the indentation levels for spaces and tabs
    indent_level_space=${indent_sizes_space[0]}
    for indent_level in "${indent_sizes_space[@]}"; do
        # Validate that each subsequent line is a multiple of the first line
        if ! (( indent_level % indent_level_space == 0 )); then
            # This line is not a multiple, so find the GCD of all the lines
            gcd_space=$(gcd "${indent_sizes_space[@]}")
            # If the GCD is 0 or 1, return an error
            if (( gcd_space == 0 || gcd_space == 1 )); then
                echo "error: invalid space indent level: ${gcd_space}" >&2
                echo >&2
                echo "Check for consistent indentation and try again or set" >&2
                echo "the level manually with --from-indent" >&2
                return ${E_ERROR}
            fi
        fi
    done
    indent_level_tabs=${indent_sizes_tabs[0]}
    for indent_level in "${indent_sizes_tabs[@]}"; do
        # Validate that each subsequent line is a multiple of the first line
        if ! (( indent_level % indent_level_tabs == 0 )); then
            # This line is not a multiple, so find the GCD of all the lines
            gcd_tabs=$(gcd "${indent_sizes_tabs[@]}")
            # If the GCD is 0 or 1, return an error
            if (( gcd_tabs == 0 || gcd_tabs == 1 )); then
                echo "error: invalid tab indent level: ${gcd_tabs}" >&2
                echo >&2
                echo "Check for consistent indentation and try again or set" >&2
                echo "the level manually with --from-indent" >&2
                return ${E_ERROR}
            fi
        fi
    done

    # declare -p indent_level_space indent_level_tabs >&2
    FROM_INDENT_LEVEL_SPACE=${indent_level_space}
    FROM_INDENT_LEVEL_TAB=${indent_level_tabs}
    echo "INDENT_SPACE=${FROM_INDENT_LEVEL_SPACE}"
    echo "INDENT_TAB=${FROM_INDENT_LEVEL_TAB}"
}


## main ########################################################################
################################################################################

function main() {
    parse-args "${@}" || return ${?}

    for filepath in "${FILEPATHS[@]}"; do
        echo "Processing file: ${filepath}"
        if [[ "${FROM_INDENT_LEVEL}" == 'detect' ]]; then
            detect-indentation "${filepath}" || return ${?}
        fi
        # Replace all leading whitespace with the new indentation level
        sed "s/^\([${FROM_INDENT_LEVEL_SPACE}${FROM_INDENT_LEVEL_TAB}]\+\)/$(printf "%${TO_INDENT_LEVEL}s" | tr ' ' "${TO_INDENT_CHAR}")/g" "${filepath}"
    done
}


## run #########################################################################
################################################################################

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"