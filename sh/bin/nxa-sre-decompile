#!/usr/bin/env bash
#
# Decompile NxA SRE files


## imports #####################################################################
################################################################################

include-source 'debug.sh'


## exit codes ##################################################################
################################################################################

declare -ri E_SUCCESS=0
declare -ri E_ERROR=1


## traps #######################################################################
################################################################################

# function trap-exit() {
#     echo -e "\nexiting"
# }
# trap trap-exit EXIT


## colors ######################################################################
################################################################################

# Determine if we're in a terminal
[[ -t 1 ]] && __IN_TERMINAL=true || __IN_TERMINAL=false

# @description Set up color variables
# @usage setup-colors
function setup-colors() {
    C_RED='\e[31m'
    C_GREEN='\e[32m'
    C_YELLOW='\e[33m'
    C_BLUE='\e[34m'
    C_MAGENTA='\e[35m'
    C_CYAN='\e[36m'
    C_WHITE='\e[37m'
    S_RESET='\e[0m'
    S_BOLD='\e[1m'
    S_DIM='\e[2m'
    S_UNDERLINE='\e[4m'
    S_BLINK='\e[5m'
    S_INVERT='\e[7m'
    S_HIDDEN='\e[8m'
}


## usage functions #############################################################
################################################################################

function help-usage() {
    echo "usage: $(basename "${0}") [-h]"
}

function help-epilogue() {
    echo "do stuff"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "Some extra info."
    echo
    echo "Options:"
    cat << EOF
    -h                      display usage
    --help                  display this help message
    -c/--color <when>       colorize the output; 'auto', 'yes', or 'no'
    -s/--single-file        decompile each SRE as a single XML file
    *-m/--multi-file        decompile each SRE as multiple XML files
    -d/--directory <dir>   decompile all files to the specified directory
    <file>                  the file to decompile

    *WIP
EOF
}

function parse-args() {
    # Default values
    FILEPATHS=()
    DO_COLOR=false
    OUTPUT_DIRECTORY=""
    OUTPUT_MODE="single" # single, multi
    local color_when="auto"

    # Loop over the arguments
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit ${E_SUCCESS}
                ;;
            --help)
                help-full
                exit ${E_SUCCESS}
                ;;
            -d | --directory)
                OUTPUT_DIRECTORY="${2}"
                shift 1
                ;;
            -c | --color)
                color_when="${2}"
                shift 1
                ;;
            -s | --single-file)
                OUTPUT_MODE="single"
                shift 1
                ;;
            -m | --multi-file)
                OUTPUT_MODE="multi"
                shift 1
                ;;
            --)
                shift 1
                break
                ;;
            -*)
                echo "error: unknown option: ${1}" >&2
                return ${E_ERROR}
                ;;
            *)
                FILEPATHS+=("${1}")
                ;;
        esac
        shift 1
    done
    
    # If -- was used, collect the remaining arguments
    while [[ ${#} -gt 0 ]]; do
        FILEPATHS+=("${1}")
        shift 1
    done

    # Set up colors
    case ${color_when} in
        auto)
            if ${__IN_TERMINAL}; then
                setup-colors
                DO_COLOR=true
            else
                DO_COLOR=false
            fi
            ;;
        yes | on | always)
            setup-colors
            DO_COLOR=true
            ;;
        no | off | never)
            DO_COLOR=false
            ;;
        *)
            echo "error: unknown color option: ${color_when}" >&2
            return ${E_ERROR}
            ;;
    esac
    
    return ${E_SUCCESS}
}


## helpful functions ###########################################################
################################################################################

# @description Do stuff
# @usage do-stuff
function decompile-sre() {
    local filepath="${1}"
    local filename="${filepath##*/}"
    local tmp_dir=$(mktemp -d)
    debug-vars filepath filename tmp_dir

    # Extract the account name
    ## read the first 500 bytes of the file
    local head=$(head -c 500 "${filepath}")
    ## find the first instance of "accountName"
    local account_name=$(grep -oP 'accountName="\K[^"]+' <<< "${head}")

    echo -e "## ${S_BOLD}${filename}${S_RESET} -- ${C_CYAN}${account_name}${S_RESET}"

    # Extract the base64 encoded data
    debug "Extracting base64 data"
    local cdata=$(grep -oP '!\[CDATA\[\K[^\]]+' < "${filepath}")
    debug "...extracted ${#cdata} bytes"

    # Decode the base64 data
    debug "Decoding base64 data"
    base64 -d <<< "${cdata}" > "${tmp_dir}/filename.zz"
    debug "...decoded ${#data} bytes"

    # Un-zlib the data
    debug "Unzlibbing data"
    if command -v pigz &> /dev/null; then
        pigz -d < "${tmp_dir}/filename.zz" > "${tmp_dir}/filename"
    elif command -v zlib-flate &> /dev/null; then
        zlib-flate -uncompress < "${tmp_dir}/filename.zz" > "${tmp_dir}/filename"
    elif command -v gzip &> /dev/null; then
        gzip -d < "${tmp_dir}/filename.zz" > "${tmp_dir}/filename"
    else
        echo "error: no zlib decompression tool found" >&2
        return ${E_ERROR}
    fi

    cat "${tmp_dir}/filename"

    # Clean up
    rm -rf "${tmp_dir}"
}


## main ########################################################################
################################################################################

function main() {
    parse-args "${@}" || return ${?}

    # Set up a temporary directory to work in
    TMP_DIR=$(mktemp -d)
    trap "rm -rf ${TMP_DIR}" EXIT

    # Loop over the files
    for filepath in "${FILEPATHS[@]}"; do
        local filename="${filepath##*/}"
        local filename_noext="${filename%.*}"

        # Decompile the file
        local decompiled=$(decompile-sre "${filepath}")

        # Output the decompiled file
        if [[ "${OUTPUT_MODE}" == "single" ]]; then
            if [[ -z "${OUTPUT_DIRECTORY}" ]]; then
                echo "${decompiled}"
            else
                echo "${decompiled}" > "${OUTPUT_DIRECTORY}/${filename}.xml"
            fi
        else
            echo "error: multi-file mode not yet implemented" >&2
        fi
    done
}


## run #########################################################################
################################################################################

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"
