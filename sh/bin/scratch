#!/usr/bin/env bash
#
# Open a temporary file in the default editor
#
# TODO:
# - For options like --list and --last, set a var to determine if the action
#   should be taken, and then perform the action after the options are parsed.
# - Update to allow multiple filepaths, and if an action calls for only one
#   filepath, simply use the first specified.
# - Remove --list-names and just use --list-fmt '%f' instead.

## imports #####################################################################
################################################################################

include-source 'echo.sh'
include-source 'debug.sh'


## usage functions #############################################################
################################################################################

function help-usage() {
    echo "usage: $(basename "${0}") [-hu] [-e <editor>] [-d <dir>] [--clear|--rmdir|--list|<filename>]"
}

function help-epilogue() {
    echo "open a temporary scratch file in the default editor"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "If a filename is not specified, a timestamp is used as the filename"
    echo "precise to the day (YYYYMMDD), i.e. consecutive uses of scratch"
    echo "within the same day will use the same file."
    echo
    echo "Actions:"
    cat << EOF
    -o / --open         open the scratch file in the default editor
    -v / --view <file>  view the specified scratch file
    -p / --page <file>  view the scratch file in the default pager
    --rm <file>         remove the specified file from the scratch directory
    --rmdir             remove the scratch directory
    --clear             clear the scratch directory
    --list              list the files in the scratch directory
    --list-names        list the filenames in the scratch directory
    *--list-fmt <fmt>    list the files in the scratch directory with the
                        specified format, where <fmt> is a string with the
                        following placeholders:
                          %f:    the filename
                          %F:    the full path to the file
                          %s:    the size of the file in human readable format
                          %b:    the size of the file in bytes
                          %m:    the last modified time of the file
                          %a:    the last accessed time of the file
                          %P:    a preview of the file
                          %P(n): a preview of the file with a maximum length of
                                 n characters
EOF
    echo
    echo "Options:"
    cat << EOF
    -h                  display usage
    --help              display this help message
    -e / --editor       the editor to use, defaults to the value of the EDITOR
                        environment variable
    -d / --dir <dir>    the directory to use for the scratch directory, defaults
                        to the directory used by \`mktemp\`. if no argument is
                        given, prints the scratch directory and exits
    -u / --user-dirs    create \`scratch-<uid>\` directories in the scratch dir
    -u / --unique       guarantees a unique, unused scratch file
    -l / --last         use the last modified scratch file
    -e / --exec <cmd>   execute the specified command on the scratch file
    -I <string>         replace \`<string>\` with the scratch file in the
                        command, e.g.: \`scratch -I {} --exec "cp {} ~/"\`
    --no-exec           do not execute the specified command on the scratch file
EOF
    echo "* to be implemented"
}

function parse-args() {
    # Default values
    EDITOR="${EDITOR:-vi}"
    PAGER="${PAGER:-less}"
    TMP_DIR=$(dirname "$(mktemp -u)")
    SCRATCH_DIR="${TMP_DIR}/scratch-$(id -u)"
    FILENAME=$(date +%Y%m%d)
    DO_SUMMARY=1
    DEFAULT_ACTION="scratch"
    ACTION="${DEFAULT_ACTION}" # scratch, view, exec, clear, rmdir, list, rm, page
    EXEC_CMD=""
    EXEC_PLACEHOLDER=""
    SUMMARY_LENGTH=50
    
    # Loop over the arguments
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit 0
                ;;
            --help)
                help-full
                exit 0
                ;;
            -e | --editor)
                EDITOR="${2}"
                shift
                ;;
            -d | --dir)
                if [[ -z "${2}" ]]; then
                    echo "${SCRATCH_DIR}"
                    exit 0
                fi
                SCRATCH_DIR="${2}"
                shift
                ;;
            -v | --view)
                if [[ -z "${2}" ]]; then
                    echo-stderr "no file specified"
                    exit 1
                fi
                FILENAME="${2}"
                ACTION="view"
                shift
                ;;
            -p | --page)
                if [[ -z "${2}" ]]; then
                    echo-stderr "no file specified"
                    exit 1
                fi
                FILENAME="${2}"
                ACTION="page"
                shift
                ;;
            -e | --exec)
                if [[ -z "${2}" ]]; then
                    echo-stderr "no command specified"
                    exit 1
                fi
                EXEC_CMD="${2}"
                ACTION="exec"
                shift
                ;;
            --no-exec)
                ACTION="${DEFAULT_ACTION}}"
                ;;
            -I)
                if [[ -z "${2}" ]]; then
                    echo-stderr "no placeholder specified"
                    exit 1
                fi
                EXEC_PLACEHOLDER="${2}"
                shift
                ;;
            --list | --ls)
                debug "listing files in scratch directory"
                ACTION="list"
                list-files "${SCRATCH_DIR}"
                exit 0
                ;;
            --list-names)
                debug "listing filenames in scratch directory"
                find "${SCRATCH_DIR}" -iname '[^.]*' -type f -printf '%f\n'
                exit 0
                ;;
            --list-summary)
                DO_SUMMARY=1
                ;;
            --no-list-summary)
                DO_SUMMARY=0
                ;;
            --list-summary-length)
                debug "setting summary length to: ${2}"
                SUMMARY_LENGTH="${2}"
                if ! [[ "${SUMMARY_LENGTH}" =~ ^[0-9]+$ ]]; then
                    echo-formatted -r "invalid summary length: '${SUMMARY_LENGTH}'"
                    exit 1
                fi
                shift
                ;;
            -u | --unique)
                FILENAME=$(
                    basename "$(generate-unique-filename "${SCRATCH_DIR}")"
                )
                ;;
            -l | --last)
                if [[ -f "${SCRATCH_DIR}/.last" ]]; then
                    FILENAME=$(cat "${SCRATCH_DIR}/.last")
                else
                    # Get the last accessed file
                    FILENAME=$(
                        find "${SCRATCH_DIR}" -type f -name '[0-9]*' \
                            -printf '%A@ %p\n' | sort -n | tail -1 | cut -f2- -d' '
                    )
                fi
                if [[ -n "${FILENAME}" ]]; then
                    FILENAME=$(basename "${FILENAME}")
                else
                    echo-warning "no scratch files found for $(whoami)"
                    exit 1
                fi
                ;;
            --clear)
                echo -n "clearing scratch directory ... "
                local num_files
                num_files=$(
                    rm -rfv "${SCRATCH_DIR}/"* 2>/dev/null | wc -l
                )
                local exit_code=${?}
                s=$([ "${num_files}" -ne 1 ] && echo s)
                local message
                if [[ "${num_files}" -eq 0 ]]; then
                    message='already empty'
                else
                    message="${num_files} file${s} removed"
                fi
                echo-formatted -g "${message}"
                exit ${exit_code}
                ;;
            --rmdir)
                rm -rf "${SCRATCH_DIR}"
                exit ${?}
                ;;
            --rm)
                if [[ -z "${2}" ]]; then
                    echo-stderr "no file specified"
                    exit 1
                fi
                FILENAME="${2}"
                ACTION="rm"
                shift
                ;;
            *)
                FILENAME="${1}"
                shift
                ;;
        esac
        shift
    done
}


## helpful functions ###########################################################
################################################################################

function list-files() {
    local directory="${1:-${SCRATCH_DIR}}"
    debug "listing files in directory: ${directory}"
    local filepaths filetype filesize summary ellipsis first_run

    # Ensure the directory exists
    if ! [[ -d "${directory}" ]]; then
        echo-formatted -r "no such directory '${directory}'"
        return 1
    fi

    # List the files in the directory
    (    
        cd "${directory}"
        shopt -s nullglob
        filepaths=( * )
        debug "filepaths: ${filepaths[*]}"
        if [[ ${#filepaths[@]} -eq 0 ]]; then
            echo-formatted -y "no scratch files found for $(whoami)"
            return 1
        fi
        (
            first_run=1
            for filepath in "${filepaths[@]}"; do
                debug "filepath: ${filepath}"
                filetype=$(file -b "${filepath}")
                debug "filetype: ${filetype}"
                if [[ "${filetype}" =~ 'ASCII text'|'Unicode text' ]]; then
                    if [[ "${first_run}" -eq 1 ]]; then
                        first_run=0
                        debug "first run"
                    else
                        echo
                        debug "not first run"
                    fi
                    filesize=$(du -h "${filepath}" | cut -f1)
                    if [[ "${filesize}" == '0' ]]; then
                        # Check to see if the file size is measurable in bytes
                        filesize="$(du -b "${filepath}" | cut -f1)B"
                    fi
                    # Read the first SUMMARY_LENGTH characters
                    summary=$(dd if="${filepath}" skip=0 count=$((SUMMARY_LENGTH + 1)) bs=1 2>/dev/null)
                    if [[ ${#summary} -eq $((SUMMARY_LENGTH + 1)) ]]; then
                        # If the summary is SUMMARY_LENGTH + 1 characters long,
                        # then cutting it down to SUMMARY_LENGTH characters will
                        # result in trimming content, so add an ellipsis
                        ellipsis='...'
                    else
                        ellipsis=''
                    fi
                    summary=$(echo ${summary:0:-1}"${ellipsis}")  # Trim to 50 characters and trim whitespace
                    printf '\033[1m%s\033[0m\t\033[33m%s\033[0m\t\033[36m%s\033[0m\1: %s\n' \
                        "${filepath}" \
                        "${filesize}" \
                        "$(date -r "${filepath}")" \
                        "${summary}"
                fi
            done
        ) | column -et -s $'\t' | tr '\1' '\n'
    )
}

# @description Generates a unique filename in a directory
# @usage generate-unique-filename [<directory>]
function generate-unique-filename() {
    directory="${1:-.}"

    mktemp -u --tmpdir="${directory}" "XXXXXX"
}

# @description Convert bytes to human readable format
# @usage bytes-to-human-readable [--precision <int>] <bytes>
function bytes-to-human-readable() {
    local units=( B KiB MiB GiB TiB PiB EiB ZiB YiB )
    local unit_index=0
    local unit
    
    # Default values
    local bytes
    local precision=2

    # Parse arguments
    while [[ ${#} -gt 0 ]]; do
        case "${1}" in
            --precision)
                precision="${2}"
                shift
                ;;
            *)
                bytes="${1}"
                ;;
        esac
        shift
    done

    # Convert bytes to human readable format
    while [[ "${bytes}" -ge 1024 ]]; do
        local whole=$((bytes / 1024))
        if [[ ${precision} -gt 0 ]]; then
            local part=$((bytes % 1024))
            part=$((part * 100 / 1024))
            if [[ ${part} -gt 0 ]]; then
                bytes="${whole}.${part}"
            fi
        else
            bytes="${whole}"
        fi
        unit_index=$((unit_index + 1))
    done
    unit="${units[${unit_index}]}"
    printf "%.${precision}f %s\n" "${bytes}" "${unit}"
}

# @description Generate a list of editor-specific options
# @usage generate-scratch-editor-options <editor>
function generate-scratch-editor-options() {
    local editor="${1}"
    local -n options="${2}"
    options=()

    case "${editor}" in
        vim | vi)
            options+=('-c' '"set ft=scratch"')
            ;;
        micro)
            options+=('-autosave' '1')
            ;;
        *)
            options=()
            ;;
    esac
}

# @description Convert a scratch filename to a scratch filepath
# @usage get-scratch-filepath <filename>
function get-scratch-filepath() {
    local filename="${1}"
    local filepath="${SCRATCH_DIR}/${filename}"

    # Save the filename to ${SCRATCH_DIR}/.last
    echo "${FILENAME}" > "${SCRATCH_DIR}/.last"

    echo "${filepath}"
}


## main ########################################################################
################################################################################

function main() {
    parse-args "${@}"

    # Create the scratch directory if it doesn't exist
    if [ ! -d "${SCRATCH_DIR}" ]; then
        mkdir -p "${SCRATCH_DIR}"
    fi

    # Create the scratch directory if it doesn't exist
    if [ ! -d "${SCRATCH_DIR}" ]; then
        mkdir -p "${SCRATCH_DIR}"
        # Ensure the scratch directory is readable and writable only by the
        # current user
        chmod -R 600 "${SCRATCH_DIR}" 2>/dev/null
    fi

    # Do the thing
    if [[ "${ACTION}" == "view" ]]; then
        cat "$(get-scratch-filepath "${FILENAME}")"
        return ${?}
    elif [[ "${ACTION}" == "page" ]]; then
        ${PAGER} "$(get-scratch-filepath "${FILENAME}")"
        return ${?}
    elif [[ "${ACTION}" == "list" ]]; then
        list-files "${SCRATCH_DIR}"
        return ${?}
    elif [[ "${ACTION}" == "exec" ]]; then
        # Replace EXEC_PLACEHOLDER with the scratch file path
        if [[ -n "${EXEC_PLACEHOLDER}" ]]; then
            EXEC_CMD=$(
                awk -v filepath="$(get-scratch-filepath "${FILENAME}")" \
                    -v placeholder="${EXEC_PLACEHOLDER}" \
                    '{ gsub(placeholder, filepath); print }' \
                    <<< "${EXEC_CMD}"
            )
        else
            # If no placeholder is specified, append the scratch file path to
            # the end of the command
            EXEC_CMD=$(
                printf '%s %q' \
                    "${EXEC_CMD}" \
                    "$(get-scratch-filepath "${FILENAME}")"
            )
        fi
        debug "running command: \`${EXEC_CMD}\`"
        eval "${EXEC_CMD}"
        return ${?}
    elif [[ "${ACTION}" == "scratch" ]]; then
        generate-scratch-editor-options "${EDITOR}" editor_options
        local scratch_cmd=(
            "${EDITOR}"
            "${editor_options[@]}"
            "$(get-scratch-filepath "${FILENAME}")"
        )
        debug "running command: \`${scratch_cmd[@]}\`"
        "${scratch_cmd[@]}"
        return ${?}
    elif [[ "${ACTION}" == "rm" ]]; then
        rm -v "$(get-scratch-filepath "${FILENAME}")"
        return ${?}
    else
        echo-formatted -r "invalid action: ${ACTION}"
        return 1
    fi
}


## run #########################################################################
################################################################################

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"
