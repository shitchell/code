#!/bin/bash
#
# Get the md5 hash for file(s) across commits, tags, or branches. If no
# filepaths are provided and the ref is a commit, the files modified in that
# commit will be used.

include-source 'echo.sh'
include-source 'git.sh'
include-source 'shell.sh'

## usage functions #############################################################
################################################################################

function help-usage() {
    echo "usage: $(basename $0) [-hdq] [ref1] [ref2] ... -- file1 [file2] ..."
}

function help-epilogue() {
    echo "get the md5 hash for file(s) across commits or branches."
}

function help-full() {
    help-usage
    help-epilogue
    echo
    cat << EOF
    -h               display usage
    --help           display this help message
    -m/--md5-only    only return the md5 hash
    -d/--diff        compare the md5 hashes of the files and exit with 0 if they
                     are the same, 1 otherwise
    --color          colorize the output (auto, always, never. default: auto)
    -q/--quiet       don't print anything to stdout
EOF
}

function parse-args() {
    # Track whether positional arguments should be treated as files or not
    local positional_files=0

    # Default values
    QUIET=0
    DO_DIFF=0
    COLOR=auto
    HASH_ONLY=0
    GIT_LOG_OPTS=()

    # Loop over the arguments
    declare -ga REFS
    declare -ga FILEPATHS
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit 0
                ;;
            --help)
                help-full
                exit 0
                ;;
            -q)
                QUIET=1
                shift 1
                ;;
            -d)
                DO_DIFF=1
                shift 1
                ;;
            -m|--md5-only)
                HASH_ONLY=1
                shift 1
                ;;
            --)
                positional_files=1
                shift 1
                ;;
            -*)
                GIT_LOG_OPTS+=("${1}")
                exit 1
                ;;
            *)
                if [ ${positional_files} -eq 0 ]; then
                    REFS+=("${1}")
                else
                    FILEPATHS+=("${1}")
                fi
                shift 1
                ;;
        esac
    done

    # If no refs are provided, use HEAD
    if [ ${#REFS[@]} -eq 0 ]; then
        REFS+=("HEAD")
    fi

    # If no files are provided, then check if the ref is a commit. If it is, use
    # the files modified in that commit.
    if [ ${#FILEPATHS[@]} -eq 0 ]; then
        if [ ${#REFS[@]} -eq 1 ]; then
            local ref="${REFS[0]}"
            if [ $(get-ref-type "${ref}") == "commit" ]; then
                IFS=$'\n' FILEPATHS+=($(git log -1 --pretty=format: --name-only "${ref}"))
            fi
        fi
    fi

    # Set the positional arguments in the global array
    set -- ${REFS[@]}
    set -- ${FILEPATHS[@]}
}

## main ########################################################################
################################################################################

function main() {
    parse-args "${@}"

    # If no files were specified, show the help
    if [ ${#FILEPATHS[@]} -eq 0 ] 2>/dev/null; then
        echo-stderr "fatal: no files specified"
        help-usage >&2
        exit 1
    fi

    # If no refs are specified, use the current branch
    if [ ${#REFS[@]} -eq 0 ]; then
        REFS[0]=$(git rev-parse --abbrev-ref HEAD)
    fi

    local file
    local md5s=()
    local formats=("g" "r" "b" "p" "c" "gB" "rB" "bB" "pB" "cB" "gU" "rU" "bU" "pU" "cU" "gR" "rR" "bR" "pR" "cR")
    for filepath in "${FILEPATHS[@]}"; do
        local ref
        for ref in "${REFS[@]}"; do
            # Get the relative path to the file from the git root
            local relpath=$(git-relpath "${filepath}")

            # Get the file contents at that ref
            local contents=$(git show "${ref}:${relpath}" 2>/dev/null)

            # Use a stupid "00000000000000000000000000000000" hash if the file is empty
            local md5
            if [ -z "${contents}" ]; then
                md5="00000000000000000000000000000000"
            else
                md5=$(echo "${contents}" | md5sum - | cut -d' ' -f1)
            fi

            # If we're doing a diff, check if the md5 hash is is already in the
            # array
            if ! in-array "${md5}" "${md5s[@]}"; then
                # This is a new md5 hash. If --quiet is set, then we don't need
                # to continue past this point and can simply exit with a 1.
                if [ ${QUIET} -eq 1 ]; then
                    exit 1
                fi

                # Add the md5 hash to the array
                md5s+=("${md5}")
            fi

            # Print the md5 hash for the file and ref
            if [ ${QUIET} -eq 0 ]; then
                # If printing colorized output, then use the appropriate format
                if [ ${COLOR} != "never" ]; then
                    # Get the index of the md5 hash in the array
                    local md5_index=$(index-of "${md5}" "${md5s[@]}")
                    # Get the format at that index
                    local format="${formats[${md5_index}]}"

                    # Print the md5 hash in the appropriate format
                    if [ ${HASH_ONLY} -eq 1 ]; then
                        echo-formatted -${format} "${md5}"
                    else
                        echo-formatted -${format} "${md5}" -- ${ref} ${filepath}
                    fi
                else
                    if [ ${HASH_ONLY} -eq 1 ]; then
                        echo "${md5}"
                    else
                        echo "${md5}" ${ref} ${filepath}
                    fi
                fi
            fi
        done
    done
}

## run #########################################################################
################################################################################

[ "${BASH_SOURCE[0]}" == "${0}" ] && main "${@}"
