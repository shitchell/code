#!/bin/bash
#
# Get the md5 hash for file(s) across commits, tags, or branches. If no
# filepaths are provided and the ref is a commit, the files modified in that
# commit will be used.
#
# TODO: use `git cat-file` to get the exact file contents sans any extra newline

include-source 'echo.sh'
include-source 'git.sh'
include-source 'shell.sh'

## usage functions #############################################################
################################################################################

function help-epilogue() {
    echo "get the md5 hash for file(s) across commits or branches."
}

function help-full() {
    help-usage
    help-epilogue
    echo
    cat << EOF
    -h                 display usage
    --help             display this help message
    -m/--md5-only      only return the md5 hash
    -u/--unique        only return unique hashes
    -<int>/-n <int>    show the first <int> matching commits. to show all
                       commits, use '*' or 'all'. default: 1
    --format <fmt>     replace the default output with the specified git log
                       format. see 'git log --help' for more information. three
                       addtional format specifiers are available:
                          - %fp (filepath)
                          - %ref (ref)
                          - %MD5 (the md5 hash of the file)
                       ex: --format "%h %fp %MD5"
    -a/--alternate     use alternating colors for different md5 hashes
    -A/--no-alternate  don't use alternating colors for different md5 hashes'
    -c/--color <always|never|auto>
EOF
}

function help-usage() {
    echo "usage: $(basename $0) [-hmuaA] [-<int>/-n <int>] [--format <fmt>] [ref] [filepath]..."
}

# We have to determine if the script is using any redirections or pipes at the
# top level rather than in the main function
([[ ! -t 1 && ! -p /dev/stdout ]] || [[ -p /dev/stdout ]]) && __IS_PIPED=1 || __IS_PIPED=0

function parse-args() {
    echo "parse-args($(printf "'%s' " "${@}" | sed 's/.$//'))" >&3

    # Track whether positional arguments should be treated as files or not
    local positional_filepaths=0

    # Default values
    DO_ALTERNATE=1
    DO_UNIQUE=0
    COLOR=$(git config --get color.ui || echo auto)
    NUM_COMMITS=1
    GIT_LOG_OPTS=()
    USE_REL_PATH=1
    DEFAULT_FORMAT="%MD5 %ref %fp"
    FORMAT="${DEFAULT_FORMAT}"
    USE_ECHO_FORMATTED=1

    # Loop over the arguments
    declare -ga REFS
    declare -ga FILEPATHS
    while [[ ${#} -gt 0 ]]; do
        echo "parse-args: ${1}" >&3
        case ${1} in
            # -h)
            #     help-usage
            #     help-epilogue
            #     exit 0
            #     ;;
            -h | --help)
                help-full
                exit 0
                ;;
            -m|--md5-only)
                FORMAT="%MD5"
                shift 1
                ;;
            -u|--unique)
                DO_UNIQUE=1
                shift 1
                ;;
            -n)
                if [[ ${2} =~ ^-?[0-9]+$ ]]; then
                    NUM_COMMITS="${2}"
                    shift 2
                elif [[ "${2}" == "all" || "${2}" == "*" ]]; then
                    NUM_COMMITS="-1"
                    shift 2
                else
                    echo "error: invalid argument for -n/--num-commits: ${2}"
                    exit 1
                fi
                ;;
            -[0-9]+)
                NUM_COMMITS=${1:1}
                shift 1
                ;;
            --format)
                FORMAT=${2}
                shift 2
                ;;
            --format=*)
                FORMAT=${1:9}
                shift 1
                ;;
            -a | --alternate)
                DO_ALTERNATE=1
                shift 1
                ;;
            -A | --no-alternate)
                DO_ALTERNATE=0
                shift 1
                ;;
            -c | --color)
                COLOR="${2}"
                shift 2
                ;;
            --)
                positional_filepaths=1
                shift 1
                ;;
            -*)
                GIT_LOG_OPTS+=("${1}")
                shift 1
                ;;
            *)
                # For any positional arguments before the '--' argument, try to
                # determine if they're refs or filepaths. If they're refs, add
                # them to the REFS array. If they're filepaths, add them to the
                # FILEPATHS array. If they're neither or ambiguous, exit with
                # an error.
                # If the '--' argument has been seen, treat all remaining
                # positional arguments as filepaths.``
                if [ "${positional_filepaths}" -eq 1 ]; then
                    FILEPATHS+=("${1}")
                else
                    case "$(is-ref-or-file "${1}")" in
                        ref)
                            REFS+=("${1}")
                            target_branches_src="custom"
                            ;;
                        file)
                            FILEPATHS+=("${1}")
                            ;;
                        ambiguous)
                            echo-stderr "error: ambiguous argument ${1}, please use -t or --"
                            echo-stderr "$(help-usage)"
                            exit 1
                            ;;
                        *)
                            echo-stderr "error: ${1} does not appear to be a ref or file"
                            echo-stderr "$(help-usage)"
                            exit 1
                            ;;
                    esac
                fi
                shift 1
                ;;
        esac
    done

    # If no refs are provided, use HEAD
    if [ ${#REFS[@]} -eq 0 ]; then
        REFS+=("HEAD")
    fi

    # If a specific number of commits is requested, replace REFS with the
    # appropriate number of commits
    if [ ${NUM_COMMITS} != 1 ]; then
        local new_refs=()
        for ref in "${REFS[@]}"; do
            local commits
            local commits_arg=""
            if [[ "${NUM_COMMITS}" == 'all' || "${NUM_COMMITS}" == "*" ]]; then
                commits_arg=""
            else
                commits_arg="-n ${NUM_COMMITS}"
            fi
            commits=$(git log "${ref}" --format="%h" -n "${NUM_COMMITS}")
            if [ ${NUM_COMMITS} = 'all' ]; then
                new_refs+=(${commits})
            else
                new_refs+=($(echo "${commits}" | head -n ${NUM_COMMITS}))
            fi
        done
        REFS=("${new_refs[@]}")
    fi

    # If no files are provided, then check if the ref is a commit. If it is, use
    # the files modified in that commit.
    echo "checking for files..." >&3
    if [ ${#FILEPATHS[@]} -eq 0 ]; then
        if [ ${#REFS[@]} -eq 1 ]; then
            local ref="${REFS[0]}"
            if [ $(get-ref-type "${ref}") == "commit" ]; then
                IFS=$'\n' FILEPATHS+=($(git log -1 --pretty=format: --name-only "${ref}"))
                USE_REL_PATH=0
            fi
        fi
    fi

    # Determine whether to use echo-formatted or git log to print the output
    echo "determining format handler..." >&3
    if [ "${FORMAT}" == "${DEFAULT_FORMAT}" ]; then
        USE_ECHO_FORMATTED=1
    else
        # Determine if the format string contains any git log format specifiers
        local test_format=$(
            echo "${FORMAT}" \
                | sed -e 's/%MD5//g' -e 's/%fp//g' -e 's/%ref//g'
        )
        if [[ "${test_format}" =~ % ]]; then
            # If it does, use git log
            USE_ECHO_FORMATTED=0
        else
            # If it doesn't, use echo-formatted
            USE_ECHO_FORMATTED=1
        fi
    fi

    ECHO_FORMATTED_WHEN=$(git config --get color.ui || echo auto)

    echo "REFS: $(printf "'%s' " "${REFS[@]}")" >&3
    echo "FILEPATHS: $(printf "'%s' " "${FILEPATHS[@]}")" >&3
    echo "NUM_COMMITS: ${NUM_COMMITS}" >&3
    echo "DO_ALTERNATE: ${DO_ALTERNATE}" >&3
    echo "DO_UNIQUE: ${DO_UNIQUE}" >&3
    echo "COLOR: ${COLOR}" >&3
    echo "__IS_PIPED: ${__IS_PIPED}" >&3
    echo "USE_REL_PATH: ${USE_REL_PATH}" >&3
    echo "USE_ECHO_FORMATTED: ${USE_ECHO_FORMATTED}" >&3
    echo "ECHO_FORMATTED_WHEN: ${ECHO_FORMATTED_WHEN}" >&3
    echo "GIT_LOG_OPTS: $(printf "'%s' " "${GIT_LOG_OPTS[@]}")" >&3
    echo "FORMAT: ${FORMAT}" >&3
}


## helpful functions ###########################################################
################################################################################

function get-equals-or-space-arg() {
    # get the argument to an option that can be specified with either a space or
    # an equals sign
    # e.g. --option=arg or --option arg
    # usage: get-equals-or-space-arg "${@}"
    local arg="${1}"
    local maybe_arg="${2}"
    if [[ "${arg}" =~ = ]]; then
        echo "${arg}" | cut -d '=' -f 2-
        return 1
    else
        echo "${maybe_arg}"
        return 2
    fi
}


## main ########################################################################
################################################################################

function main() {
    echo "main($(printf "'%s' " "${@}" | sed 's/.$//'))" >&3
    parse-args "${@}"

    # If no files were specified, show the help
    if [ ${#FILEPATHS[@]} -eq 0 ] 2>/dev/null; then
        echo-stderr "fatal: no files specified"
        help-usage >&2
        exit 1
    fi

    # If no refs are specified, use the current branch
    if [ ${#REFS[@]} -eq 0 ]; then
        REFS[0]=$(git rev-parse --abbrev-ref HEAD)
    fi

    local file
    local md5s=()
    # local echo_colors=(
    #     "g" "r" "b" "p" "c"
    #     "gB" "rB" "bB" "pB" "cB"
    #     "gU" "rU" "bU" "pU" "cU"
    #     "gR" "rR" "bR" "pR" "cR"
    #     "gBU" "rBU" "bBU" "pBU" "cBU"
    #     "gBR" "rBR" "bBR" "pBR" "cBR"
    #     "gUR" "rUR" "bUR" "pUR" "cUR"
    #     "gBUR" "rBUR" "bBUR" "pBUR" "cBUR"
    # )
    local echo_colors=(
        "\033[0;32m" "\033[0;31m" "\033[0;34m" "\033[0;35m" "\033[0;36m"
        "\033[1;32m" "\033[1;31m" "\033[1;34m" "\033[1;35m" "\033[1;36m"
        "\033[4;32m" "\033[4;31m" "\033[4;34m" "\033[4;35m" "\033[4;36m"
        "\033[7;32m" "\033[7;31m" "\033[7;34m" "\033[7;35m" "\033[7;36m"
        "\033[1;4;32m" "\033[1;4;31m" "\033[1;4;34m" "\033[1;4;35m" "\033[1;4;36m"
        "\033[1;7;32m" "\033[1;7;31m" "\033[1;7;34m" "\033[1;7;35m" "\033[1;7;36m"
        "\033[4;7;32m" "\033[4;7;31m" "\033[4;7;34m" "\033[4;7;35m" "\033[4;7;36m"
        "\033[1;4;7;32m" "\033[1;4;7;31m" "\033[1;4;7;34m" "\033[1;4;7;35m" "\033[1;4;7;36m"
    )
    local git_colors=(
        "green" "red" "yellow" "blue" "magenta" "cyan"
        
        "bold green" "bold red" "bold yellow"
        "bold blue" "bold magenta" "bold cyan" "bold white"
        
        "underline green" "underline red" "underline yellow" "underline blue"
        "underline magenta" "underline cyan" "underline white"
        
        "reverse green" "reverse red" "reverse yellow" "reverse blue"
        "reverse magenta" "reverse cyan" "reverse white"
        
        "bold underline green" "bold underline red" "bold underline yellow"
        "bold underline blue" "bold underline magenta" "bold underline cyan"
        "bold underline white"
        
        "bold reverse green" "bold reverse red" "bold reverse yellow"
        "bold reverse blue" "bold reverse magenta" "bold reverse cyan"
        "bold reverse white"
        
        "underline reverse green" "underline reverse red"
        "underline reverse yellow" "underline reverse blue"
        "underline reverse magenta" "underline reverse cyan"
        "underline reverse white"
        
        "bold underline reverse green" "bold underline reverse red"
        "bold underline reverse yellow" "bold underline reverse blue"
        "bold underline reverse magenta" "bold underline reverse cyan"
        "bold underline reverse white"
    )
    for filepath in "${FILEPATHS[@]}"; do
        local ref
        for ref in "${REFS[@]}"; do
            # Get the relative path to the file from the git root if the file
            # paths were not gathered from a commit
            local relpath
            if [ "${USE_REL_PATH}" -eq 1 ]; then
                relpath=$(git-relpath "${filepath}")
            else
                relpath="${filepath}"
            fi

            # Get the file contents at that ref
            local contents
            contents=$(git show "${ref}:${relpath}" 2>/dev/null)
            local file_exists=${?}

            # Use a silly "00000000000000000000000000000000" hash if the file is empty
            local md5
            if [ ${file_exists} -ne 0 ]; then
                md5="00000000000000000000000000000000"
            else
                md5=$(echo "${contents}" | md5sum - | cut -d' ' -f1)
            fi

            # If this is a new md5, add it to the list,
            # unless it is "000..."; for that we will always make it dim
            if [[ "${md5}" != "00000000000000000000000000000000" ]] && ! in-array "${md5}" "${md5s[@]}"; then
                # Add the md5 hash to the array
                md5s+=("${md5}")
            else
                if [ ${DO_UNIQUE} -eq 1 ]; then
                    continue
                fi
            fi

            # Get the index of the md5 hash in the array
            local md5_index=$(index-of "${md5}" "${md5s[@]}")

            # Determine the color to use
            local color_format
            local color_reset
            if [[ "${COLOR}" == "always" || ( "${COLOR}" == "auto" && __IS_PIPED -eq 0 ) ]]; then
	            if [ ${USE_ECHO_FORMATTED} -eq 1 ]; then
	                if [ ${DO_ALTERNATE} -eq 1 ]; then
                        # for "000..." we will always make it dim
                        if [[ "${md5}" == "00000000000000000000000000000000" ]]; then
                            color_format="\033[2m"
                        else
                            color_format="${echo_colors[${md5_index}]}"
                        fi
	                else
	                    color_format="${echo_colors[0]}"
	                fi
	                color_reset="\033[0m"
	            else
	                if [ ${DO_ALTERNATE} -eq 1 ]; then
                        if [[ "${md5}" == "00000000000000000000000000000000" ]]; then
                            color_format="%C(dim)"
                        else
                            color_format="%C(${git_colors[${md5_index}]})"
                        fi
	                else
	                    color_format="%C(${git_colors[0]})"
	                fi
	                color_reset="%C(reset)"
	            fi
	        fi

            local format=$(
                echo "${FORMAT}" \
                    | awk \
                        -v md5="${md5}" \
                        -v fp="${relpath}" \
                        -v ref="${ref}" \
                        -v color="${color_format}" \
                        -v reset="${color_reset}" '
                            {
                                # Replace `"%MD5"` with `color md5 reset`
                                gsub(/%MD5/, color md5 reset);
                                # Replace `"%fp"` with `fp`
                                gsub(/%fp/, fp);
                                # Replace `"%ref"` with `ref`
                                gsub(/%ref/, ref);
                                # Print the result
                                print;
                            }
                        '
            )

            echo "md5: ${md5}" >&3
            echo "filepath: ${filepath}" >&3
            echo "relpath: ${relpath}" >&3
            echo "color_format: ${color_format}" >&3
            echo "color_reset: ${color_reset}" >&3
            echo "format: ${format}" >&3

            # Then print the formatted line
            if [ "${USE_ECHO_FORMATTED}" -eq 1 ]; then
                # echo "<echoing data='${format}'>" >&3
                # export FMT_TEST="${format}"
                # ECHO_FORMATTED=${ECHO_FORMATTED_WHEN} echo-formatted $(echo ${format} | xargs)
                # echo "</echoing>" >&3
                printf "%s\n" "${format}"
            else
                echo "git -c color.ui='${COLOR}' log -1 '${ref}' --format='${format}'" >&3
                git -c color.ui="${COLOR}" log -1 "${ref}" --format="${format}"
            fi
        done
    done
}

## run #########################################################################
################################################################################

[ "${BASH_SOURCE[0]}" == "${0}" ] && (
    if [ -n "${DEBUG}" ]; then
        exec 3>&2
        main "${@}"
    else
        main "${@}" 3>/dev/null
    fi
)
