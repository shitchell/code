#!/usr/bin/env bash
#
# This script does some stuff with subcommands


## imports #####################################################################
################################################################################

include-source 'debug.sh'


## exit codes ##################################################################
################################################################################

declare -ri E_SUCCESS=0
declare -ri E_ERROR=1
declare -ri E_INVALID_OPTION=2
declare -ri E_INVALID_ACTION=3


## traps #######################################################################
################################################################################

# @description Silence all output
# @usage silence-output
function silence-output() {
    exec 3>&1 4>&2 1>/dev/null 2>&1
}

# @description Restore stdout and stderr
# @usage restore-output
function restore-output() {
    [[ -t 3 ]] && exec 1>&3 3>&-
    [[ -t 4 ]] && exec 2>&4 4>&-
}

# @description Exit trap
function trap-exit() {
    restore-output
}
trap trap-exit EXIT


## colors ######################################################################
################################################################################

# Determine if we're in a terminal
[[ -t 1 ]] && __IN_TERMINAL=true || __IN_TERMINAL=false

# @description Set up color variables
# @usage setup-colors
function setup-colors() {
    C_RED=$'\e[31m'
    C_GREEN=$'\e[32m'
    C_YELLOW=$'\e[33m'
    C_BLUE=$'\e[34m'
    C_MAGENTA=$'\e[35m'
    C_CYAN=$'\e[36m'
    C_WHITE=$'\e[37m'
    S_RESET=$'\e[0m'
    S_BOLD=$'\e[1m'
    S_DIM=$'\e[2m'
    S_UNDERLINE=$'\e[4m'
    S_BLINK=$'\e[5m'
    S_INVERT=$'\e[7m'
    S_HIDDEN=$'\e[8m'
}

# @description Unset color variables
# @usage unset-colors
function unset-colors() {
    unset C_RED C_GREEN C_YELLOW C_BLUE C_MAGENTA C_CYAN C_WHITE \
          S_RESET S_BOLD S_DIM S_UNDERLINE S_BLINK S_INVERT S_HIDDEN
}


## usage functions #############################################################
################################################################################

function help-usage() {
    # {{TODO: UPDATE USAGE}}
    echo "usage: $(basename "${0}") [-h] <action> [<action args>]"
}

function help-epilogue() {
    # {{TODO: UPDATE EPILOGUE}}
    echo "run subcommands with individual options"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "Actions:"
    cat << EOF
    help                      display this help message
    request                   send a request to the API
    get                       send a GET request to the API
    post                      send a POST request to the API
    is-up                     check if the API is up
    wait-up                   wait for the API to be up
EOF
    echo
    echo "Base Options:"
    cat << EOF
    -h                        display usage
    --help                    display this help message
    --config-file <file>      use the specified configuration file
    -c/--color <on|auto|off>  whether to use color output
    -s/--silent               suppress all output
    -V/--version <version>    the API version to use (default: sbx)
    -P/--protocol <protocol>  the protocol to use (default: https)
    -H/--host <domain>        the domain to use (default: devops.trinoor.com)
    -p/--port <port>          the port to use (default: 80 or 443 based on protocol)
    -e/--endpoint <endpoint>  the endpoint to use
    -t/--token <token>        the query string authentication token to use
    -d/--show-headers         show the request and response headers
EOF
    echo
    echo "For action specific options, run:"
    echo "    $(basename "${0}") help <action>"
}

function parse-args() {
    # Parse the arguments first for a config file to load default values from
    CONFIG_FILE="${HOME}/.$(basename "${0}").conf"
    for ((i=0; i<${#}; i++)); do
        case "${!i}" in
            -c | --config-file)
                let i++
                CONFIG_FILE="${!i}"
                ;;
        esac
    done
    [[ -f "${CONFIG_FILE}" ]] && source "${CONFIG_FILE}"

    # Default values
    ACTION=""
    ACTION_ARGS=()
    VERSION="${DEVAPI_VERSION:-sbx}"
    URL_PROTOCOL="${DEVAPI_PROTOCOL:-https}"
    URL_DOMAIN="${DEVAPI_HOST:-devops.trinoor.com}"
    URL_PORT=${DEVAPI_PORT}  # defaults to 80 or 443 based on the protocol
    URL_PATH=""
    URL=""  # server + port + "/api/" + version + endpoint
    TOKEN="${DEVAPI_TOKEN}"  # query string token
    DO_SHOW_HEADERS=${DEVAPI_SHOW_HEADERS:-true}
    DO_COLOR=${DEVAPI_COLOR:-auto}
    DO_SILENT=false
    local color_when="${COLOR:-auto}" # auto, on, yes, always, off, no, never

    # Loop over the arguments
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit ${E_SUCCESS}
                ;;
            --help)
                help-full
                exit ${E_SUCCESS}
                ;;
            --config-file)
                shift 1
                ;;
            -c | --color)
                color_when="${2}"
                shift 1
                ;;
            -s | --silent)
                DO_SILENT=true
                ;;
            -V | --version)
                VERSION="${2}"
                shift 1
                ;;
            -P | --protocol)
                URL_PROTOCOL="${2}"
                shift 1
                ;;
            -H | --host | --domain)
                URL_DOMAIN="${2}"
                shift 1
                ;;
            -p | --port)
                URL_PORT="${2}"
                shift 1
                ;;
            -e | --endpoint)
                URL_PATH="${2}"
                shift 1
                ;;
            -t | --token)
                TOKEN="${2}"
                shift 1
                ;;
            -d | --show-headers)
                DO_SHOW_HEADERS=true
                ;;
            -D | --no-show-headers)
                DO_SHOW_HEADERS=false
                ;;
            -*)
                echo "error: unknown option: ${1}" >&2
                return ${E_INVALID_OPTION}
                ;;
            *)
                ACTION="${1}"
                shift 1
                break
                ;;
        esac
        shift 1
    done

    # Any remaining arguments will be passed to the action function
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h | --help)
                __action-help "${ACTION}"
                exit ${E_SUCCESS}
                ;;
            *)
                ACTION_ARGS+=("${1}")
                ;;
        esac
        shift 1
    done

    # Ensure an action was specified
    if [[ -z "${ACTION}" ]]; then
        echo "error: no action specified" >&2
        help-full >&2
        return ${E_INVALID_ACTION}
    fi
    
    # If in silent mode, silence the output
    ${DO_SILENT} && silence-output

    # Set up colors
    if ! ${DO_SILENT}; then
        case "${color_when}" in
            on | yes | always)
                DO_COLOR=true
                ;;
            off | no | never)
                DO_COLOR=false
                ;;
            auto)
                if ${__IN_TERMINAL}; then
                    DO_COLOR=true
                else
                    DO_COLOR=false
                fi
                ;;
            *)
                echo "error: invalid color mode: ${color_when}" >&2
                return ${E_ERROR}
                ;;
        esac
        ${DO_COLOR} && setup-colors || unset-colors
    fi

    # If a port was not specified, set the default based on the protocol
    if [[ -z "${URL_PORT}" ]]; then
        case "${URL_PROTOCOL}" in
            http)
                URL_PORT=80
                ;;
            https)
                URL_PORT=443
                ;;
            ftp)
                URL_PORT=21
                ;;
            *)
                echo "error: invalid protocol: ${URL_PROTOCOL}" >&2
                return ${E_ERROR}
                ;;
        esac
    fi

    # Ensure the endpoint does not start with a slash *unless* it is set to "/"
    if [[ "${URL_PATH}" == "/"* && "${URL_PATH}" != "/" ]]; then
        URL_PATH="${URL_PATH#/}"
    fi

    return ${E_SUCCESS}
}


## helpful functions ###########################################################
################################################################################

# @description Do stuff
# @usage do-stuff
function do-stuff() {
    echo -n "i'm doin the stuff"
    [[ -n "${1}" ]] && echo " to ${1}" || echo
}

# @description Send a curl request to the API
# @usage api-request [<method> [<endpoint>]] [-- <curl options>...]
function api-request() {
    # Default values
    local method=""
    local endpoint="${URL_PATH}"
    local curl_cmd=curl
    local curl_opts=(-s)

    # Loop over the arguments
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            --)
                shift 1
                break
                ;;
            *)
                if [[ -z "${method}" ]]; then
                    method="${1}"
                elif [[ -z "${endpoint}" ]]; then
                    endpoint="${1}"
                else
                    curl_opts+=("${1}")
                fi
                ;;
        esac
        shift 1
    done

    # Collect any remaining arguments as curl options
    [[ ${#} -gt 0 ]] && curl_opts+=("${@}")

    # Set the default method if not specified
    [[ -z "${method}" ]] && method="GET"

    # Build the URL
    local url="${URL_PROTOCOL}://${URL_DOMAIN}:${URL_PORT}"
    [[ -n "${VERSION}" ]] && url+="/api/${VERSION}"
    if [[ -n "${endpoint}" ]]; then
        endpoint="${endpoint#/}"
        url+="/${endpoint}"
    fi

    # Add the token
    if [[ -n "${TOKEN}" ]]; then
        if [[ "${url}" == *"?"* ]]; then
            url="${url}&token=${TOKEN}"
        else
            url="${url}?token=${TOKEN}"
        fi
    fi

    # Determine the curl command to use
    ${DO_SHOW_HEADERS} && curl_cmd=curl-headers

    # Send the request
    debug-vars curl_cmd method curl_opts url
    ${curl_cmd} "${curl_opts[@]}" "${url}"
}

# @description Curl a URL with headers, awk'ing out the stuff we don't want
# @usage curl-headers <url>
function curl-headers() {
    local curl_opts=( "${@}" )
    curl_opts+=(-v -s)

    curl "${curl_opts[@]}" 2>&1 \
        | awk -v bold="${S_BOLD}" -v rst="${S_RESET}" \
              -v resp="${C_CYAN}" -v req="${C_GREEN}" '
            BEGIN {
                in_headers = "true"
            }
            {
                if (in_headers) {
                    # Check if we are at the end of the headers
                    if ($0 ~ /^\* Connection .*? to host .*? left intact$/) {
                        in_headers = ""
                        next
                    }

                    # If the line is a request/response header, print it
                    if ($0 ~ /^[<>] /) {
                        # Get the prefix
                        prefix = substr($0, 1, 1)

                        # Determine the colors based on the prefix
                        if (prefix == ">") {
                            color = req
                        } else {
                            color = resp
                        }

                        # Get the header name and value
                        match($0, /^([<>]) ([^:]+): (.*)/, parts)
                        header = parts[2]
                        value = parts[3]

                        if (header && value) {
                            # print "[debug] " $0 > "/dev/stderr"
                            # print "[debug] p: " prefix " h: " header " v: " value > "/dev/stderr"

                            # Print the header in the format:
                            #  {color}> {bold}{header}{rst}{color}: {value}{rst}
                            printf("%s%s %s%s%s%s: %s%s\n",
                                color, prefix, bold,
                                header, rst, color, value, rst);
                        } else {
                            # If there was no match, just print the line
                            printf("%s%s%s\n", color, $0, rst);
                        }

                    }
                } else {
                    print
                }
            }
        '
}


## action functions ############################################################
################################################################################

# {{TODO: INSERT __action-* AND __help-* FUNCTIONS HERE}}

# Just show the help
function __help-help() {
    echo "usage: $(basename "${0}") help [<action>]"
    echo
    echo "Display help for the specified action or for $(basename "${0}") if no"
    echo "action is specified."
}

function __action-help() {
    local action="${1}"

    # If an action was specified, show the help for that action
    if [[ -n "${action}" ]]; then
        local help_function="__help-${action}"
        # Verify the help function exists
        if type -t "${help_function}" &>/dev/null; then
            # Call the help function and exit
            "${help_function}"
        else
            echo "error: no help found for action: ${action}" >&2
            return ${E_INVALID_ACTION}
        fi
    else
        # Otherwise, show the full help
        help-full
    fi
}

function __help-_test() {
    echo "usage: $(basename "${0}") _test [-h]"
    echo
    echo "Do stuff."
    echo
    echo "Options:"
    cat << EOF
    -h                       display usage
    --help                   display this help message
    -m/--message <msg>       the message to print
EOF
}

function __action-request() {
    api-request "${ACTION_ARGS[@]}"
}

function __help-request() {
    echo "usage: $(basename "${0}") request [-h] [<method> [<endpoint>]] [-- <curl options>...]"
    echo
    echo "Send a request to the API."
}

function __action-get() {
    api-request GET "${ACTION_ARGS[@]}"
}

function __help-get() {
    echo "usage: $(basename "${0}") get [-h] [<endpoint>] [-- <curl options>...]"
    echo
    echo "Send a GET request to the API."
}

function __action-post() {
    api-request POST "${ACTION_ARGS[@]}"
}

function __help-post() {
    echo "usage: $(basename "${0}") post [-h] [<endpoint>] [-- <curl options>...]"
    echo
    echo "Send a POST request to the API."
}

function __action-is-up() {
    local response=""
    local status=""
    
    response=$(
        DO_SHOW_HEADERS=false api-request GET / -- --max-time 3
    )
    debug "response: ${response}"
    if [[ "${response}" =~ "Faithfully yours, nginx" ]]; then
        debug "Faithfully yours, nginx"
        response=""
    fi
    status="${S_BOLD}"
    if [[ -z "${response}" ]]; then
        status+="${C_RED}DOWN${S_RESET}"
    else
        status+="${C_GREEN}UP${S_RESET}"
    fi

    echo "API (${VERSION}) is ${status}"
    [[ -n "${response}" ]]
}

function __help-is-up() {
    echo "usage: $(basename "${0}") is-up [-h]"
    echo
    echo "Check if the API is up."
}

function __action-wait-up() {
    local is_up=false
    local response=""
    local tries=0

    while ! ${is_up}; do
        response=$(__action-is-up)
        ((${?} == 0)) && is_up=true
        if ! ${is_up}; then
            printf "."
            ((tries++))
            sleep 1
        fi
    done
    ((tries > 0)) && echo

    echo "${response}"
}

function __help-wait-up() {
    echo "usage: $(basename "${0}") wait-up [-h]"
    echo
    echo "Wait for the API to be up."
}

function __action-_test() {
    # Default values
    local message="hello world"

    # Loop over the arguments
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -m | --message)
                message="${2}"
                shift 1
                ;;
            -*)
                echo "error: unknown option: ${1}" >&2
                return ${E_INVALID_OPTION}
                ;;
            *)
                echo "error: unexpected argument: ${1}" >&2
                return ${E_INVALID_OPTION}
                ;;
        esac
        shift 1
    done

    echo "${message}"
}


## main ########################################################################
################################################################################

function main() {
    parse-args "${@}" || return ${?}

    local exit_code=${E_SUCCESS}

    # Find the action function
    local action_func="__action-${ACTION}"

    # Verify the action function exists
    if type -t "${action_func}" &>/dev/null; then
        # Call the action function
        "${action_func}" "${ACTION_ARGS[@]}"
        exit_code=${?}
    else
        echo "error: no such action function found: ${ACTION}" >&2
        exit_code=${E_INVALID_ACTION}
    fi

    return ${exit_code}
}


## run #########################################################################
################################################################################

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"
