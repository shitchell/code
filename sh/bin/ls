#!/usr/bin/env bash
#
# A wrapper around the `ls` command that adds support for per-directory `.ls`
# files. These files can contain options to be passed to `ls` when it is run in
# that directory.


## imports #####################################################################
################################################################################

include-source 'debug.sh'


## exit codes ##################################################################
################################################################################

declare -ri E_SUCCESS=0
declare -ri E_ERROR=1


## usage functions #############################################################
################################################################################

function help-usage() {
    echo "usage: $(basename "${0}") [-h] [<ls options>] [<path> ...]"
}

function help-epilogue() {
    echo "do stuff"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "Some extra info."
    echo
    echo "Options:"
    cat << EOF
    -h                      display usage
    --help                  display this help message
    -*                      any other argument is passed to ls
EOF
}

function parse-args() {
    # Default values
    LS_ALIAS_OPTS=()
    LS_OPTS=( "${LS_OPTS[@]}" )
    DIRPATHS=()
    FILEPATHS=()
    
    # We will intercept the -R/--recursive option and handle it ourselves so
    # that we can check for .ls files in subdirectories
    DO_RECURSIVE=false

    # Determine if there are any aliased options to pass to `ls`
    IFS=" " LS_ALIAS_OPTS=(
        $(type -a ls | grep -oP "(?<=aliased to \`ls )[^']+")
    )
    LS_OPTS+=( "${LS_ALIAS_OPTS[@]}" )

    # Loop over the arguments
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit ${E_SUCCESS}
                ;;
            --help)
                help-full
                exit ${E_SUCCESS}
                ;;
            -R | --recursive)
                DO_RECURSIVE=true
                shift 1
                ;;
            --)
                shift 1
                break
                ;;
            -*)
                LS_OPTS+=("${1}")
                ;;
            *)
                [[ -d "${1}" ]] && DIRPATHS+=("${1}") || FILEPATHS+=("${1}")
                ;;
        esac
        shift 1
    done

    # If -- was used, collect the remaining arguments
    while [[ ${#} -gt 0 ]]; do
        [[ -d "${1}" ]] && DIRPATHS+=("${1}") || FILEPATHS+=("${1}")
        shift 1
    done

    # If no filepaths or directories were given, use the current directory
    [[ ${#DIRPATHS[@]} -eq 0 && ${#FILEPATHS[@]} -eq 0 ]] && DIRPATHS+=(".")

    return ${E_SUCCESS}
}


## helpful functions ###########################################################
################################################################################

# @description Get the ls options for a directory
# @usage ls-opts <dirpath>
function ls-opts() {
    local directory="${1:-.}"
    local ls_file="${directory}/.ls"
    local ls_opts=( "${LS_OPTS[@]}" )

    if [[ -f "${ls_file}" ]]; then
        # Remove any comments and blank lines. Then remove any '^ls\b' from the
        # beginning of each line
        ls_file_opts=(
            $(
                sed -e 's/#.*$  //' -e '/^$/d' -e 's/^ls\b//' "${ls_file}" \
                    | xargs
            )
        )
        ls_opts+=( "${ls_file_opts[@]}" )
    fi

    debug "${ls_file}: ${ls_file_opts[*]}"

    [[ ${#ls_opts[@]} -gt 0 ]] && echo "${ls_opts[@]}"
}


## main ########################################################################
################################################################################

function main() {
    parse-args "${@}" || return ${?}

    debug-vars "DIRPATHS" "FILEPATHS" "LS_ALIAS_OPTS" "LS_OPTS" "DO_RECURSIVE"

    # Loop over the filepaths first, grouping them by directory and then running
    # `ls` on them using the options from their parent directory's `.ls` file
    local dir=""
    local last_dir=""
    local filepath=""
    local dir_ls_opts=()
    local dir_files=()

    for filepath in "${FILEPATHS[@]}"; do
        dir="${filepath%/*}"
        if [[ -n "${last_dir}" && "${dir}" != "${last_dir}" ]]; then
            dir_ls_opts=( $(ls-opts "${last_dir}") )
            debug "ls ${dir_ls_opts[*]} ${dir_files[*]}"
            /bin/ls "${dir_ls_opts[@]}" "${dir_files[@]}"
            dir_files=()
        fi
        dir_files+=("${filepath}")
        last_dir="${dir}"
    done
    if [[ ${#dir_files[@]} -gt 0 ]]; then
        dir_ls_opts=( $(ls-opts "${last_dir}") )
        debug "ls ${dir_ls_opts[*]} ${dir_files[*]}"
        /bin/ls "${dir_ls_opts[@]}" "${dir_files[@]}"
    fi

    # Loop over the directories and run `ls` on them using the options from
    # their `.ls` files
    local is_first=true
    for dirpath in "${DIRPATHS[@]}"; do
        dir_ls_opts=( $(ls-opts "${dirpath}") )

        # If there are multiple directories, print the directory name and a
        # colon
        if [[ ${#DIRPATHS[@]} -gt 1 ]]; then
            ${is_first} && is_first=false || echo
            printf "%s:\n" "${dirpath}"
        fi
        debug "ls ${dir_ls_opts[*]} ${dirpath}"
        /bin/ls "${dir_ls_opts[@]}" "${dirpath}"

        # If the recursive option was used, run `ls` on the subdirectories
        if [[ "${DO_RECURSIVE}" == "true" ]]; then
            for filepath in "${dirpath}"/*; do
                if [[ -d "${filepath}" ]]; then
                    debug "recursing into ${filepath}"
                    ls "${LS_OPTS[@]}" "${filepath}"
                fi
            done
        fi
    done
}


## run #########################################################################
################################################################################

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"
