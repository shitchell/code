#!/bin/bash
#
# Loop over a list of files in a git repo and update their timestamps to match
# their respective git commit timestamps.

## usage functions #############################################################
################################################################################

function help-epilogue() {
    echo "update the timestamps of files to match their respective git commit timestamps"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "Updates the timestamps of files to match their most recent git commit"
    echo "timestamps. Any options specified other than the options listed below"
    echo "are passed to \`git log\` when searching for the commit timestamp."
    echo
    cat << EOF
    -h / --help          display this help message
    <git log options>    any options that can be passed to \`git log\`
    --                   treat all remaining arguments as files
EOF
}

function help-usage() {
    echo "usage: $(basename $0) [-h] [git log options] [--] file1 [file2] ..."
}

function parse-args() {
    # Loop over the arguments
    declare -ga FILEPATHS
    declare -ga GIT_LOG_OPTS
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h | --help)
                help-full
                exit 0
                ;;
            --)
                shift 1
                break
                ;;
            -*)
                GIT_LOG_OPTS+=("${1}")
                exit 1
                ;;
            *)
                FILEPATHS+=("${1}")
                shift 1
                ;;
        esac
    done

    # If any arguments were left over, treat them as files
    if [ ${#} -gt 0 ]; then
        FILEPATHS+=("${@}")
    fi

    # For time savings
    GIT_TOPLEVEL=$(git rev-parse --show-toplevel)

    # If no filepaths were specified, use the git root
    if [[ ${#FILEPATHS[@]} -eq 0 ]]; then
        FILEPATHS=( "${GIT_TOPLEVEL}" )
    fi
}


## helpful functions ###########################################################
################################################################################

# @description Update the timestamp of a file to its last author commit date
# @usage update-timestamp <filepath> [<git options>]
function update-timestamp() {
    local filepath="${1}"
    local git_opts=()
    local timestamp

    # Collect the remaining git log options
    shift 1
    if [[ ${#} -gt 0 ]]; then
        git_opts=( "${@}" )
    else
        git_opts=( "${GIT_LOG_OPTS[@]}" )
    fi

    if [[ -z "${filepath}" ]]; then
        echo "error: no filepath specified" >&2
        return 1
    fi

    # Check that the filepath exists
    ! [[ -e "${filepath}" ]] && return 1

    timestamp=$(
        git log \
            "${git_opts[@]}" \
            -n 1 \
            --date=format:%Y%m%d%H%M.%S \
            --pretty=format:%ad \
            --date-order \
                "${GIT_LOG_OPTS[@]}" \
            -- "${filepath}"
    )

    if [[ -z "${timestamp}" ]]; then
        return 1
    fi

    touch -m -t "${timestamp}" "${filepath}"

    echo "${timestamp}"
}


## main ########################################################################
################################################################################

function main() {
    parse-args "${@}"

    local line sub_filepath timestamp
    # Since ls-tree returns filepaths relative to the git root, ensure that we
    # can convert those paths into paths relative to the current directory
    local git_toplevel_rel=$(realpath --relative-to=. "${GIT_TOPLEVEL}")

    for filepath in "${FILEPATHS[@]}"; do
        # If the file is a directory, then descend recursively
        if [[ -d "${filepath}" ]]; then
            git ls-tree -r --full-tree HEAD | while read -r line; do
                sub_filepath="${git_toplevel_rel}/${line#*$'\t'}"
                printf '%s => ' "${sub_filepath}"
                update-timestamp "${sub_filepath}"
            done
        else
            printf '%s => ' "${filepath}"
            update-timestamp "${filepath}"
        fi
    done
}


## run #########################################################################
################################################################################

[ "${BASH_SOURCE[0]}" == "${0}" ] && main "${@}"
