#!/usr/bin/env bash
#
# Read an SSL cert from a file or server and print out the details


## imports #####################################################################
################################################################################

include-source 'debug.sh'


## exit codes ##################################################################
################################################################################

declare -ri E_SUCCESS=0
declare -ri E_ERROR=1


## traps #######################################################################
################################################################################

# @description Silence all output
# @usage silence-output
function silence-output() {
    exec 3>&1 4>&2 1>/dev/null 2>&1
}

# @description Restore stdout and stderr
# @usage restore-output
function restore-output() {
    [[ -t 3 ]] && exec 1>&3 3>&-
    [[ -t 4 ]] && exec 2>&4 4>&-
}

# @description Exit trap
function trap-exit() {
    restore-output
}
trap trap-exit EXIT


## colors ######################################################################
################################################################################

# Determine if we're in a terminal
[[ -t 1 ]] && __IN_TERMINAL=true || __IN_TERMINAL=false

# @description Set up color variables
# @usage setup-colors
function setup-colors() {
    C_RED=$'\e[31m'
    C_GREEN=$'\e[32m'
    C_YELLOW=$'\e[33m'
    C_BLUE=$'\e[34m'
    C_MAGENTA=$'\e[35m'
    C_CYAN=$'\e[36m'
    C_WHITE=$'\e[37m'
    S_RESET=$'\e[0m'
    S_BOLD=$'\e[1m'
    S_DIM=$'\e[2m'
    S_UNDERLINE=$'\e[4m'
    S_BLINK=$'\e[5m'
    S_INVERT=$'\e[7m'
    S_HIDDEN=$'\e[8m'
}

# @description Unset color variables
# @usage unset-colors
function unset-colors() {
    unset C_RED C_GREEN C_YELLOW C_BLUE C_MAGENTA C_CYAN C_WHITE \
          S_RESET S_BOLD S_DIM S_UNDERLINE S_BLINK S_INVERT S_HIDDEN
}


## usage functions #############################################################
################################################################################

function help-usage() {
    # {{TODO: UPDATE USAGE}}
    echo "usage: $(basename "${0}") [-h]"
}

function help-epilogue() {
    echo "do stuff"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "Some extra info."
    echo
    echo "Options:"
    cat << EOF
    -h                    display usage
    --help                display this help message
    -c/--color <when>     when to use color ("auto", "always", "never")
EOF
}

function parse-args() {
    # Default values
    CERTS=()
    DO_COLOR=false
    DO_SILENT=false
    local color_when="${COLOR:-auto}" # auto, on, yes, always, off, no, never

    # Loop over the arguments
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit ${E_SUCCESS}
                ;;
            --help)
                help-full
                exit ${E_SUCCESS}
                ;;
            -c | --color)
                color_when="${2}"
                shift 1
                ;;
            --)
                shift 1
                break
                ;;
            -*)
                echo "error: unknown option: ${1}" >&2
                return ${E_ERROR}
                ;;
            *)
                CERTS+=("${1}")
                ;;
        esac
        shift 1
    done

    # If -- was used, collect the remaining arguments
    while [[ ${#} -gt 0 ]]; do
        CERTS+=("${1}")
        shift 1
    done

    # Set up colors
    if ! ${DO_SILENT}; then
        case "${color_when}" in
            on | yes | always)
                DO_COLOR=true
                ;;
            off | no | never)
                DO_COLOR=false
                ;;
            auto)
                if ${__IN_TERMINAL}; then
                    DO_COLOR=true
                else
                    DO_COLOR=false
                fi
                ;;
            *)
                echo "error: invalid color mode: ${color_when}" >&2
                return ${E_ERROR}
                ;;
        esac
        ${DO_COLOR} && setup-colors || unset-colors
    fi

    # Ensure we have at least one cert
    if [[ ${#CERTS[@]} -eq 0 ]]; then
        echo "error: no certs specified" >&2
        return ${E_ERROR}
    fi

    return ${E_SUCCESS}
}


## helpful functions ###########################################################
################################################################################

# @description Read an SSL cert from a file or server and print out the details
# @usage read-cert <cert>
function read-cert() {
    local cert="${1}"

    if [[ -z "${cert}" ]]; then
        echo "error: no cert specified" >&2
        return 1
    fi

    # If the cert is a file, read it
    if [[ -f "${cert}" ]]; then
        openssl x509 -in "${cert}" -noout -text
        return
    fi

    # If it doesn't have any slashes and *does* have at least one ".", assume
    # it's a domain name
    if [[ "${cert}" != */* && "${cert}" == *.* ]]; then
        echo \
            | openssl s_client \
                -servername "${cert}" -connect "${cert}":443 2>/dev/null \
            | openssl x509 -text
        return
    fi

    echo "error: unknown cert type: ${cert}" >&2
}

## main ########################################################################
################################################################################

function main() {
    parse-args "${@}" || return ${?}

    for cert in "${CERTS[@]}"; do
        echo "## ${S_BOLD}${cert}${S_RESET}"
        read-cert "${cert}"
    done
}


## run #########################################################################
################################################################################

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"
