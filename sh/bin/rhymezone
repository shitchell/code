#!/usr/bin/env bash
#
# Look up rhymes for a word via RhymeZone


## imports #####################################################################
################################################################################

include-source 'debug.sh'
include-source 'text.sh'


## exit codes ##################################################################
################################################################################

declare -ri E_SUCCESS=0
declare -ri E_ERROR=1


## traps #######################################################################
################################################################################

# @description Silence all output
# @usage silence-output
function silence-output() {
    exec 3>&1 4>&2 1>/dev/null 2>&1
}

# @description Restore stdout and stderr
# @usage restore-output
function restore-output() {
    [[ -t 3 ]] && exec 1>&3 3>&-
    [[ -t 4 ]] && exec 2>&4 4>&-
}

# @description Exit trap
function trap-exit() {
    restore-output
}
trap trap-exit EXIT


## colors ######################################################################
################################################################################

# Determine if we're in a terminal
[[ -t 1 ]] && __IN_TERMINAL=true || __IN_TERMINAL=false

# @description Set up color variables
# @usage setup-colors
function setup-colors() {
    C_RED=$'\e[31m'
    C_GREEN=$'\e[32m'
    C_YELLOW=$'\e[33m'
    C_BLUE=$'\e[34m'
    C_MAGENTA=$'\e[35m'
    C_CYAN=$'\e[36m'
    C_WHITE=$'\e[37m'
    S_RESET=$'\e[0m'
    S_BOLD=$'\e[1m'
    S_DIM=$'\e[2m'
    S_UNDERLINE=$'\e[4m'
    S_BLINK=$'\e[5m'
    S_INVERT=$'\e[7m'
    S_HIDDEN=$'\e[8m'
}

# @description Unset color variables
# @usage unset-colors
function unset-colors() {
    unset C_RED C_GREEN C_YELLOW C_BLUE C_MAGENTA C_CYAN C_WHITE \
          S_RESET S_BOLD S_DIM S_UNDERLINE S_BLINK S_INVERT S_HIDDEN
}


## usage functions #############################################################
################################################################################

function help-usage() {
    # {{TODO: UPDATE USAGE}}
    echo "usage: $(basename "${0}") [-h]"
}

function help-epilogue() {
    # {{TODO: UPDATE EPILOGUE}}
    echo "search for rhymes using RhymeZone"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "Options:"
    cat << EOF
    -h                      display usage
    --help                  display this help message
    -c/--color <when>       when to use color ("auto", "always", "never")
    -n/--near               include near rhymes
    -p/--phrases            include phrases
    -r/--rare               include rare words
    -c/--category <name>    only include matches in this category
    -u/--popularity <n>     only include matches with at least this popularity
    -s/--score <n>          only include matches with at least this match score
    -S/--show-score         show the match score
EOF
}

function parse-args() {
    # Default values
    # {{TODO: INSERT DEFAULT VALUES HERE}}
    INCLUDE_NEAR=false
    INCLUDE_PHRASES=false
    INCLUDE_RARE=false
    CATEGORIES=()
    MINIMUM_POPULARITY=0
    MINIMUM_SCORE=0
    WORD=""
    DO_COLOR=false
    local color_when="${COLOR:-auto}" # auto, on, yes, always, off, no, never

    # Loop over the arguments
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit ${E_SUCCESS}
                ;;
            --help)
                help-full
                exit ${E_SUCCESS}
                ;;
            -c | --color)
                color_when="${2}"
                shift 1
                ;;
            -n | --near)
                INCLUDE_NEAR=true
                ;;
            -N | --no-near)
                INCLUDE_NEAR=false
                ;;
            -p | --phrases)
                INCLUDE_PHRASES=true
                ;;
            -P | --no-phrases)
                INCLUDE_PHRASES=false
                ;;
            -r | --rare)
                INCLUDE_RARE=true
                ;;
            -R | --no-rare)
                INCLUDE_RARE=false
                ;;
            -c | --category)
                CATEGORIES+=("${2}")
                shift 1
                ;;
            -u | --popularity)
                MINIMUM_POPULARITY="${2}"
                shift 1
                ;;
            -s | --score)
                MINIMUM_SCORE="${2}"
                shift 1
                ;;
            --)
                shift 1
                break
                ;;
            -*)
                echo "error: unknown option: ${1}" >&2
                return ${E_ERROR}
                ;;
            *)
                WORD="${1}"
                ;;
        esac
        shift 1
    done

    # If -- was used, collect the remaining arguments
    while [[ ${#} -gt 0 ]]; do
        WORD="${1}"
        shift 1
    done

    # Set up colors
    case "${color_when}" in
        on | yes | always)
            DO_COLOR=true
            ;;
        off | no | never)
            DO_COLOR=false
            ;;
        auto)
            if ${__IN_TERMINAL}; then
                DO_COLOR=true
            else
                DO_COLOR=false
            fi
            ;;
        *)
            echo "error: invalid color mode: ${color_when}" >&2
            return ${E_ERROR}
            ;;
    esac
    ${DO_COLOR} && setup-colors || unset-colors

    # Ensure a word was specified
    if [[ -z "${WORD}" ]]; then
        echo "error: no word specified" >&2
        return ${E_ERROR}
    fi

    return ${E_SUCCESS}
}


## helpful functions ###########################################################
################################################################################

function fetch-rhymes() {
    : 'Fetch rhymes for a word

    @usage <word>
    @arg   <word>
        The word to look up
    @stdout
        A JSON object with the results
    '
    local word="${1}"
    local url=""

    url+="https://www.rhymezone.com/api/words?"
    url+="k=rza&arhy=1&max=1000&qe=sl&md=fpdlr&sl="
    url+=$(urlencode "${word}")

    curl "${url}"
}

function parse-rhymes() {
    : 'Parse the RhymeZone JSON search results

    Accept a RhymeZone JSON search result object, parse it, and filter the
    results based on the provided criteria.

    @usage <json> <near> <phrases> <rare> <popularity> <score> <categories ...>
    @arg   <near>
        "true" or "false" -- Include near rhymes
    @arg   <phrases>
        "true" or "false" -- Include phrases
    @arg   <rare>
        "true" or "false" -- Include rare words
    @arg   <popularity>
        The minimum popularity score
    @arg   <score>
        The minimum rhyme score
    @arg   <categories ...>
        The categories to include
    '
    local json="${1}"
    local near="${2:-}"
    local phrases="${3}"
    local rare="${4}"
    local popularity="${5}"
    local score="${6}"
    local categories=("${@:7}")

    ## The JSON object takes the format:
    ## 
    ##     [
    ##         {
    ##             "word": "foo",
    ##             "score": 80,
    ##             "tags": [
    ##                 "n",
    ##                 "pron:F UW1 ",
    ##                 "f:0.346634"
    ##             ],
    ##             "defs": [
    ##                 "n\t(programming) A metasyntactic variable ..."
    ##             ]
    ##         },
    ##         {
    ##             "word": "to",
    ##             ...
    ##         },
    ##         ...
    ##     ]
    ##
    ## Description of components:
    ## - "word": the result word
    ## - "score": the rhyme match score, an integer between 0-100
    ## - tags:
    ##   - "query": this word/result is the search query itself
    ##   - "n": noun
    ##   - "v": verb
    ##   - "adv": adverb
    ##   - "adj": adjective
    ##   - "prop": proper noun
    ##   - "pron:...": pronunciation
    ##   - "f:...": frequency (per million) / popularity
    ##   - "l:...": ??
    ##
    ## If no part of speech tag is present, RhymeZone marks the word as "Other".
}


## main ########################################################################
################################################################################

function main() {
    parse-args "${@}" || return ${?}

    for filepath in "${FILEPATHS[@]}"; do
        do-stuff "${filepath}"
    done
}


## run #########################################################################
################################################################################

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"
