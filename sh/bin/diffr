#!/bin/bash
#
# Use `diff` recursively to compare two directories

## usage functions #############################################################
################################################################################

function help-epilogue() {
    echo "show a recursive diff of two directories"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "These are some custom options specific to diffr. Most other options"
    echo "are simply passed to diff. However, due to required formatting,"
    echo "some options are ignored. The below are the most useful unignored"
    echo "options, but it is not an exhaustive list."
    echo
    echo "* indicates an option on the todo list"
    echo
    echo "Custom options:"
    cat <<EOF
    -h                            display usage
    --help                        display this help message
    --color WHEN                  colorize the output (WHEN is 'always', 'never',
                                  or 'auto')
    -O/--show-opts                show the options that are passed to `diff` on
                                  each invocation
   *--no-color                    don't colorize the output
   *-r/--reverse                  reverse the order of the output
   *-R/--no-reverse               don't reverse the order of the output
   *--show-timestamps             show timestamps in the output
   *--git-timestamps              if either directory is a git repo, use git to
                                  determine the timestamps
   *--strftime <format>           use <format> as the timestamp format
   --exclude-empty-dirs           exclude empty dirs from the output
EOF
    echo
    echo "Allowed diff options:"
    cat <<EOF
   *-q/--brief                    report only when files differ
    -s/--report-identical-files   report when two files are the same
   *-c / -C NUM / --context NUM   output NUM (default 3) lines of copied context
   *-u / -U NUM / --unified NUM   output NUM (default 3) lines of unified context
    -t/--expand-tabs              expand tabs to spaces in output
    -T/--initial-tab              make tabs line up by prepending a tab
    -i/--ignore-case              ignore case differences in file contents
    -E/--ignore-tab-expansion     ignore changes due to tab expansion
    -Z/--ignore-trailing-space    ignore white space at line end
    -b/--ignore-space-change      ignore changes in the amount of white space
    -w/--ignore-all-space         ignore all white space
    -B/--ignore-blank-lines       ignore changes whose lines are all blank
    -I REGEXP / --ignore-matching-lines REGEXP
                                  ignore changes whose lines all match REGEXP
    --strip-trailing-cr           remove carriage return characters
    -x REGEXP / --exclude REGEXP  exclude files matching REGEXP
EOF
}

function help-usage() {
    # Only show the custom options in the usage, and insert a generic
    # [diff options] for the rest
    echo "usage: $(basename $0) [-hcCrRt] [diff options] dir1 dir2"
}

function parse-args() {
    # Default values
    DO_COLOR="always" # auto, always, never
    DO_REVERSE=0
    DO_SHOW_TIMESTAMPS=0
    DO_GIT_TIMESTAMPS=0
    DO_SHOW_OPTS=0
    DO_EXCLUDE_EMPTY_DIRS=0
    STRFTIME="%Y-%m-%d %H:%M:%S"
    DIFF_OPTS=()
    LABELS=()

    # Loop over the arguments
    declare -ga DIRECTORIES
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
        -h)
            help-usage
            help-epilogue
            exit 0
            ;;
        --help)
            help-full
            exit 0
            ;;
        --color)
            DO_COLOR=${2}
            shift 2
            ;;
        -r | --reverse)
            DO_REVERSE=1
            shift 1
            ;;
        -R | --no-reverse)
            DO_REVERSE=0
            shift 1
            ;;
        --show-timestamps)
            DO_SHOW_TIMESTAMPS=1
            shift 1
            ;;
        --git-timestamps)
            DO_GIT_TIMESTAMPS=1
            shift 1
            ;;
        -O | --show-opts)
            DO_SHOW_OPTS=1
            shift 1
            ;;
        --strftime)
            STRFTIME=${2}
            shift 2
            ;;
        --exclude-empty-dirs)
            DO_EXCLUDE_EMPTY_DIRS=1
            shift 1
            ;;
        # -c | -u | \
        -q | --brief | \
        -t | --expand-tabs | \
        -T | --initial-tab | \
        -i | --ignore-case | \
        -E | --ignore-tab-expansion | \
        -Z | --ignore-trailing-space | \
        -b | --ignore-space-change | \
        -w | --ignore-all-space | \
        -B | --ignore-blank-lines | \
        -s | --report-identical-files)
            # These diff options are allowed
            DIFF_OPTS+=("${1}")
            shift 1
            ;;
        # -C | --context | \
        # -U | --unified | \
        -I | --ignore-matching-lines | \
        --strip-trailing-cr | --color | \
        -x | --exclude)
            # These diff options are allowed, but require an argument
            DIFF_OPTS+=("${1}" "${2}")
            shift 2
            ;;
        --label)
            # We need to track the labels to use as the directory names
            LABELS+=("${2}")
            shift 2
            ;;
        -*)
            echo "error: unknown option ${1}" >&2
            help-usage >&2
            exit 1
            ;;
        *)
            # Strip any trailing slashes
            DIRECTORIES+=("${1%/}")
            shift 1
            ;;
        esac
    done

    echo "DIRECTORIES: $(printf "%q " "${DIRECTORIES[@]}")" >&3
    echo "DO_COLOR: ${DO_COLOR}" >&3
    echo "DO_REVERSE: ${DO_REVERSE}" >&3
    echo "DO_SHOW_TIMESTAMPS: ${DO_SHOW_TIMESTAMPS}" >&3
    echo "STRFTIME: ${STRFTIME}" >&3
    echo "DIFF_OPTS: $(printf "%q " "${DIFF_OPTS[@]}")" >&3

    # Check that we have exactly two directories
    if [[ ${#DIRECTORIES[@]} -ne 2 ]]; then
        echo "error: exactly two directories must be specified" >&2
        help-usage >&2
        exit 1
    fi

    # Check that the directories exist
    for DIR in "${DIRECTORIES[@]}"; do
        if [[ ! -d "${DIR}" ]]; then
            echo "error: ${DIR} is not a directory" >&2
            exit 1
        fi
    done

    # Check that the absolute paths of the directories are different
    if [[ $(realpath "${DIRECTORIES[0]}") == $(realpath "${DIRECTORIES[1]}") ]]; then
        echo "error: the two directories must be different" >&2
        exit 1
    fi
}

## helpful functions ###########################################################
################################################################################



## main ########################################################################
################################################################################

function main() {
    # Parse the arguments
    parse-args "${@}"

    local left_dir="${DIRECTORIES[0]}"
    local right_dir="${DIRECTORIES[1]}"
    local left_dir_name="${LABELS[0]:-$(basename "${left_dir}")}"
    local right_dir_name="${LABELS[1]:-$(basename "${right_dir}")}"

    # Determine if either directory is a git repository
    local left_is_git=0
    local right_is_git=0
    if git -C "${left_dir}" rev-parse --is-inside-work-tree &>/dev/null; then
        left_is_git=1
    fi
    if git -C "${right_dir}" rev-parse --is-inside-work-tree &>/dev/null; then
        right_is_git=1
    fi

    diff -r "${left_dir}" "${right_dir}" "${DIFF_OPTS[@]}" |
        awk -v left_path="${left_dir}" -v right_path="${right_dir}" \
            -v left="${left_dir_name}" -v right="${right_dir_name}" \
            -v left_is_git="${left_is_git}" -v right_is_git="${right_is_git}" \
            -v color="${DO_COLOR}" -v reverse="${DO_REVERSE}" \
            -v show_timestamps="${DO_SHOW_TIMESTAMPS}" -v tfmt="${STRFTIME}" \
            -v use_git_ts="${DO_GIT_TIMESTAMPS}" -v exclude_empty="${DO_EXCLUDE_EMPTY_DIRS}" \
            -v show_opts="${DO_SHOW_OPTS}" '
            # Use stat to get the timestamp of a file
            function stat_timestamp(file) {
                # Get the timestamp of the file
                cmd = "stat -c %Y \"" file "\"";
                cmd | getline stat_ts;
                close(cmd);

                # Convert the timestamp to the desired format
                cmd = "date -d @" stat_ts " +\"" tfmt "\"";
                cmd | getline stat_ts;
                close(cmd);

                return stat_ts; 
            }
            # Use git to get the timestamp of a file
            function git_timestamp(dir, file) {
                # Use stat_timestamp if use_git_ts is false
                if (use_git_ts == 0) {
                    return stat_timestamp(dir "/" file);
                }

                # Get the timestamp of the file
                cmd = "git -C \"" dir "\" log -1 --format=%ad --date=format-local:\"" tfmt "\" -- \"" file "\"";
                cmd | getline git_ts;
                close(cmd);

                # print "git_ts: \"" git_ts "\"" > "/dev/stderr";

                # If the timestamp is empty, fall back to stat_timestamp
                if (git_ts == "") {
                    return stat_timestamp(file);
                }

                return git_ts;
            }
            BEGIN {
                first_line = 1;
                # Setup colors
                if (color == "always") {
                    c_red = "\033[31m";
                    c_green = "\033[32m";
                    c_yellow = "\033[33m";
                    c_blue = "\033[34m";
                    c_magenta = "\033[35m";
                    c_cyan = "\033[36m";
                    c_white = "\033[37m";
                    c_bold = "\033[1m";
                    c_underline = "\033[4m";
                    c_reset = "\033[0m";
                }
            }
            {
                # Whenever we switch from "changes" to "only in" or vice versa,
                # print a blank line
                if ($0 ~ /^Only in/) {
                    if (!only_in) {
                        if (!first_line) {
                            print "";
                        }
                        only_in = 1;
                    }
                } else if ($0 ~ /^diff/) {
                    # If this is not the first line, print an empty line
                    if (!first_line) {
                        print "";
                    }
                    if (only_in) {
                        only_in = 0;
                    }
                } else if ($0 ~ /^Binary/) {
                    # If this is not the first line, print an empty line
                    if (!first_line) {
                        print "";
                    }
                    if (only_in) {
                        only_in = 0;
                    }
                }

                if (/^</) {
                    print c_red $0 c_reset;
                } else if (/^>/) {
                    print c_green $0 c_reset;
                } else if (/^Only in /) {
                    basedir = gensub(/Only in ('"${left_dir//\//\\/}"'|'"${right_dir//\//\\/}"').*/, "\\1", "g", $0);
                    dirname = gensub(/Only in ('"${left_dir//\//\\/}"'|'"${right_dir//\//\\/}"')\/?([^:]*):.*/, "\\2", "g", $0);
                    basename = gensub(/Only in [^:]+: (.*)/, "\\1", "g", $0);
                    if (basedir == left_path) {
                        basedirname = left;
                    } else if (basedir == right_path) {
                        basedirname = right;
                    }
                    if (dirname != "") {
                        dirname = dirname "/";
                    }
                    filepath = dirname basename;
                    absfilepath = basedir "/" dirname basename;
                    # print "left: " left, "right: " right > "/dev/stderr";
                    # print "got basedir: " basedir ", dirname: " dirname ", basename: " basename ", basedirname: " basedirname ", filepath: " filepath ", absfilepath: " absfilepath > "/dev/stderr";
                    if (system("test -d \" absfilepath \"") == 0) {
                        filepath = filepath "/";
                    }
                    printf("Only in %s: %s%s%s", basedirname, c_bold c_white, filepath, c_reset);
                    if (show_timestamps) {
                        if (basedirname == left) {
                            if (left_is_git) {
                                timestamp = git_timestamp(left, filepath);
                            } else {
                                timestamp = stat_timestamp(abspath);
                            }
                        } else if (basedirname == right) {
                            if (right_is_git) {
                                timestamp = git_timestamp(right, filepath);
                            } else {
                                timestamp = stat_timestamp(absfilepath);
                            }
                        }
                        printf(" %s(%s)%s", c_cyan, timestamp, c_reset);
                    }
                    print "";
                } else if (/^diff/) {
                    filepath = gensub(/"/, "", "g", $0);
                    filepath = gensub(/(diff.*?) '"${left_dir//\//\\/}"'\/(.*) '"${right_dir//\//\\/}"'\/?(.*)/, "\\2", "g", filepath);
                    leftabspath = "'"${left_dir//\//\\\\/}"'/" filepath;
                    rightabspath = "'"${right_dir//\//\\\\/}"'/" filepath;
                    if (show_opts) {
                        diff_opts = gensub(/ '"${left_dir//\//\\/}"'.*/, "", "g", $0);
                    } else {
                        diff_opts = "diff";
                    }
                    printf("%s %s%s/%s ", diff_opts, c_red, left, c_reset);
                    # if (show_timestamps) {
                    #     if (left_is_git) {
                    #         timestamp = git_timestamp(left, filepath);
                    #     } else {
                    #         timestamp = stat_timestamp(leftabspath);
                    #     }
                    #     printf("%s(%s)%s ", c_cyan, timestamp, c_reset);
                    # }
                    printf("%s%s/%s ", c_green, right, c_reset);
                    # if (show_timestamps) {
                    #     if (right_is_git) {
                    #         timestamp = git_timestamp(right, filepath);
                    #     } else {
                    #         timestamp = stat_timestamp(rightabspath);
                    #     }
                    #     printf("%s(%s)%s ", c_cyan, timestamp, c_reset);
                    # }
                    printf("%s-- %s%s%s\n", c_white, c_bold, filepath, c_reset);
                    if (show_timestamps) {
                        if (left_is_git) {
                            timestamp = git_timestamp(left, filepath);
                        } else {
                            timestamp = stat_timestamp(leftabspath);
                        }
                        printf("%s%s/%s%s %s(%s)%s\n", c_red, left, filepath, c_reset, c_cyan, timestamp, c_reset);
                        if (right_is_git) {
                            timestamp = git_timestamp(right, filepath);
                        } else {
                            timestamp = stat_timestamp(rightabspath);
                        }
                        printf("%s%s/%s%s %s(%s)%s\n", c_green, right, filepath, c_reset, c_cyan, timestamp, c_reset);
                    }
                } else if (/^Binary/) {
                    # Use the same format as lines that start with "^diff"
                    filepath = gensub(/Binary files '"${left_dir//\//\\/}"'\/(.+) and .* differ/, "\\1", "g", $0);
                    leftabspath = "'"${left_dir//\//\\\\/}"'/" filepath;
                    rightabspath = "'"${right_dir//\//\\\\/}"'/" filepath;
                    printf("%s %s%s/%s ", "diff", c_red, left, c_reset);
                    # if (show_timestamps) {
                    #     if (left_is_git) {
                    #         timestamp = git_timestamp(left, filepath);
                    #     } else {
                    #         timestamp = stat_timestamp(leftabspath);
                    #     }
                    #     printf("%s(%s)%s ", c_cyan, timestamp, c_reset);
                    # }
                    printf("%s%s/%s ", c_green, right, c_reset);
                    # if (show_timestamps) {
                    #     if (right_is_git) {
                    #         timestamp = git_timestamp(right, filepath);
                    #     } else {
                    #         timestamp = stat_timestamp(rightabspath);
                    #     }
                    #     printf("%s(%s)%s ", c_cyan, timestamp, c_reset);
                    # }
                    printf("%s-- %s%s%s\n", c_white, c_bold, filepath, c_reset);
                    if (show_timestamps) {
                        if (left_is_git) {
                            timestamp = git_timestamp(left, filepath);
                        } else {
                            timestamp = stat_timestamp(leftabspath);
                        }
                        printf("%s%s/%s%s %s(%s)%s\n", c_red, left, filepath, c_reset, c_cyan, timestamp, c_reset);
                        if (right_is_git) {
                            timestamp = git_timestamp(right, filepath);
                        } else {
                            timestamp = stat_timestamp(rightabspath);
                        }
                        printf("%s%s/%s%s %s(%s)%s\n", c_green, right, filepath, c_reset, c_cyan, timestamp, c_reset);
                    }
                    print c_white "< Binary file differs >" c_reset;
                } else {
                    print $0;
                }
            }
            first_line = 0;
        '
}


## run #########################################################################
################################################################################

[ "${BASH_SOURCE[0]}" == "${0}" ] && (
    if [ -n "${DEBUG}" ]; then
        exec 3>&2
        main "${@}"
    else
        main "${@}" 3>/dev/null
    fi
)
