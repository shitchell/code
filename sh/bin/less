#!/usr/bin/env bash
#
# `less` wrapper which handles missing filepaths if an entry in ~/.lessfilter is configured for it

# Allows ~/.lessfilter to handle paths which don't exist
function _less() {
    local args=()
    local exit_code
    local tmp_files=()
    local less_cmd=("/bin/less")

    # Determine if there are any extra aliased options to pass to our real
    # `less` call
    local alias_opts
    IFS=" " alias_opts=(
        $(type -a less | grep -oP "(?<=aliased to \`less )[^']+")
    )
    if [[ "${#alias_opts[@]}" -gt 0 ]]; then
        less_cmd+=("${alias_opts[@]}")
    fi
    # debug "less_cmd: `printf "%q " "${less_cmd[@]}"`"

    # If "~/.lessfilter" doesn't exist, then skip this and just run `less`
    if ! [[ -f "${HOME}/.lessfilter" ]]; then
        # debug "skipping lessfilter"
        "${less_cmd[@]}" "${@}"
        return ${?}
    fi

    # Loop over each arg, skipping files and options, trying to run
    # ~/.lessfilter on each. If successful, save the output to a file and switch
    # out that temporary filepath with the given arg. This allows you to pass,
    # for example, `https://google.com/` as an arg, which would normally fail
    # even with an entry in ~/.lessfilter to handle it because `less` will not
    # do anything with a filepath which doesn't exist.  With this, if an entry
    # in ~/.lessfilter can handle `https://google.com/`, then it will save the
    # output to, e.g., `/tmp/less-a8fDo` and then pass that temporary filepath
    # to `less` instead of the URL
    for arg in "${@}"; do
        # debug "processing '${arg}'"
        # Skip any arguments which exist or start with a "-"
        if [[ "${arg}" =~ ^- || -f "${arg}" ]]; then
            # debug "storing '${arg}' as normal arg"
            args+=("${arg}")
        else
            # debug "running lessfilter"
            # Try to run lessfilter on the arg
            # debug "running '${HOME}/.lessfilter ${arg}'"
            local lessfiltered
            lessfiltered=$("${HOME}/.lessfilter" "${arg}")
            # debug "${lessfiltered}"
            if [[ -n "${lessfiltered}" ]]; then
                # debug "lessfilter got content"
                # Create a temporary file
                local tmp_file=$(mktemp)
                # debug "writing to '${tmp_file}'"
                printf "%s\n" "${lessfiltered}" >"${tmp_file}"
                tmp_files+=("${tmp_file}")
                args+=("${tmp_file}")
            else
                # debug "lessfilter failed, adding '${arg}' as normal arg"
                args+=("${arg}")
            fi
        fi
    done
    
    # Pass everything to less
    # debug "running: `printf "%q " "${less_cmd[@]}" "${args[@]}"`"
    "${less_cmd[@]}" "${args[@]}"
    exit_code=${?}
    
    # Delete the temporary files
    for tmp_file in "${tmp_files[@]}"; do
        rm "${tmp_file}" >/dev/null 2>&1
    done
    
    return ${exit_code}
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && _less "${@}"
