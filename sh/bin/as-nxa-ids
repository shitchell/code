#!/usr/bin/env bash
#
# Convert between NxA service IDs and service names

## globals #####################################################################
################################################################################

SERVICE_ID_REGEX_TEMPLATE='{SERVICE_PREFIX}_[0-9]+_[A-Z0-9]{8}'
SERVICE_ID_REGEX=$(echo "${SERVICE_ID_REGEX_TEMPLATE}" | sed -e 's/{SERVICE_PREFIX}/[-_A-Za-z0-9]+/g')

## usage #######################################################################
################################################################################

function help-epilogue() {
    echo "convert between NxA service IDs and service names"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "Identifies and prints information about services by name, ID, or path."
    echo "If any of the arguments is a single '-', then services are read from"
    echo "stdin."
    echo
    echo "Options:"
    echo
    cat << EOF
    -h                             display usage
    --help                         display this help message
    -d/--nxa-dir <dir>             the NxA directory, defaults to '.'
    -p/--service-prefix <prefix>   the service prefix, defaults to 'RedirectFileMgr'
    -N/--service-names             interpret arguments as service names
    -I/--service-ids               interpret arguments as service IDs
    -A/--auto                      interpret arguments as service names, IDs, or paths (default)
    -f/--format <format>           the output format, defaults to '{fullname} {filepath}'
    -e/-E/--(no-)print-errors      whether to print errors for missing services
    -b/-B/--(no-)blank-lines       whether to print blank lines for missing services
EOF
    echo
    echo "The format string can contain the following:"
    echo
    cat << EOF
    {name}      the service name
    {fullname}  the full service name (including project, package, etc)
    {id}        the service ID
    {filepath}  the service filepath
    {filename}  the service filename
    {project}   the service project name
    {input}     the input string
    \t          a tab character
    \n          a newline character
EOF
}

function help-usage() {
    echo "usage: $(basename "${0}") [-h] [-d <dir>] [-p <prefix>] [-f <format>] [-e | -E] [-b | -B] <service> [<service> ...]"
}

function parse-args() {
    # Default values
    NXA_DIR=""
    NXA_ACCOUNTS_DIR=""
    SERVICE_PREFIX=""
    OUTPUT_FORMAT="{fullname} {filepath}"
    INTERPRET_AS="auto" # auto, name, id
    DO_ERRORS=true
    DO_BLANK_LINES=true

    # Loop over the arguments
    declare -ga SERVICES
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit 0
                ;;
            --help)
                help-full
                exit 0
                ;;
            -N | --service-names)
                INTERPRET_AS="name"
                shift 1
                ;;
            -I | --service-ids)
                INTERPRET_AS="id"
                shift 1
                ;;
            -A | --auto)
                INTERPRET_AS="auto"
                shift 1
                ;;
            -d | --nxa-dir)
                NXA_DIR="${2}"
                shift 2
                ;;
            -p | --service-prefix)
                SERVICE_PREFIX="${2}"
                SERVICE_ID_REGEX=$(
                    echo "${SERVICE_ID_REGEX_TEMPLATE}" \
                        | awk -v prefix="${SERVICE_PREFIX}" '{gsub(/{SERVICE_PREFIX}/, prefix); print}'
                )
                shift 2
                ;;
            -f | --format)
                OUTPUT_FORMAT="${2}"
                shift 2
                ;;
            -e | --print-errors)
                DO_ERRORS=true
                shift 1
                ;;
            -E | --no-print-errors)
                DO_ERRORS=false
                shift 1
                ;;
            -b | --blank-lines)
                DO_BLANK_LINES=true
                shift 1
                ;;
            -B | --no-blank-lines)
                DO_BLANK_LINES=false
                shift 1
                ;;
            -)
                # Read from stdin
                while read -r line; do
                    SERVICES+=("${line}")
                done
                shift 1
                ;;
            -*)
                echo "unknown option: ${1}" >&2
                help-usage >&2
                exit 1
                ;;
            *)
                SERVICES+=("${1}")
                shift 1
                ;;
        esac
    done

    # If there is an 'nxa' directory in the current directory, use that, else
    # use the current directory
    if [[ -z "${NXA_DIR}" ]]; then
        NXA_DIR=$([[ -d "nxa" ]] && echo "nxa" || echo ".")
    elif [[ ! -d "${NXA_DIR}" ]]; then
        echo "invalid NxA directory: ${NXA_DIR}" >&2
        help-usage >&2
        exit 1
    fi

    # Determine the accounts directory
    NXA_ACCOUNTS_DIR=$(find-accounts-dir "${NXA_DIR}")
    ## Set the accounts directory relative to the current directory
    NXA_ACCOUNTS_DIR=$(realpath --relative-to="${PWD}" "${NXA_ACCOUNTS_DIR}")

    # Check that there are services
    if [[ ${#SERVICES[@]} -eq 0 ]]; then
        help-usage
        help-epilogue
        exit 1
    fi

    debug "NXA_DIR:           ${NXA_DIR}"
    debug "NXA_ACCOUNTS_DIR:  ${NXA_ACCOUNTS_DIR}"
    debug "DO_ERRORS:         ${DO_ERRORS}"
    debug "DO_BLANK_LINES:    ${DO_BLANK_LINES}"
    debug "SERVICES:          ${SERVICES[*]}"
}


## helpful functions ###########################################################
################################################################################

# @description Print a debug message
# @usage debug <message>
function debug() {
    local prefix timestamp
    if [[ "${DEBUG}" == "1" || "${DEBUG}" == "true" || -n "${DEBUG_LOG}" ]]; then
        timestamp="$(date '+%Y-%m-%d %H:%M:%S')"
        prefix="\033[36m[${timestamp}]\033[0m "
        prefix+="\033[35m$(basename "${BASH_SOURCE[-1]}")"
        [[ "${FUNCNAME[1]}" != "main" ]] && prefix+="\033[1m:${FUNCNAME[1]}()\033[0m"
        prefix+="\033[32m:${BASH_LINENO[0]}\033[0m -- "
        printf "%s\n" "${@}" \
            | awk -v prefix="${prefix}" '{print prefix $0}' \
            >>"${DEBUG_LOG:-/dev/stderr}"
            # | dd of="${DEBUG_LOG:-/dev/stderr}" conv=notrunc oflag=append status=none
    fi
}

# @description Find the accounts directory in the NxA directory
# @usage find-accounts-dir [<nxa-dir>]
function find-accounts-dir() {
    local nxa_dir="${1:-${NXA_DIR:-.}}"
    local accounts_dir

    [[ -z "${nxa_dir}" ]] && return 1
    nxa_dir=$(realpath "${nxa_dir}")

    account_dir=$(
        find "${nxa_dir}" \
            -maxdepth 5 \
            -type d \
            -name 'accounts' \
            -path '*/SREData/MetaDataMgr/FileMgr/accounts' \
            -print \
            -quit
    )

    if [[ -z "${account_dir}" ]]; then
        echo "error: could not find accounts directory in: ${nxa_dir}" >&2
        return 1
    fi

    # Return the accounts dir relative to the current directory
    # echo "${account_dir}"
    realpath --relative-to="${PWD}" "${account_dir}"
}

# @description Determine if a string is a service ID
# @usage is-service-id <string>
function is-service-id() {
    local string="${1}"

    [[ -z "${string}" ]] && return 1
    [[ "${string}" == "-" ]] && string=$(cat)
    if [[ -n "${SERVICE_PREFIX}" ]]; then
        [[ "${string}" =~ ^${SERVICE_ID_REGEX}$ ]]
    else
        [[
            "${string}" =~ ^[A-Z0-9]{8}$
            || "${string}" =~ ^${SERVICE_ID_REGEX}$
        ]]
    fi
}

# @description Determine if a string contains a service ID
# @usage contains-service-id <string>
function contains-service-id() {
    local string="${1:--}"
    [[ "${string}" == "-" ]] && string=$(cat)
    [[ "${string}" =~ [0-9]+_[A-Z0-9]{8} ]]
}

# @description Parse a service ID out of a filepath or filename
# @usage parse-service-id <string>
function parse-service-id() {
    local string="${1}"

    [[ -z "${string}" ]] && return 1
    [[ "${string}" == "-" ]] && string=$(cat)

    # Get just the filename if this is a filepath
    local string="${string##*/}"

    # Grab just the ID, which should match the regex '[A-Z0-9]{8}'
    local service_id=$(echo "${string}" | grep -oE "${SERVICE_ID_REGEX}")

    # Check that the ID is valid
    if ! is-service-id "${service_id}"; then
        echo "error: no service ID found: ${string}" >&2
        return 1
    fi

    echo "${service_id}"
}

# @description Find the filepath of a service ID
# @usage find-service-files <service-id>
function find-service-files() {
    local service_id="${1:--}"

    [[ "${service_id}" == "-" ]] && service_id=$(cat)

    # Find the file
    readarray -t service_files < <(
        find "${NXA_DIR}" -name "*${service_id}*.xml"
    )

    # Check that we found results
    if [[ ${#service_files[@]} -eq 0 ]]; then
        echo "error: no service files found for ID: ${service_id}" >&2
        return 1
    fi

    printf '%s\n' "${service_files[@]}"
}

# @description Given a service file, return its full name
# @usage service-file-to-name <service-file>
function service-file-to-name() {
    local service_file="${1:--}"
    local service_file_real=""
    local service_full_name=""

    [[ "${service_file}" == "-" ]] && service_file=$(cat)
    
    # If the service file ends with "*_dfn.xml", then use its ctc file
    if [[ "${service_file}" =~ "_dfn.xml"$ ]]; then
        debug "converting dfn to ctc:"
        service_file=$(sed 's/_dfn.xml$/_ctc.xml/' <<< "${service_file}")
        debug " => ${service_file}"
    fi

    # Get the service name
    local service_name
    if [[ "${service_file}" =~ "/rdcs/" ]]; then
        # We need to remove all newlines and get the the name key from the
        # HSDataContainerType element
        debug "parsing service name from rdcs file"
        service_name=$(
            awk '
                /<HSDataContainerType / { f = 1; }
                f && /name="/ {
                    gsub(/.*name="/, "")
                    gsub(/".*/, "")
                    print
                    exit
                }
            ' < "${service_file}"
        )
    elif [[ "${service_file}" =~ "_ctc.xml"$ ]]; then
        # We need the contractName attribute from the HSContract element
        debug "parsing service name from ctc file"
        service_name=$(
            awk '
                /<HSContract / { f = 1; }
                f && /contractName="/ {
                    gsub(/.*contractName="/, "")
                    gsub(/".*/, "")
                    print
                    exit
                }
            ' < "${service_file}"
        )
    fi
    debug "service_name: ${service_name}"
    if [[ -z "${service_name}" ]]; then
        echo "error: no service name found for file: ${service_file}" >&2
        return 1
    fi

    # Form the full name from the file path
    ## Get the real path
    service_file_real=$(realpath "${service_file}")
    ## Remove everything up to the 'accounts' directory
    service_full_name="${service_file_real##*/MetaDataMgr/FileMgr/accounts/}"
    ## Remove the file name
    service_full_name="${service_full_name%/*}"
    ## Append the service name
    service_full_name="${service_full_name}.${service_name}"
    ## Remove the "/packages" directory
    service_full_name="${service_full_name/packages\//}"
    ## Replace all '/' with '.'
    service_full_name="${service_full_name//\//.}"
    debug "service_full_name: ${service_full_name}"

    echo "${service_full_name}"
}

# @description Convert a service ID to a service name
# @usage service-id-to-name <service-id>
function service-id-to-name() {
    local input_str="${1:--}"
    local format="${2:-${OUTPUT_FORMAT}}"

    [[ "${input_str}" == "-" ]] && input_str=$(cat)
    local service_id="${input_str}"
    debug "service_id: ${service_id}"

    # Ensure the service ID is valid
    if ! is-service-id "${service_id}"; then
        debug "parsing service ID from string: ${service_id}"
        # Try to parse the service ID out of the string
        service_id=$(parse-service-id "${service_id}")
        [[ $? -ne 0 ]] && return 1
    fi
    debug "service_id: ${service_id}"

    # Find the ctc file
    local service_file
    readarray -t service_files < <(
        find-service-files "${service_id}" \
            | grep -vE 'dfn\.xml$'
    )
    debug "service files: ${service_files[*]}"
    if [[ ${#service_files[@]} -eq 0 ]]; then
        echo "error: no service files found for ID: ${service_id}" >&2
        return 1
    fi

    # If more than 1 file appears, that's... not supposed to happen... so we'll
    # log it, but continue with the first non-dfn file
    service_file="${service_files[0]}"
    debug "service file: ${service_file}"

    # Get the service name
    local service_name
    if [[ "${service_file}" =~ "/rdcs/" ]]; then
        # We need to remove all newlines and get the the name key from the
        # HSDataContainerType element
        service_name=$(
            cat "${service_file}" \
                | tr -d '\n' \
                | grep -oE '<HSDataContainerType [^>]+>' \
                | grep -oE 'name="[^"]+' \
                | cut -d'"' -f2 \
                | head -1
        )
    elif [[ "${service_file}" =~ "_ctc.xml"$ ]]; then
        # We need the contractName attribute from the HSContract element
        service_name=$(
            cat "${service_file}" \
                | grep -oE '<HSContract [^>]+>' \
                | grep -oE 'contractName="[^"]+' \
                | cut -d'"' -f2
        )
    fi
    debug "service_name: ${service_name}"
    if [[ -z "${service_name}" ]]; then
        echo "error: no service name found for ID: ${service_id}" >&2
        return 1
    fi

    # Combine the package and stuff
    # e.g. for the service file:
    #   nxa/SREData/MetaDataMgr/FileMgr/accounts/OPG_Helix/packages/WarehouseDistribution/Domain/RedirectFileMgr_1835_7L34EBVZ_ctc.xml
    # the service name is:
    #  OPG_Helix.WarehouseDistribution.Domain.${service_name}
    local service_name_full
    local filepath=$(echo "${service_file}" | grep -oE 'SREData/.*')
    # Get everything past the 3rd directory after 'SREData'
    local local_path=$(echo "${filepath}" | cut -d'/' -f5-)
    # Remove the second 'packages' directory
    local_path=$(echo "${local_path}" | sed 's/packages\///')
    # Remove the file name
    local local_dir=$(dirname "${local_path}")

    # Get the project and package names
    local project=$(echo "${local_dir}" | cut -d'/' -f1)
    local package=$(echo "${local_dir}" | cut -d'/' -f2)
    debug "filepath: ${filepath}"
    debug "local_path: ${local_path}"
    debug "local_dir: ${local_dir}"
    debug "project: ${project}"
    debug "package: ${package}"

    if ! [[ -n "${project}" && -n "${package}" && -n "${service_name}" ]]; then
        echo "error: could not parse service name: ${service_id} -- ${service_file}" >&2
        return 1
    fi

    # Replace '/' with '.'
    service_name_full="${local_dir//\//.}.${service_name}"

    # Format the output
    awk -v name="${service_name}" -v fullname="${service_name_full}" \
        -v id="${service_id}" -v filepath="${service_file}" -v filename="${service_file##*/}" \
        -v input="${input_str}" -v project="${project}" -v format="${format}" '{
        gsub(/{name}/, name);
        gsub(/{fullname}/, fullname);
        gsub(/{id}/, id);
        gsub(/{filepath}/, filepath);
        gsub(/{filename}/, filename);
        gsub(/{input}/, input);
        gsub(/{project}/, project);
        gsub(/\\n/, "\n");
        gsub(/\\t/, "\t");
        gsub(/\\r/, "\r");
        gsub(/\\0/, "\0");
        gsub(/\\/, "");
        print $0;
    }' <<< "${format}"
}

# @description Convert a service name to a filepath
# @usage service-fullname-to-filepath <service-fullname>
function service-fullname-to-filepath() {
    local input_str="${1:--}"
    local format="${2:-${OUTPUT_FORMAT}}"

    [[ "${input_str}" == "-" ]] && input_str=$(cat)
    local service_name_full="${input_str}"

    # Extract the project and package
    local project=$(echo "${service_name_full}" | cut -d'.' -f1)
    local package=$(echo "${service_name_full}" | cut -d'.' -f2)
    local service_name=$(echo "${service_name_full}" | sed 's/.*\.//')

    debug "project: ${project}"
    debug "package: ${package}"
    debug "service_name: ${service_name}"

    # Locate the full project path in the NXA directory
    local project_dir="${NXA_ACCOUNTS_DIR}/${project}"
    if ! [[ -d "${project_dir}" ]]; then
        echo "error: could not find project directory: ${project_dir}" >&2
        return 1
    fi
    debug "project_dir: ${project_dir}"

    # Convert the service name to a path with "packages/" inserted after the project name and removing the service name
    local local_dir=$(
        echo "${service_name_full}" \
            | tr '.' '/' \
            | sed 's|/|/packages/|' \
            | sed 's|/[^/]*$||'
    )

    # Put it together for the service directory
    local service_dir="${project_dir}/${local_dir#*/}"
    debug "service_dir: ${service_dir}"

    # Grep for the service name
    if ! [[ -d "${service_dir}" ]]; then
        echo "error: could not find service directory: ${service_dir}" >&2
        return 1
    fi
    local filepath=$(grep --color=never -loRE "contractName=\"${service_name}\"" "${service_dir}")
    debug "filepath: ${filepath}"
    if [[ -z "${filepath}" ]]; then
        debug "filepath empty for service: ${service_name_full}, returning 1"
        echo "error: could not find service name: ${service_name_full}" >&2
        return 1
    fi

    # Get the service ID
    local service_id=$(parse-service-id "${filepath}")

    # Format the output
    awk -v name="${service_name}" -v fullname="${service_name_full}" \
        -v id="${service_id}" -v path="${filepath}" -v input="${input_str}" \
        -v project="${project}" -v format="${format}" '{
        gsub(/{name}/, name);
        gsub(/{fullname}/, fullname);
        gsub(/{id}/, id);
        gsub(/{filepath}/, path);
        gsub(/{input}/, input);
        gsub(/{project}/, project);
        gsub(/\\n/, "\n");
        gsub(/\\t/, "\t");
        gsub(/\\r/, "\r");
        gsub(/\\0/, "\0");
        gsub(/\\/, "");
        print $0;
    }' <<< "${format}"
}

# @description Find all services across all projects with the given name
# @usage service-name-to-filepaths <service-name>
function service-name-to-filepaths() {
    local input_str="${1:--}"
    local format="${2:-${OUTPUT_FORMAT}}"
    local filepaths
    local project
    local accounts_dir glob_pattern
    local search_dir="${NXA_ACCOUNTS_DIR}"
    local find_args=() find_paths=""
    local service_id
    local service_ids=()
    local service_name

    [[ "${input_str}" == "-" ]] && input_str=$(cat)
    service_name="${input_str}"
    debug "service_name: ${service_name}"

    # If the name includes a "." or a "*", then replace any "." with "/" and
    # use the result as a glob pattern to determine the search directories
    if [[ "${service_name}" == *"*"* || "${service_name}" == *"."* ]]; then
        # Create a pathy glob pattern from the service name
        glob_pattern=$(printf '%q' "${service_name}")
        glob_pattern="${glob_pattern//\\\*/*}"
        glob_pattern="${glob_pattern//\./\/}"
        # If the last section of the pattern is a single word (the service name)
        # then remove it
        if [[ "${glob_pattern}" =~ "/"([-_A-Za-z0-9]+)$ ]]; then
            service_name="${BASH_REMATCH[1]}"
            glob_pattern="${glob_pattern%/*}"
        else
            service_name=".*"
        fi
        # If the glob pattern includes the project name, then place "packages/"
        # after the project name and add the project to the search directory
        if [[ "${glob_pattern}" =~ ^([-_A-Za-z0-9]+)"/" ]]; then
            # TODO: we probably ought to switch this to appending just a star
            # TODO: since we don't necessarily know if the desired service is
            # TODO: an rdcs file which won't be in the packages directory
            project="${BASH_REMATCH[1]}"
            glob_pattern=$(
                sed -E 's|^([-_A-Za-z0-9]+)|\1/packages|' <<< "${glob_pattern}"
            )
            search_dir="${NXA_ACCOUNTS_DIR}/${project}"
        fi
        debug "glob_pattern: ${glob_pattern}"
        # Add the glob pattern to the find args
        find_args+=(-not -path "*/${glob_pattern}/*" -o -type f -print)
    else
        find_args+=(-type f)
    fi
    debug "search_dir: ${search_dir}"
    debug "find_args: ${find_args[*]}"
    debug "service_name: ${service_name}"

    readarray -t filepaths < <(
        shopt -s globstar
        find "${search_dir}" "${find_args[@]}" \
            | xargs -n 200 grep --color=never -loRE "contractName=\"${service_name}\""
        # grep --color=never -loRE \
        #     "contractName=\"${service_name}\"" \
        #     "${NXA_ACCOUNTS_DIR}/"**/**.xml
    )
    debug "filepaths: ${filepaths[*]}"
    if [[ -z "${filepaths}" ]]; then
        debug "filepath empty for service: ${service_name_full}, returning 1"
        echo "error: could not find service name: ${service_name_full}" >&2
        return 1
    fi

    # Get a unique list of service IDs
    readarray -t service_ids < <(
        for filepath in "${filepaths[@]}"; do
            parse-service-id "${filepath}"
        done | sort -u
    )
    debug "service_ids: ${service_ids[*]}"

    # Get the service IDs and print the results
    for service_id in "${service_ids[@]}"; do
        debug "service_id: ${service_id}"
        service-id-to-name "${service_id}"
    done
}


## main ########################################################################
################################################################################

function main() {
    parse-args "${@}"

    local error_file
    if ${DO_ERRORS}; then
        error_file=/dev/stdout
    else
        error_file=/dev/null
    fi

    local output
    local err_code
    local exit_code=0
    for service in "${SERVICES[@]}"; do
        local service_type

        # Determine if the input is a service ID or name
        if [[ "${INTERPRET_AS}" == "auto" ]]; then
            if contains-service-id "${service}"; then
                service_type="id"
            elif [[ "${service}" == *"*"* ]]; then
                service_type="name"
            elif [[ "${service}" == *"."* ]]; then
                service_type="fullname"
            else
                service_type="name"
            fi
        else
            service_type="${INTERPRET_AS}"
        fi

        if [[ "${service_type}" == "id" ]]; then
            debug "service-id-to-name '${service}'"
            output=$(service-id-to-name "${service}" 2>"${error_file}")
            err_code=${?}
        elif [[ "${service_type}" == "fullname" ]]; then
            debug "service-fullname-to-filepath '${service}'"
            output=$(service-fullname-to-filepath "${service}" 2>"${error_file}")
            err_code=${?}
        elif [[ "${service_type}" == "name" ]]; then
            debug "service-name-to-filepaths '${service}'"
            output=$(service-name-to-filepaths "${service}" 2>"${error_file}")
            err_code=${?}
        else
            output="error: invalid service type: ${service_type}"
            err_code=1
        fi
        debug "${service} -- ${output} -- ${err_code}"
        if [[ ${err_code} -eq 0 ]]; then
            echo "${output}"
        else
            exit_code=1
            if ${DO_ERRORS}; then
                echo "${output}" >&2
            elif ${DO_BLANK_LINES}; then
                echo
            fi
        fi
    done
    
    return ${exit_code}
}


## run #########################################################################
################################################################################

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"
