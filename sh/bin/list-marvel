#!/usr/bin/env bash
#
# List Marvel movies and TV shows

include-source 'echo.sh'

# Determine whether to colorize the output
[[ -t 0 && -t 1 ]] && ECHO_FORMATTED=always || ECHO_FORMATTED=no

# Setup the component IDs
COMPONENT_IDS=(
    "movies::665076"
    "movies_news::6367736"
    "movies_other::664931"
    "tv_news::6367841"
    "tv_disney::1082986"
    "tv_disney_nonfiction::1083016"
    "tv_series_d::1350061"
    "tv_hulu::1156041"
    "tv_animation::1083056"
    "movies_all::665076 664931"
    "tv_all::1082986 1350061 1156041 1083056"
    "all::665076 6367736 664931 6367841 1082986 1350061 1156041 1083056"
)

# Set up a couple of maps by looping over the COMPONENT_IDS array
declare -A COMPONENT_IDS_BY_NAME
declare -A COMPONENT_IDS_BY_ID
for component_id in "${COMPONENT_IDS[@]}"; do
    # Split the component ID into its name and ID
    name="${component_id%%::*}"
    id="${component_id##*::}"

    # Store the name and ID in the maps
    COMPONENT_IDS_BY_NAME["${name}"]="${id}"
    COMPONENT_IDS_BY_ID["${id}"]="${name}"
done

### Component IDs
###
## Movies
# 6367736 - Latest Movies News
# 665076 - Marvel Movies
# 664931 - Other Movies
## TV
# 6367841 - Latest TV News
# 1082986 - Marvel on Disney+
# 1083016 - Non-Fiction Disney+
# 1350061 - Marvel Series on D+
# 1156041 - Marvel on Hulu
# 1083056 - Animation

# @description Fetch a list of results from a component ID
# @usage _fetch-results [--offset <int>] [--limit <int>] [(--no)-header] [--format <format>] [--sort] [--sort-column <int>] <component ID>
# @example _fetch-results 665076
# @example _fetch-results --offset 100 --limit 100 movies_all tv_all
# @example _fetch-results --no-header --format '{title}\t({date})' 665076 --sort --sort-column 2
# @return 0 all components were fetched successfully
# @return 1 all components were unable to be fetched
# @return 2 some components were unable to be fetched
# @return 3 invalid component ID provided
# @return 4 invalid component ID provided
function _fetch-results() {
    local offset=0 limit=100 component="" component_id="" component_ids=()
    local format="{date}\t{title}\t{component}"
    local header do_header=false
    local sort_column=1 do_sort=true
    local exit_code=0
    local qs url response json

    # Parse the arguments
    while [ ${#} -gt 0 ]; do
        case "${1}" in
            --offset)
                offset="${2}"
                shift 2
                ;;
            --limit)
                limit="${2}"
                shift 2
                ;;
            --format)
                format="${2}"
                shift 2
                ;;
            --header)
                do_header=true
                shift
                ;;
            --no-header)
                do_header=false
                shift
                ;;
            *)
                component_id="${1}"
                if [[ "${component_id}" != [0-9]+ ]];  then
                    component_id="${COMPONENT_IDS_BY_NAME["${component_id}"]}"
                fi
                # Make sure it's in the list of valid component IDs
                if [[ -z "${component_id}" || -z "${COMPONENT_IDS_BY_ID["${component_id}"]}" ]]; then
                    echo-error "error: invalid component: ${1}"
                    return 3
                fi
                component_ids+=(${component_id})
                shift 1
                ;;
        esac
    done

    # Check if the component ID is valid
    if [[ -z "${component_ids}" ]]; then
        echo-error "error: no component ID provided"
        return 4
    fi

    # Show the header
    if ${do_header}; then
        header=$(
            awk '{
                gsub(/{date}/, "Release Date");
                gsub(/{dateY}/, "Release Year");
                gsub(/{dateM}/, "Release Month");
                gsub(/{dateD}/, "Release Day");
                gsub(/{title}/, "Title");
                gsub(/{component}/, "Type");
                print $0;
            }' <<< "${format}" | printf "%b" "$(cat)"
        )
        echo "${header}"
    fi

    # If we should sort, then use 

    # Loop over the component IDs
    for component_id in "${component_ids[@]}"; do
        # Fetch the results
        qs="componentId=${component_id}&offset=${offset}&limit=${limit}"
        url="https://www.marvel.com/v1/pagination/content_grid_cards?${qs}"
        response=$(curl -s "${url}" 2>/dev/null)
        json=$(echo "${response}" | python -m json.tool 2>/dev/null)
        if [ -z "${json}" ]; then
            echo-error "error: failed to fetch results from ${url}"
            [[ ${exit_code} -eq 0 ]] && exit_code=1
        fi

        awk -v component="${COMPONENT_IDS_BY_ID["${component_id}"]}" -v format="${format}" '
            function is_int(x) {
                return x ~ /^[0-9]+$/;
            }
            BEGIN {
                # Set the row number to 1
                row = 1;
            }
            /"headline":/ {
                # Store the title
                title = gensub(/.*"headline": " *(.*?) *".*/, "\\1", 1);
                next;
            }
            /"day":/ {
                # Store the day
                day = gensub(/.*"day": "(.*?)".*/, "\\1", 1);
                # If the day is not a number or is all 0s, then set it to "??"
                if (!is_int(day) || day == "00") {
                    day = "??";
                }
                next;
            }
            /"month":/ {
                # Store the month
                month = gensub(/.*"month": "(.*?)".*/, "\\1", 1);
                # If the month is not a number or is all 0s, then set it to "??"
                if (!is_int(month) || month == "00") {
                    month = "??";
                }
                next;
            }
            /"year":/ {
                # Store the year
                year = gensub(/.*"year": "(.*?)".*/, "\\1", 1);
                # If the year is not a number or is all 0s, then set it to "????"
                if (!is_int(year) || year == "0000") {
                    year = "????";
                }
                next;
            }
            # If we have a title, day, month, and year, print them out
            title != "" && day != "" && month != "" && year != "" {
                # print year "-" month "-" day "\t" title "\t" component;
                line = gensub(/{date}/, year "-" month "-" day, 1, format);
                line = gensub(/{dateY}/, year, 1, line);
                line = gensub(/{dateM}/, month, 1, line);
                line = gensub(/{dateD}/, day, 1, line);
                line = gensub(/{title}/, title, 1, line);
                line = gensub(/{component}/, component, 1, line);
                print line;

                # Reset the title, day, month, and year
                title = "";
                day = "";
                month = "";
                year = "";
            }
        ' <<< "${json}"
        [[ ${exit_code} -eq 1 ]] && exit_code=2
    done | (
        ${do_sort} && sort -k ${sort_column} || cat
    )

    return ${exit_code}
}

## main ########################################################################
################################################################################

function main() {
    if [[ "${1}" =~ ^"help"|"-h"|"--help"$ || -z "${1}" ]]; then
        echo "List Marvel movies and TV shows from the Marvel website"
        echo "usage: $(basename "${0}") category [category ...]"
        echo
        echo "Categories:"
        # Print all of the components
        for component in "${COMPONENT_IDS[@]}"; do
            name="${component%%::*}"
            id="${component##*::}"
            echo -e "- ${name}\t(${id})"
        done | column -t -s $'\t'
        [[ -n "${1}" ]] && return 0
    fi

    _fetch-results --header "${@}" | column -t -s $'\t'
}

## run #########################################################################
################################################################################

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"
