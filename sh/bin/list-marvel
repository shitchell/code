#!/usr/bin/env bash
#
# This script does some stuff


## imports #####################################################################
################################################################################

include-source 'debug.sh'


## exit codes ##################################################################
################################################################################

declare -ri E_SUCCESS=0
declare -ri E_ERROR=1
declare -ri E_INVALID_ARGUMENT=2
declare -ri E_INVALID_COMPONENT=3


## traps #######################################################################
################################################################################

# @description Silence all output
# @usage silence-output
function silence-output() {
    exec 3>&1 4>&2 1>/dev/null 2>&1
}

# @description Restore stdout and stderr
# @usage restore-output
function restore-output() {
    [[ -t 3 ]] && exec 1>&3 3>&-
    [[ -t 4 ]] && exec 2>&4 4>&-
}

# @description Exit trap
function trap-exit() {
    restore-output
}
trap trap-exit EXIT


## colors ######################################################################
################################################################################

# Determine if we're in a terminal
[[ -t 1 ]] && __IN_TERMINAL=true || __IN_TERMINAL=false

# @description Set up color variables
# @usage setup-colors
function setup-colors() {
    C_RED=$'\e[31m'
    C_GREEN=$'\e[32m'
    C_YELLOW=$'\e[33m'
    C_BLUE=$'\e[34m'
    C_MAGENTA=$'\e[35m'
    C_CYAN=$'\e[36m'
    C_WHITE=$'\e[37m'
    S_RESET=$'\e[0m'
    S_BOLD=$'\e[1m'
    S_DIM=$'\e[2m'
    S_UNDERLINE=$'\e[4m'
    S_BLINK=$'\e[5m'
    S_INVERT=$'\e[7m'
    S_HIDDEN=$'\e[8m'

    # Custom colors
    C_HEADER="${S_BOLD}"
    C_DATE="${C_CYAN}"
    C_TITLE="${S_BOLD}${C_BLUE}"
    C_TYPE="${C_YELLOW}"
    C_RESET="${S_RESET}"
}

# @description Unset color variables
# @usage unset-colors
function unset-colors() {
    unset C_RED C_GREEN C_YELLOW C_BLUE C_MAGENTA C_CYAN C_WHITE \
          S_RESET S_BOLD S_DIM S_UNDERLINE S_BLINK S_INVERT S_HIDDEN
    
    # Custom colors
    unset C_HEADER C_DATE C_TITLE C_TYPE C_RESET
}


## usage functions #############################################################
################################################################################

function help-usage() {
    echo "usage: $(basename "${0}") [--color <when>] [--(no-)pager]"
    echo "       [--(no-)header] [--(no-)sort] [--sort-column <int>]"
    echo "       [--format <format>]"
    echo "       <component>..."
}

function help-epilogue() {
    echo "Fetch the latest Marvel release dates"
}

function help-full() {
    help-usage
    help-epilogue
    echo
    echo "Options:"
    cat << EOF
    -h                    display usage
    --help                display this help message
    -c/--color <when>     when to use color ("auto", "always", "never")
    -s/--silent           suppress all output
    -p/--pager            use \`autopage\` for output (default)
    -P/--no-pager         do not use a pager for output
    -c/--columns          columnize the output (default: true if format not set)
    -C/--no-columns       do not columnize the output
    --header              include a header in the output
    --no-header           do not include a header in the output
    --sort                sort the output
    -k/--sort-column <n>  sort the output by the specified column
    --format <format>     the format to use for the output (see below, default:
                          "{date}\t{title}\t{component}")
    <component>           the component name to fetch results from
EOF
    echo
    echo "Components:"
    _print-components | sed 's/^/    /'
    echo
    echo "Format:"
    echo "    {date}      - the release date"
    echo "    {dateY}     - the release year"
    echo "    {dateM}     - the release month"
    echo "    {dateD}     - the release day"
    echo "    {title}     - the title"
    echo "    {component} - the component type"
}

function parse-args() {
    # Default values
    COMPONENTS=()
    DO_COLOR=false
    DO_SILENT=false
    DO_PAGE=true
    DO_COLUMNS="" # set to true if format_specified is false after parsing
    DO_HEADER=true
    DO_SORT=true
    SORT_COLUMN=1
    FORMAT=$'{date}\t{title}\t{component}'
    local format_specified=false
    local color_when="${COLOR:-auto}" # auto, on, yes, always, off, no, never

    # Loop over the arguments
    while [[ ${#} -gt 0 ]]; do
        case ${1} in
            -h)
                help-usage
                help-epilogue
                exit ${E_SUCCESS}
                ;;
            --help)
                help-full
                exit ${E_SUCCESS}
                ;;
            --config-file)
                shift 1
                ;;
            -c | --color)
                color_when="${2}"
                shift 1
                ;;
            -s | --silent)
                DO_SILENT=true
                ;;
            -p | --pager)
                DO_PAGE=true
                ;;
            -P | --no-pager)
                DO_PAGE=false
                ;;
            -c | --columns)
                DO_COLUMNS=true
                ;;
            -C | --no-columns)
                DO_COLUMNS=false
                ;;
            --header)
                DO_HEADER=true
                ;;
            --no-header)
                DO_HEADER=false
                ;;
            --format)
                FORMAT="${2}"
                format_specified=true
                shift 1
                ;;
            --sort)
                DO_SORT=true
                ;;
            --no-sort)
                DO_SORT=false
                ;;
            -k | --sort-column)
                SORT_COLUMN="${2}"
                shift 1
                ;;
            --list-components)
                printf "%s\n" "${COMPONENT_IDS_BY_ID[@]}" | tr ' ' '\n' | sort
                exit ${E_SUCCESS}
                ;;
            --)
                shift 1
                break
                ;;
            -*)
                echo "error: unknown option: ${1}" >&2
                return ${E_ERROR}
                ;;
            *)
                COMPONENTS+=("${1}")
                ;;
        esac
        shift 1
    done

    # If -- was used, collect the remaining arguments
    while [[ ${#} -gt 0 ]]; do
        COMPONENTS+=("${1}")
        shift 1
    done

    # If in silent mode, silence the output
    ${DO_SILENT} && silence-output

    # Set up colors
    if ! ${DO_SILENT}; then
        case "${color_when}" in
            on | yes | always)
                DO_COLOR=true
                ;;
            off | no | never)
                DO_COLOR=false
                ;;
            auto)
                if ${__IN_TERMINAL} && ! ${format_specified}; then
                    DO_COLOR=true
                else
                    DO_COLOR=false
                fi
                ;;
            *)
                echo "error: invalid color mode: ${color_when}" >&2
                return ${E_ERROR}
                ;;
        esac
        ${DO_COLOR} && setup-colors || unset-colors
    fi

    # If no components were given, default to all
    [[ ${#COMPONENTS[@]} -eq 0 ]] && COMPONENTS=("all")

    # Ensure the components are valid
    for component in "${COMPONENTS[@]}"; do
        if [[ -z "${COMPONENT_IDS_BY_NAME["${component}"]}" ]]; then
            echo "error: invalid component: ${component}" >&2
            return ${E_INVALID_COMPONENT}
        fi
    done

    # If no format was specified, then we should columnize the output
    if ! ${format_specified}; then
        DO_COLUMNS=true
    elif [[ -z "${DO_COLUMNS}" ]]; then
        DO_COLUMNS=false
    fi

    # Ensure the sort column is a number
    if ! [[ "${SORT_COLUMN}" =~ ^[0-9]+$ ]]; then
        echo "error: invalid sort column: ${SORT_COLUMN}" >&2
        return ${E_INVALID_ARGUMENT}
    fi

    return ${E_SUCCESS}
}


## helpful functions ###########################################################
################################################################################

# Setup the component IDs
COMPONENT_IDS=(
    "movies::665076"
    "movies_news::6367736"
    "movies_other::664931"
    "tv_news::6367841"
    "tv_disney::1082986"
    "tv_disney_nonfiction::1083016"
    "tv_series_d::1350061"
    "tv_hulu::1156041"
    "tv_animation::1083056"
    "movies_all::665076 664931"
    "tv_all::1082986 1350061 1156041 1083056"
    "all::665076 6367736 664931 6367841 1082986 1350061 1156041 1083056"
)

# Set up a couple of maps by looping over the COMPONENT_IDS array
declare -A COMPONENT_IDS_BY_NAME
declare -A COMPONENT_IDS_BY_ID
for component_id in "${COMPONENT_IDS[@]}"; do
    # Split the component ID into its name and ID
    name="${component_id%%::*}"
    id="${component_id##*::}"

    # Store the name and ID in the maps
    COMPONENT_IDS_BY_NAME["${name}"]="${id}"
    COMPONENT_IDS_BY_ID["${id}"]="${name}"
done

### Component IDs
###
## Movies
# 6367736 - Latest Movies News
# 665076 - Marvel Movies
# 664931 - Other Movies
## TV
# 6367841 - Latest TV News
# 1082986 - Marvel on Disney+
# 1083016 - Non-Fiction Disney+
# 1350061 - Marvel Series on D+
# 1156041 - Marvel on Hulu
# 1083056 - Animation

# @description Fetch a list of results from a component ID
# @usage _fetch-results [--offset <int>] [--limit <int>] [(--no)-header] [--format <format>] [--sort] [--sort-column <int>] <component ID>
# @example _fetch-results 665076
# @example _fetch-results --offset 100 --limit 100 movies_all tv_all
# @example _fetch-results --no-header --format '{title}\t({date})' 665076 --sort --sort-column 2
# @return 0 all components were fetched successfully
# @return 1 all components were unable to be fetched
# @return 2 some components were unable to be fetched
# @return 3 invalid component ID provided
# @return 4 invalid component ID provided
function _fetch-results() {
    local offset=0 limit=100 component="" component_id="" component_ids=()
    local format="{date}\t{title}\t{component}"
    local header do_header=false
    local sort_column=1 do_sort=true
    local exit_code=0
    local qs url response json

    # Parse the arguments
    while [ ${#} -gt 0 ]; do
        case "${1}" in
            --offset)
                offset="${2}"
                shift 2
                ;;
            --limit)
                limit="${2}"
                shift 2
                ;;
            --format)
                format="${2}"
                shift 2
                ;;
            --header)
                do_header=true
                shift
                ;;
            --no-header)
                do_header=false
                shift
                ;;
            --sort)
                do_sort=true
                shift
                ;;
            --no-sort)
                do_sort=false
                shift
                ;;
            --sort-column)
                sort_column="${2}"
                shift 2
                ;;
            *)
                component_id="${1}"
                if [[ "${component_id}" != [0-9]+ ]];  then
                    component_id="${COMPONENT_IDS_BY_NAME["${component_id}"]}"
                fi
                # Make sure it's in the list of valid component IDs
                if [[ -z "${component_id}" || -z "${COMPONENT_IDS_BY_ID["${component_id}"]}" ]]; then
                    echo-error "error: invalid component: ${1}"
                    return 3
                fi
                component_ids+=(${component_id})
                shift 1
                ;;
        esac
    done

    # Check if the component ID is valid
    if [[ -z "${component_ids}" ]]; then
        echo-error "error: no component ID provided"
        return 4
    fi

    # Show the header
    if ${do_header}; then
        header=$(
            awk -v c="${C_HEADER}" -v r="${C_RESET}" '{
                gsub(/{date}/,      c "Release Date" r);
                gsub(/{dateY}/,     r "Release Year" r);
                gsub(/{dateM}/,     c "Release Month" r);
                gsub(/{dateD}/,     c "Release Day" r);
                gsub(/{title}/,     c "Title" r);
                gsub(/{component}/, c "Type" r);
                print $0;
            }' <<< "${format}" | printf "%b" "$(cat)"
        )
        echo "${header}"
    fi

    # If we should sort, then use 

    # Loop over the component IDs
    for component_id in "${component_ids[@]}"; do
        # Fetch the results
        qs="componentId=${component_id}&offset=${offset}&limit=${limit}"
        url="https://www.marvel.com/v1/pagination/content_grid_cards?${qs}"
        response=$(curl -s "${url}" 2>/dev/null)
        json=$(echo "${response}" | python -m json.tool 2>/dev/null)
        if [ -z "${json}" ]; then
            echo-error "error: failed to fetch results from ${url}"
            [[ ${exit_code} -eq 0 ]] && exit_code=1
        fi

        awk -v component="${COMPONENT_IDS_BY_ID["${component_id}"]}" -v format="${format}" \
            -v c_date="${C_DATE}" -v c_title="${C_TITLE}" -v c_type="${C_TYPE}" -v c_reset="${C_RESET}" '
            function is_int(x) {
                return x ~ /^[0-9]+$/;
            }
            BEGIN {
                # Set the row number to 1
                row = 1;
            }
            /"headline":/ {
                # Store the title
                title = gensub(/.*"headline": " *(.*?) *".*/, "\\1", 1);
                next;
            }
            /"day":/ {
                # Store the day
                day = gensub(/.*"day": "(.*?)".*/, "\\1", 1);
                # If the day is not a number or is all 0s, then set it to "??"
                if (!is_int(day) || day == "00") {
                    day = "??";
                }
                next;
            }
            /"month":/ {
                # Store the month
                month = gensub(/.*"month": "(.*?)".*/, "\\1", 1);
                # If the month is not a number or is all 0s, then set it to "??"
                if (!is_int(month) || month == "00") {
                    month = "??";
                }
                next;
            }
            /"year":/ {
                # Store the year
                year = gensub(/.*"year": "(.*?)".*/, "\\1", 1);
                # If the year is not a number or is all 0s, then set it to "????"
                if (!is_int(year) || year == "0000") {
                    year = "????";
                }
                next;
            }
            # If we have a title, day, month, and year, print them out
            title != "" && day != "" && month != "" && year != "" {
                # print year "-" month "-" day "\t" title "\t" component;
                line = gensub(/{date}/,  c_date year "-" month "-" day c_reset, 1, format);
                line = gensub(/{dateY}/, c_date year c_reset, 1, line);
                line = gensub(/{dateM}/, c_date month c_reset, 1, line);
                line = gensub(/{dateD}/, c_date day c_reset, 1, line);
                line = gensub(/{title}/, c_title title c_reset, 1, line);
                line = gensub(/{component}/, c_type component c_reset, 1, line);
                print line;

                # Reset the title, day, month, and year
                title = "";
                day = "";
                month = "";
                year = "";
            }
        ' <<< "${json}"
        [[ ${exit_code} -eq 1 ]] && exit_code=2
    done | (
        ${do_sort} && sort -k ${sort_column} || cat
    )

    return ${exit_code}
}

function _print-components() {
    for component in "${COMPONENT_IDS[@]}"; do
        name="${component%%::*}"
        id="${component##*::}"
        echo -e "- ${name}\t(${id})"
    done | column -t -s $'\t'
}

function _ensure-multiple-rows() {
    # If DO_HEADER is false, then we don't have to worry about this
    ! ${DO_HEADER} && cat && return

    # Wait until at least 1 row of results is available before printing
    local row_count=0
    local lines=()
    while read -r line && ((row_count < 2)); do
        lines+=("${line}")
        let row_count++
    done

    # If we collected 2 lines (the header + 1 result), then print everything
    if [[ ${row_count} -eq 2 ]]; then
        printf "%s\n" "${lines[@]}"
        cat
    fi
}

function _pager() {
    ${DO_PAGE} && autopage || cat
}

function _columnize() {
    ${DO_COLUMNS} && column -t -s $'\t' || cat
}

function _format-output() {
    _columnize | _pager
}


## main ########################################################################
################################################################################

function main() {
    parse-args "${@}" || return ${?}

    local fetch_args=()
    ${DO_HEADER} && fetch_args+=("--header")
    ${DO_SORT} \
        && fetch_args+=("--sort" "--sort-column" "${SORT_COLUMN}") \
        || fetch_args+=("--no-sort")
    fetch_args+=("--format" "${FORMAT}")
    fetch_args+=("${COMPONENTS[@]}")

    _fetch-results "${fetch_args[@]}" | _ensure-multiple-rows | _format-output
}


## run #########################################################################
################################################################################

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "${@}"
