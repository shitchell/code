Help on class HTTPServer in module tornado.httpserver:

class HHTTTTPPSSeerrvveerr(tornado.tcpserver.TCPServer, tornado.util.Configurable, tornado.httputil.HTTPServerConnectionDelegate)
 |  HTTPServer(*args: Any, **kwargs: Any) -> None
 |  
 |  A non-blocking, single-threaded HTTP server.
 |  
 |  A server is defined by a subclass of `.HTTPServerConnectionDelegate`,
 |  or, for backwards compatibility, a callback that takes an
 |  `.HTTPServerRequest` as an argument. The delegate is usually a
 |  `tornado.web.Application`.
 |  
 |  `HTTPServer` supports keep-alive connections by default
 |  (automatically for HTTP/1.1, or for HTTP/1.0 when the client
 |  requests ``Connection: keep-alive``).
 |  
 |  If ``xheaders`` is ``True``, we support the
 |  ``X-Real-Ip``/``X-Forwarded-For`` and
 |  ``X-Scheme``/``X-Forwarded-Proto`` headers, which override the
 |  remote IP and URI scheme/protocol for all requests.  These headers
 |  are useful when running Tornado behind a reverse proxy or load
 |  balancer.  The ``protocol`` argument can also be set to ``https``
 |  if Tornado is run behind an SSL-decoding proxy that does not set one of
 |  the supported ``xheaders``.
 |  
 |  By default, when parsing the ``X-Forwarded-For`` header, Tornado will
 |  select the last (i.e., the closest) address on the list of hosts as the
 |  remote host IP address.  To select the next server in the chain, a list of
 |  trusted downstream hosts may be passed as the ``trusted_downstream``
 |  argument.  These hosts will be skipped when parsing the ``X-Forwarded-For``
 |  header.
 |  
 |  To make this server serve SSL traffic, send the ``ssl_options`` keyword
 |  argument with an `ssl.SSLContext` object. For compatibility with older
 |  versions of Python ``ssl_options`` may also be a dictionary of keyword
 |  arguments for the `ssl.wrap_socket` method.::
 |  
 |     ssl_ctx = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
 |     ssl_ctx.load_cert_chain(os.path.join(data_dir, "mydomain.crt"),
 |                             os.path.join(data_dir, "mydomain.key"))
 |     HTTPServer(application, ssl_options=ssl_ctx)
 |  
 |  `HTTPServer` initialization follows one of three patterns (the
 |  initialization methods are defined on `tornado.tcpserver.TCPServer`):
 |  
 |  1. `~tornado.tcpserver.TCPServer.listen`: simple single-process::
 |  
 |          server = HTTPServer(app)
 |          server.listen(8888)
 |          IOLoop.current().start()
 |  
 |     In many cases, `tornado.web.Application.listen` can be used to avoid
 |     the need to explicitly create the `HTTPServer`.
 |  
 |  2. `~tornado.tcpserver.TCPServer.bind`/`~tornado.tcpserver.TCPServer.start`:
 |     simple multi-process::
 |  
 |          server = HTTPServer(app)
 |          server.bind(8888)
 |          server.start(0)  # Forks multiple sub-processes
 |          IOLoop.current().start()
 |  
 |     When using this interface, an `.IOLoop` must *not* be passed
 |     to the `HTTPServer` constructor.  `~.TCPServer.start` will always start
 |     the server on the default singleton `.IOLoop`.
 |  
 |  3. `~tornado.tcpserver.TCPServer.add_sockets`: advanced multi-process::
 |  
 |          sockets = tornado.netutil.bind_sockets(8888)
 |          tornado.process.fork_processes(0)
 |          server = HTTPServer(app)
 |          server.add_sockets(sockets)
 |          IOLoop.current().start()
 |  
 |     The `~.TCPServer.add_sockets` interface is more complicated,
 |     but it can be used with `tornado.process.fork_processes` to
 |     give you more flexibility in when the fork happens.
 |     `~.TCPServer.add_sockets` can also be used in single-process
 |     servers if you want to create your listening sockets in some
 |     way other than `tornado.netutil.bind_sockets`.
 |  
 |  .. versionchanged:: 4.0
 |     Added ``decompress_request``, ``chunk_size``, ``max_header_size``,
 |     ``idle_connection_timeout``, ``body_timeout``, ``max_body_size``
 |     arguments.  Added support for `.HTTPServerConnectionDelegate`
 |     instances as ``request_callback``.
 |  
 |  .. versionchanged:: 4.1
 |     `.HTTPServerConnectionDelegate.start_request` is now called with
 |     two arguments ``(server_conn, request_conn)`` (in accordance with the
 |     documentation) instead of one ``(request_conn)``.
 |  
 |  .. versionchanged:: 4.2
 |     `HTTPServer` is now a subclass of `tornado.util.Configurable`.
 |  
 |  .. versionchanged:: 4.5
 |     Added the ``trusted_downstream`` argument.
 |  
 |  .. versionchanged:: 5.0
 |     The ``io_loop`` argument has been removed.
 |  
 |  Method resolution order:
 |      HTTPServer
 |      tornado.tcpserver.TCPServer
 |      tornado.util.Configurable
 |      tornado.httputil.HTTPServerConnectionDelegate
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  ____iinniitt____(self, *args: Any, **kwargs: Any) -> None
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  async cclloossee__aallll__ccoonnnneeccttiioonnss(self) -> None
 |      Close all open connections and asynchronously wait for them to finish.
 |      
 |      This method is used in combination with `~.TCPServer.stop` to
 |      support clean shutdowns (especially for unittests). Typical
 |      usage would call ``stop()`` first to stop accepting new
 |      connections, then ``await close_all_connections()`` to wait for
 |      existing connections to finish.
 |      
 |      This method does not currently close open websocket connections.
 |      
 |      Note that this method is a coroutine and must be called with ``await``.
 |  
 |  hhaannddllee__ssttrreeaamm(self, stream: tornado.iostream.IOStream, address: Tuple) -> None
 |      Override to handle a new `.IOStream` from an incoming connection.
 |      
 |      This method may be a coroutine; if so any exceptions it raises
 |      asynchronously will be logged. Accepting of incoming connections
 |      will not be blocked by this coroutine.
 |      
 |      If this `TCPServer` is configured for SSL, ``handle_stream``
 |      may be called before the SSL handshake has completed. Use
 |      `.SSLIOStream.wait_for_handshake` if you need to verify the client's
 |      certificate or use NPN/ALPN.
 |      
 |      .. versionchanged:: 4.2
 |         Added the option for this method to be a coroutine.
 |  
 |  iinniittiiaalliizzee(self, request_callback: Union[tornado.httputil.HTTPServerConnectionDelegate, Callable[[tornado.httputil.HTTPServerRequest], NoneType]], no_keep_alive: bool = False, xheaders: bool = False, ssl_options: Union[Dict[str, Any], ssl.SSLContext, NoneType] = None, protocol: Optional[str] = None, decompress_request: bool = False, chunk_size: Optional[int] = None, max_header_size: Optional[int] = None, idle_connection_timeout: Optional[float] = None, body_timeout: Optional[float] = None, max_body_size: Optional[int] = None, max_buffer_size: Optional[int] = None, trusted_downstream: Optional[List[str]] = None) -> None
 |  
 |  oonn__cclloossee(self, server_conn: object) -> None
 |      This method is called when a connection has been closed.
 |      
 |      :arg server_conn: is a server connection that has previously been
 |          passed to ``start_request``.
 |  
 |  ssttaarrtt__rreeqquueesstt(self, server_conn: object, request_conn: tornado.httputil.HTTPConnection) -> tornado.httputil.HTTPMessageDelegate
 |      This method is called by the server when a new request has started.
 |      
 |      :arg server_conn: is an opaque object representing the long-lived
 |          (e.g. tcp-level) connection.
 |      :arg request_conn: is a `.HTTPConnection` object for a single
 |          request/response exchange.
 |      
 |      This method should return a `.HTTPMessageDelegate`.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  ccoonnffiigguurraabbllee__bbaassee() -> Type[tornado.util.Configurable] from builtins.type
 |      Returns the base class of a configurable hierarchy.
 |      
 |      This will normally return the class in which it is defined.
 |      (which is *not* necessarily the same as the ``cls`` classmethod
 |      parameter).
 |  
 |  ccoonnffiigguurraabbllee__ddeeffaauulltt() -> Type[tornado.util.Configurable] from builtins.type
 |      Returns the implementation class to be used if none is configured.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from tornado.tcpserver.TCPServer:
 |  
 |  aadddd__ssoocckkeett(self, socket: socket.socket) -> None
 |      Singular version of `add_sockets`.  Takes a single socket object.
 |  
 |  aadddd__ssoocckkeettss(self, sockets: Iterable[socket.socket]) -> None
 |      Makes this server start accepting connections on the given sockets.
 |      
 |      The ``sockets`` parameter is a list of socket objects such as
 |      those returned by `~tornado.netutil.bind_sockets`.
 |      `add_sockets` is typically used in combination with that
 |      method and `tornado.process.fork_processes` to provide greater
 |      control over the initialization of a multi-process server.
 |  
 |  bbiinndd(self, port: int, address: Optional[str] = None, family: socket.AddressFamily = <AddressFamily.AF_UNSPEC: 0>, backlog: int = 128, reuse_port: bool = False) -> None
 |      Binds this server to the given port on the given address.
 |      
 |      To start the server, call `start`. If you want to run this server
 |      in a single process, you can call `listen` as a shortcut to the
 |      sequence of `bind` and `start` calls.
 |      
 |      Address may be either an IP address or hostname.  If it's a hostname,
 |      the server will listen on all IP addresses associated with the
 |      name.  Address may be an empty string or None to listen on all
 |      available interfaces.  Family may be set to either `socket.AF_INET`
 |      or `socket.AF_INET6` to restrict to IPv4 or IPv6 addresses, otherwise
 |      both will be used if available.
 |      
 |      The ``backlog`` argument has the same meaning as for
 |      `socket.listen <socket.socket.listen>`. The ``reuse_port`` argument
 |      has the same meaning as for `.bind_sockets`.
 |      
 |      This method may be called multiple times prior to `start` to listen
 |      on multiple ports or interfaces.
 |      
 |      .. versionchanged:: 4.4
 |         Added the ``reuse_port`` argument.
 |  
 |  lliisstteenn(self, port: int, address: str = '') -> None
 |      Starts accepting connections on the given port.
 |      
 |      This method may be called more than once to listen on multiple ports.
 |      `listen` takes effect immediately; it is not necessary to call
 |      `TCPServer.start` afterwards.  It is, however, necessary to start
 |      the `.IOLoop`.
 |  
 |  ssttaarrtt(self, num_processes: Optional[int] = 1, max_restarts: Optional[int] = None) -> None
 |      Starts this server in the `.IOLoop`.
 |      
 |      By default, we run the server in this process and do not fork any
 |      additional child process.
 |      
 |      If num_processes is ``None`` or <= 0, we detect the number of cores
 |      available on this machine and fork that number of child
 |      processes. If num_processes is given and > 1, we fork that
 |      specific number of sub-processes.
 |      
 |      Since we use processes and not threads, there is no shared memory
 |      between any server code.
 |      
 |      Note that multiple processes are not compatible with the autoreload
 |      module (or the ``autoreload=True`` option to `tornado.web.Application`
 |      which defaults to True when ``debug=True``).
 |      When using multiple processes, no IOLoops can be created or
 |      referenced until after the call to ``TCPServer.start(n)``.
 |      
 |      Values of ``num_processes`` other than 1 are not supported on Windows.
 |      
 |      The ``max_restarts`` argument is passed to `.fork_processes`.
 |      
 |      .. versionchanged:: 6.0
 |      
 |         Added ``max_restarts`` argument.
 |  
 |  ssttoopp(self) -> None
 |      Stops listening for new connections.
 |      
 |      Requests currently in progress may still continue after the
 |      server is stopped.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from tornado.tcpserver.TCPServer:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables (if defined)
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from tornado.util.Configurable:
 |  
 |  ccoonnffiigguurree(impl, **kwargs) from builtins.type
 |      Sets the class to use when the base class is instantiated.
 |      
 |      Keyword arguments will be saved and added to the arguments passed
 |      to the constructor.  This can be used to set global defaults for
 |      some parameters.
 |  
 |  ccoonnffiigguurreedd__ccllaassss() from builtins.type
 |      Returns the currently configured class.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods inherited from tornado.util.Configurable:
 |  
 |  ____nneeww____(cls, *args: Any, **kwargs: Any) -> Any
 |      Create and return a new object.  See help(type) for accurate signature.
