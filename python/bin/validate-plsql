#!/usr/bin/env python3

import sys

# from antlr4 import *
from antlr4 import CommonTokenStream, InputStream
from langparse.plsql import PlSqlLexer
from langparse.plsql import PlSqlParser
from antlr4.error.ErrorListener import ErrorListener


class SyntaxErrorListener(ErrorListener):
    def __init__(self):
        super(SyntaxErrorListener, self).__init__()
        self.errors = []

    def syntaxError(self, recognizer, offendingSymbol, line, column, msg, e):
        self.errors.append(f"line {line}:{column} {msg}")


def get_plsql_errors(filepath) -> list[str]:
    # Read the file
    with open(filepath, "r") as file:
        input_stream = InputStream(file.read())

    # Create a lexer and parser
    lexer = PlSqlLexer(input_stream)
    stream = CommonTokenStream(lexer)
    parser = PlSqlParser(stream)

    # Add custom error listener to capture syntax errors
    error_listener = SyntaxErrorListener()
    parser.removeErrorListeners()  # Remove default console error listener
    parser.addErrorListener(error_listener)

    # Attempt to parse the PL/SQL file
    tree = parser.sql_script()  # Start rule for parsing

    if error_listener.errors:
        return error_listener.errors
    else:
        return []


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python validate_plsql.py <file_path> [<file_path> ...]")
        sys.exit(1)

    for filepath in sys.argv[1:]:
        print(f"* {filepath} ... ", end="", flush=True)
        errors: list[str] = get_plsql_errors(filepath)
        if errors:
            s = "" if len(errors) == 1 else "s"
            print(f"{len(errors)} error{s}")
            for error in errors:
                print(f"  {error}")
        else:
            print("done")
